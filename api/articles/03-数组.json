{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"03-数组","date":"2021-09-13T14:35:32.000Z","updated":"2021-09-14T15:52:56.160Z","comments":true,"path":"api/articles/03-数组.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog3.jpg","content":"<h3 id=\"一、容器\"><a href=\"#一、容器\" class=\"headerlink\" title=\"一、容器\"></a>一、容器</h3><ul>\n<li><p>如果使用很多个变量来逐一保存数据，这样操作起来会非常的不便。把这80个数据想象成为80个鸡蛋，如果让你一个个的操作这些鸡蛋，你会非常的慌乱，此时我们可以使用一个篮子，将所有的鸡蛋(数据)全部存储到一个容器中，统一操作。 </p>\n</li>\n<li><p>装鸡蛋用到的篮子我们可以称之为容器，容器里的一个个的鸡蛋数据，我们可以称之为元素。</p>\n</li>\n<li><p>Java里的容器有很多种实现方式，数组是其中最基本也最重要的一种</p>\n</li>\n</ul>\n<h3 id=\"二、数组\"><a href=\"#二、数组\" class=\"headerlink\" title=\"二、数组\"></a>二、数组</h3><h5 id=\"1-数组的特点\"><a href=\"#1-数组的特点\" class=\"headerlink\" title=\"1.数组的特点\"></a>1.数组的特点</h5><ul>\n<li><p>他是一种数据结构(容器)，用来存储<strong>同一种类型</strong>数据的集合</p>\n</li>\n<li><p>数组是有大小的，而且数组的大小<strong>确定后不允许改变</strong></p>\n</li>\n<li><p>数组里的元素是<strong>有序</strong>的，可以通过索引获取和修改数据，<strong>索引从0开始</strong></p>\n</li>\n<li><p>创建数组时会在内存中开辟一整块连续的空间，<strong>数组名指向这块内存的首地址</strong>。</p>\n</li>\n<li><p>如果数组里的数据没有设置值，那么会<strong>有一个默认的值</strong>，</p>\n<p>整数（byte,short,in）默认0，long：0L</p>\n<p>浮点数   float：0.0F    double：0.0</p>\n<p>布尔默认false</p>\n<p>字符默认，0或  ‘ \\u0000 ’ （表现为空）</p>\n<p>引用类型，0默认null</p>\n</li>\n<li><p>在 java中，允许长度为0的数组，<strong>长度为 0 的数组与null并不完全相同</strong></p>\n</li>\n</ul>\n<h5 id=\"2-初始化（一维）\"><a href=\"#2-初始化（一维）\" class=\"headerlink\" title=\"2.初始化（一维）\"></a>2.初始化（一维）</h5><ul>\n<li>动态初始化：创建数组时，不指定元素后续通过（下标，角标，索引）来给数组里的数据赋值。元素类型[]   数组名 = new   元素类型[元素个数或者数组长度] ;示例：int[] arr = new int[3]</li>\n</ul>\n<ul>\n<li><p>静态初始化：创建数组时，就给元素赋值。</p>\n<p>元素类型[] 数组名 = new 元素类型[]{元素1，元素2，元素3……};</p>\n<p>示例：int[] arr = new int[] {1,2,3,};    int[] arr = {1,2,3,4}</p>\n</li>\n<li><p><strong>注意</strong>：大括号直接赋值的方式只能写在一行，不能分开来写！</p>\n</li>\n<li><p>注意：数组在创建时就已经指定好了长度，在代码里使用 <strong>length 属性</strong>来获取数组的长度。</p>\n</li>\n<li><p>注意：当明确数组元素时，建议使用第二种方式</p>\n</li>\n</ul>\n<h5 id=\"3-数组遇到的问题\"><a href=\"#3-数组遇到的问题\" class=\"headerlink\" title=\"3.数组遇到的问题\"></a>3.数组遇到的问题</h5><ul>\n<li><p>数组索引越界异常：ArrayIndexOutOfBoundsException（程序运行的时候发生)）</p>\n<p>访问到了数组的最后一个元素后，你还在继续访问,此时就会出现此问题。</p>\n</li>\n<li><p>空指针异常：NullPointerException（程序运行的时候发生）</p>\n<p>一个引用变量已经不再指向对内存的地址。这个时候，还在使用这个引用。</p>\n</li>\n</ul>\n<h5 id=\"4-遍历方法\"><a href=\"#4-遍历方法\" class=\"headerlink\" title=\"4.遍历方法\"></a>4.遍历方法</h5><ul>\n<li><p>普通for循环</p>\n</li>\n<li><p>for each循环（增强for循环）</p>\n</li>\n<li><p>while循环</p>\n</li>\n<li><p>注意：for each循环语句的循环变量将会遍历数组中的每个元素，而不是下标值</p>\n<p>如果不希望遍历整个集合，或者在循环内部需要使用下标值时，用普通for循环</p>\n</li>\n</ul>\n<h5 id=\"5-选择排序\"><a href=\"#5-选择排序\" class=\"headerlink\" title=\"5.选择排序\"></a>5.选择排序</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从索引为0的元素开始与其他元素(自己除外)依次比较，每次比较完，最小值出现在最左边</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n     int[] arr &#x3D;&#123;12,22,53,65,45,32&#125;;\n     for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;\n         for (int j &#x3D; i+1; j &lt; arr.length; j++) &#123;\n             if (arr[i]&gt;arr[j]) &#123;\n                 int temp &#x3D; arr[i];\n                 arr[i]&#x3D;arr[j];\n                 arr[j]&#x3D;temp;\n             &#125;\n         &#125;\n     &#125;\n     System.out.println(Arrays.toString(arr));\n&#125;</code></pre>\n\n\n\n<h5 id=\"6-冒泡排序\"><a href=\"#6-冒泡排序\" class=\"headerlink\" title=\"6.冒泡排序\"></a>6.冒泡排序</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>相邻的元素，两两相比，大的后移。每次比较完后，最大值出现在右边</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n  int[] arr &#x3D;&#123;12,22,53,65,45,32&#125;;\n  for (int i &#x3D; 0; i &lt; arr.length-1; i++) &#123;\n      for (int j &#x3D; 0; j &lt; arr.length-1-i; j++) &#123;\n          if (arr[j]&gt;arr[j+1])&#123;\n             int temp &#x3D; arr[j];\n             arr[j] &#x3D; arr[j+1];\n             arr[j+1] &#x3D; temp;\n          &#125;\n      &#125;\n  &#125;\n  System.out.println(Arrays.toString(arr));\n&#125;</code></pre>\n\n\n\n<h5 id=\"7-折半（二分）查找\"><a href=\"#7-折半（二分）查找\" class=\"headerlink\" title=\"7.折半（二分）查找\"></a>7.折半（二分）查找</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需要 有序数组</p></blockquote>\n<h3 id=\"三、基本和引用类型\"><a href=\"#三、基本和引用类型\" class=\"headerlink\" title=\"三、基本和引用类型\"></a>三、基本和引用类型</h3><h5 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h5><ul>\n<li>在 java 中只有值传递，引用传递的时候，传递的是地址值。</li>\n<li>基本数据类型传递过去后，形参改变对实参没有影响。<br>引用类型传递过去后，形参改变直接影响实参 </li>\n</ul>\n<h5 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h5><ul>\n<li><p>基本数据类型,基本数据类型只有8种，可按照如下分类</p>\n<p>整数类型：long、int、short、byte<br>浮点类型：float、double<br>字符类型：char<br>布尔类型：boolean</p>\n</li>\n<li><p>引用数据类型大致包括：</p>\n<p>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p>\n<p>简单来说，所有的非基本数据类型都是引用数据类型。</p>\n</li>\n</ul>\n<h5 id=\"3-形参实参\"><a href=\"#3-形参实参\" class=\"headerlink\" title=\"3.形参实参\"></a>3.形参实参</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    System.out.println(&quot;---基本数据类型---&quot;);\n    int a&#x3D;10;\n    System.out.println(&quot;形参改变前，实参：&quot;+a);\n    change(a);\n    System.out.println(&quot;作为形参改变后，实参：&quot;+a);\n\n    System.out.println(&quot;---引用数据类型---&quot;);\n    int[] arr&#x3D;&#123;1,2,3&#125;;\n    System.out.println(&quot;形参改变前，实参：&quot;+arr[2]);\n    change2(arr);\n    System.out.println(&quot;作为形参改变后，实参：&quot;+arr[2]);\n&#125;\n\nprivate static void change2(int[] arr) &#123;\n    arr[2] &#x3D; 100;\n    System.out.println(&quot;方法中，当a作为形参且改变后：&quot;+arr[2]);\n&#125;\n\nprivate static void change(int a) &#123;\n    a&#x3D;20;\n    System.out.println(&quot;方法中，当a作为形参且改变后：&quot;+a);\n&#125;</code></pre>\n\n\n<h3 id=\"四、数组内存图\"><a href=\"#四、数组内存图\" class=\"headerlink\" title=\"四、数组内存图\"></a>四、数组内存图</h3><h5 id=\"1-内存概述\"><a href=\"#1-内存概述\" class=\"headerlink\" title=\"1.内存概述\"></a>1.内存概述</h5><p>内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后CPU再将结果传送出来。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。</p>\n<p>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>\n<h5 id=\"2-java虚拟机的内存划分\"><a href=\"#2-java虚拟机的内存划分\" class=\"headerlink\" title=\"2.java虚拟机的内存划分\"></a>2.java虚拟机的内存划分</h5><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p>\n<img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%9B%BE.jpg\" alt=\"img\" style=\"zoom: 80%;\" />\n\n<table>\n<thead>\n<tr>\n<th>区域名称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>程序计数器</td>\n<td align=\"left\">程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td>\n</tr>\n<tr>\n<td>虚拟机栈</td>\n<td align=\"left\">用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度的各种基本数据类型、对象引用，方法执行完，自动释放。</td>\n</tr>\n<tr>\n<td>本地方法栈</td>\n<td align=\"left\">当程序中调用了native的本地方法时，本地方法执行期间的内存区域。在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。</td>\n</tr>\n<tr>\n<td>方法区</td>\n<td align=\"left\">存储了每个类的信息（包括类的名称、方法信息、字段信息）、<strong>静态变量</strong>、<strong>常量</strong>以及编译器编译后的代码等。</td>\n</tr>\n<tr>\n<td>堆内存</td>\n<td align=\"left\">存储对象（包括数组对象），new来创建的，都存储在堆内存。</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-数组在内存中的存储\"><a href=\"#3-数组在内存中的存储\" class=\"headerlink\" title=\"3.数组在内存中的存储\"></a>3.数组在内存中的存储</h5><p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE2.png\" alt=\"image-20210331160927214\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>思考：打印arr为什么是[I@5f150435，它是数组的地址吗？</p>\n<p>答：它不是数组的地址。</p>\n<p>问？不是说arr中存储的是数组对象的首地址吗？</p>\n<p>答：arr中存储的是数组的首地址，但是因为数组是引用数据类型，打印arr时，会自动调用arr数组对象的toString()方法，默认该方法实现的是对象类型名@该对象的hashCode()值的十六进制值。</p>\n<p>问？对象的hashCode值是否就是对象内存地址？</p>\n<p>答：不一定，因为这个和不同品牌的JVM产品的具体实现有关。例如：Oracle的OpenJDK中给出了5种实现，其中有一种是直接返回对象的内存地址，但是OpenJDK默认没有选择这种方式。</p></blockquote>\n<h3 id=\"五、二维数组\"><a href=\"#五、二维数组\" class=\"headerlink\" title=\"五、二维数组\"></a>五、二维数组</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1. 第一种格式\n\n   int[][] arr &#x3D; new int[3] [2]; \n\n   定义了名称为 arr 的二维数组 二维数组中有 3 个一维数组 \n\n   每一个一维数组中有 2 个元素 一维数组的名称分别为 arr[0], arr[1], arr[2] \n\n   给第一个一维数组 1 脚标位赋值为 78 \n\n   写法是：arr[0] [1] &#x3D; 78;\n\n2. 第二种格式\n\n   int[][] arr &#x3D; new int[3] []; \n\n   二维数组中有 3 个一维数组 \n\n   每个一维数组都是默认初始化值 null----引用类型的初始化值为 Null \n\n   可以对这个三个一维数组分别进行初始化 \n\n   arr[0] &#x3D; new int[3]; arr[1] &#x3D; new int[1]; arr[2] &#x3D; new int[2];\n\n3. 第三种格式\n\n   int[][] arr &#x3D; &#123;&#123;3,8,2&#125;,&#123;2,7&#125;,&#123;9,0,1,6&#125;&#125;; \n\n   定义一个名称为 arr 的二维数组 \n\n   二维数组中的有三个一维数组 \n\n   一个一维数组中具体元素也都已初始化 \n\n   第一个一维数组 arr[0] &#x3D; &#123;3,8,2&#125;; \n\n   第二个一维数组 arr[1] &#x3D; &#123;2,7&#125;; \n\n   第三个一维数组 arr[2] &#x3D; &#123;9,0,1,6&#125;; \n\n   第三个一维数组的长度表示方式：arr[2].length;\n   \n   \n 4. 遍历格式\n \n \tpublic static void main(String[] args) &#123; \n \t\n \t\tint[][] arr &#x3D; &#123;&#123;60,12,23&#125;,&#123;0,50,69&#125;,&#123;98,120&#125;,&#123;111,222,333&#125;&#125;;\n \t\t\n \t\tfor(int x &#x3D; 0;x&lt;arr.length;x++)&#123; \n \t\t\n \t\t\tfor(int y &#x3D; 0;y&lt;arr[x].length;y++)&#123; \n \t\t\t\n \t\t\t\tSystem.out.println(arr[x][y]+&quot; &quot;);\n\t\t\t&#125; \n\t\t\t\n\t\t\tSystem.out.println(); \n\t\t&#125;</code></pre>\n\n<h3 id=\"六、可变参数\"><a href=\"#六、可变参数\" class=\"headerlink\" title=\"六、可变参数\"></a>六、可变参数</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. int add(T... a)：该函数可以添加多个同种类型的数据，相当于函数的参数是数组形式。 \n\n2. int add(T a,T... a1)：在传参数是，除了第一个为 a，其他全部都是属于可变参数。\n\n注意：可变参数必须放在其他参数的最后边。 传入的实参必须是根据形参的同种类型的参数</code></pre>","text":"一、容器 如果使用很多个变量来逐一保存数据，这样操作起来会非常的不便。把这80个数据想象成为80个鸡蛋，如果让你一个个的操作这些鸡蛋，你会非常的慌乱，此时我们可以使用一个篮子，将所有的鸡蛋(数据)全部存储到一个容器中，统一操作。 装鸡蛋用到的篮子我们可以称之为容器，容器里的一个个...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">一、容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">二、数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.数组的特点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88%E4%B8%80%E7%BB%B4%EF%BC%89\"><span class=\"toc-text\">2.初始化（一维）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3.数组遇到的问题</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4.遍历方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">5.选择排序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">6.冒泡排序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E6%8A%98%E5%8D%8A%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">7.折半（二分）查找</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%9F%BA%E6%9C%AC%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">三、基本和引用类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.概述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.分类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">3.形参实参</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE\"><span class=\"toc-text\">四、数组内存图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.内存概述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86\"><span class=\"toc-text\">2.java虚拟机的内存划分</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">3.数组在内存中的存储</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">五、二维数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">六、可变参数</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"面向对象（上）","uid":"0959816aacb592f211c0dd883a8ef3db","slug":"04-面向对象（上）","date":"2021-09-13T14:36:32.000Z","updated":"2021-09-14T15:53:13.090Z","comments":true,"path":"api/articles/04-面向对象（上）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog4.jpg","text":"一、概述 Java语言是面向对象的程序设计语言，而面向对象思想（Object Oriented Programming）是一种程序设计思想。 这里的对象泛指现实中的一切事物，而每种事物都具有自己的属性和行为 而面向对象编程就是参照现实中的事物，将其属性和行为抽象出来，描述成计算机...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"流程控制语句","uid":"7689509bc540e79b176cff8111263e2f","slug":"02-流程控制语句","date":"2021-09-13T14:34:32.000Z","updated":"2021-09-14T15:52:47.506Z","comments":true,"path":"api/articles/02-流程控制语句.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog2.jpg","text":"一、顺序结构顺序结构就是从上到下逐行执行，中间没有任何跳转和判断。 public static void main(String[] args)&#123; System.out.println(&quot;&quot;); System.out.println(&quot;&q...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}