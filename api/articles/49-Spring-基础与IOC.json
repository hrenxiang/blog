{"title":"Spring 基础和IOC","uid":"8ec558949bfff1ff48dc8dd0d9de915c","slug":"49-Spring-基础与IOC","date":"2021-09-13T15:26:32.000Z","updated":"2021-09-15T10:51:05.577Z","comments":true,"path":"api/articles/49-Spring-基础与IOC.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","content":"<h3 id=\"01-Spring框架简介\"><a href=\"#01-Spring框架简介\" class=\"headerlink\" title=\"01. Spring框架简介\"></a>01. Spring框架简介</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring 框架是一个 Java 平台，为开发 Java 应用程序提供全面的基础架构支持。 Spring 处理基础结构，因此您可以专注于应用程序。</p>\n<p>Spring 使您能够从“普通的 Java 对象”(POJO)构建应用程序，并将企业服务非侵入性地应用于 POJO。此功能适用于 Java SE 编程模型以及全部和部分 Java EE。</p></blockquote>\n<h4 id=\"1-1-介绍\"><a href=\"#1-1-介绍\" class=\"headerlink\" title=\"1.1 介绍\"></a>1.1 介绍</h4><p>Spring是一个分层的（**<code>一站式</code>**） 轻量级开源框架</p>\n<p>Spring的核心是**<code>控制反转（IoC）和 面向切面（AOP）</code>**</p>\n<h4 id=\"1-2-一站式-轻量\"><a href=\"#1-2-一站式-轻量\" class=\"headerlink\" title=\"1.2 一站式 轻量\"></a>1.2 一站式 轻量</h4><p>javaEE分三层开发 WEB层，业务层，持久层。在spring中有SpringMvc可以替代Struts2，springJDBC可以替代Hibernate。等于一个spring框架可以快速开发JavaEE应用。</p>\n<p>关于轻量级就不太多说了，spring整个框架打包出来也才1M多的内存大小。spring运行中的消耗也不大。那肯定是轻量级的框架。</p>\n<hr>\n<h3 id=\"02-SpringFramework\"><a href=\"#02-SpringFramework\" class=\"headerlink\" title=\"02. SpringFramework\"></a>02. SpringFramework</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。</p></blockquote>\n<h4 id=\"2-1-五大功能模块\"><a href=\"#2-1-五大功能模块\" class=\"headerlink\" title=\"2.1 五大功能模块\"></a>2.1 五大功能模块</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-overview.png\" alt=\"spring overview\"></p>\n<table>\n<thead>\n<tr>\n<th>功能模块</th>\n<th>功能介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Testing</td>\n<td>提供了对 junit 或 TestNG 测试框架的整合。</td>\n</tr>\n<tr>\n<td>Core Container</td>\n<td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td>\n</tr>\n<tr>\n<td>AOP&amp;Aspects</td>\n<td>面向切面编程</td>\n</tr>\n<tr>\n<td>Data Access/Integration</td>\n<td>提供了对数据访问/集成的功能。</td>\n</tr>\n<tr>\n<td>Spring MVC</td>\n<td>提供了面向Web应用程序的集成功能。</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-2-SpringFramework优点\"><a href=\"#2-2-SpringFramework优点\" class=\"headerlink\" title=\"2.2 SpringFramework优点\"></a>2.2 SpringFramework优点</h4><ul>\n<li><strong>非侵入式</strong>：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</li>\n<li><strong>控制反转</strong>：IOC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。</li>\n<li><strong>面向切面编程</strong>：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</li>\n<li><strong>容器</strong>：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</li>\n<li><strong>组件化</strong>：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</li>\n<li><strong>声明式</strong>：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</li>\n<li><strong>一站式</strong>：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</li>\n</ul>\n<hr>\n<h3 id=\"03-IOC-的简介\"><a href=\"#03-IOC-的简介\" class=\"headerlink\" title=\"03. IOC 的简介\"></a>03. IOC 的简介</h3><h4 id=\"3-1-容器\"><a href=\"#3-1-容器\" class=\"headerlink\" title=\"3.1 容器\"></a>3.1 容器</h4><p>Servlet 容器能够管理 Servlet、Filter、Listener 这样的组件的一生，所以它是一个复杂容器。我们即将要学习的 IOC 容器也是一个复杂容器。它们不仅要负责<strong>创建</strong>组件的对象、<strong>存储</strong>组件的对象，还要负责<strong>调用</strong>组件的方法让它们工作，最终在特定情况下<strong>销毁</strong>组件。</p>\n<h4 id=\"3-2-IOC-DI\"><a href=\"#3-2-IOC-DI\" class=\"headerlink\" title=\"3.2 IOC DI\"></a>3.2 IOC DI</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>IOC – Inverse of Control，<strong>控制反转</strong>，将对象的创建权反转给Spring！！</p>\n<p><strong>IOC作用：对象之间解耦。利于后期维护和修改。（修改xml文件不同于修改.java源代码，不涉及重新编译、打包、部署等操作）</strong></p>\n<p><strong>DI</strong>：Dependency Injection，翻译过来是<strong>依赖注入</strong>。在Spring框架负责创建Bean对象时，动态的将依赖对象注入到Bean组件中！！</p>\n<p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器的资源注入。相对于IOC而言，这种表述更直接。</p>\n<p>所以结论是：IOC 就是一种反转控制的思想， 而 <strong>DI 是对 IOC 的一种具体实现</strong>。</p></blockquote>\n<h4 id=\"3-3-IOC-内容\"><a href=\"#3-3-IOC-内容\" class=\"headerlink\" title=\"3.3 IOC 内容\"></a>3.3 IOC 内容</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-ioc-xmind.png\" alt=\"img\"></p>\n<hr>\n<h3 id=\"04-IOC-的实现\"><a href=\"#04-IOC-的实现\" class=\"headerlink\" title=\"04. IOC 的实现\"></a>04. IOC 的实现</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。</p>\n<p><strong>Spring认为一切类都是Bean，比如实体类、DAO类、业务层、控制类、通知类等，容纳这些Bean的是Spring提供的IoC容器，所以Spring是一种基于Bean的编程</strong></p>\n<p>在创建 bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式</p></blockquote>\n<h4 id=\"4-1-BeanFactory\"><a href=\"#4-1-BeanFactory\" class=\"headerlink\" title=\"4.1 BeanFactory\"></a>4.1 BeanFactory</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p></blockquote>\n<h4 id=\"4-2-ApplicationContext接口\"><a href=\"#4-2-ApplicationContext接口\" class=\"headerlink\" title=\"4.2 ApplicationContext接口\"></a>4.2 ApplicationContext接口</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>BeanFactory 的子接口，提供了更多高级特性。</p>\n<p>面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* 使用ApplicationContext工厂的接口，使用该接口可以获取到具体的Bean对象\n\n* ApplicationContext提供的功能\n    * 事件传递\n    * Bean自动装配\n    * 各种不同应用层的Context实现\n    \n* 该接口下有两个具体的实现类\n    * ClassPathXmlApplicationContext            -- 加载类路径下的Spring配置文件\n    * FileSystemXmlApplicationContext           -- 加载本地磁盘下的Spring配置文件</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-application-implement.png\" alt=\"image-20210712185915048\"></p>\n<table>\n<thead>\n<tr>\n<th>类型名</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ClassPathXmlApplicationContext</td>\n<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>\n</tr>\n<tr>\n<td>FileSystemXmlApplicationContext</td>\n<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>\n</tr>\n<tr>\n<td>ConfigurableApplicationContext</td>\n<td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td>\n</tr>\n<tr>\n<td>WebApplicationContext</td>\n<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-3-实现代码\"><a href=\"#4-3-实现代码\" class=\"headerlink\" title=\"4.3 实现代码\"></a>4.3 实现代码</h4><p>添加依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.3.1&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;!-- junit测试 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;4.12&lt;&#x2F;version&gt;\n        &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>创建相关类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Builder(toBuilder &#x3D; true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User &#123;\n    private Integer id;\n    private Integer age;\n    private String name;\n\n    private Teacher teacher;\n\n    private List&lt;String&gt; hobby;\n\n    private Map&lt;String,String&gt; friend;\n\n    private Integer[] arr;\n&#125;</code></pre>\n\n<p>创建配置文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:util&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&#x2F;spring-util.xsd&quot;&gt;\n    \n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>添加组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!--1.ioc创建bean--&gt;\n&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&#x2F;&gt;\n\nbean标签：通过配置bean标签告诉IOC容器需要创建对象的组件是什么\nid属性：bean的唯一标识\nclass属性：组件类的全类名</code></pre>\n\n<p>创建测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n    public void testDemo1()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        User user &#x3D; applicationContext.getBean(&quot;user&quot;, User.class);\n        user.setId(1);\n        user.setAge(21);\n        user.setName(&quot;王茜&quot;);\n        User user1 &#x3D; user.toBuilder().name(&quot;黄任翔&quot;).age(21).id(2).build();\n\n        System.out.println(user);\n        System.out.println(user1);\n    &#125;</code></pre>\n\n<h4 id=\"4-4-注意\"><a href=\"#4-4-注意\" class=\"headerlink\" title=\"4.4 注意\"></a>4.4 注意</h4><p>==Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象==，这一点需要注意。如果在需要无参构造器时，没有无参构造器，则会抛出异常</p>\n<p>所以对一个JavaBean来说，<strong>无参构造器</strong>和<strong>属性的getXxx()、setXxx()方法</strong>是<strong>必须存在</strong>的，特别是在框架中。</p>\n<hr>\n<h3 id=\"05-Bean-概述\"><a href=\"#05-Bean-概述\" class=\"headerlink\" title=\"05. Bean 概述\"></a>05. Bean 概述</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring IoC 容器 Management 一个或多个 <em>bean</em>。这些 bean 是使用您提供给容器的配置元数据创建的，例如，以 XML <code>&lt;bean/&gt;</code>定义的形式。</p>\n<p>在容器本身内，这些 bean 定义表示为<code>BeanDefinition</code>对象，其中包含(除其他信息外)以下元数据：</p>\n<ul>\n<li><em>包限定的类名称：</em>通常是所定义的 Bean 的实际实现类。</li>\n<li>Bean 行为配置元素，用于声明 Bean 在容器中的行为(作用域，生命周期回调等)。</li>\n<li>引用该 bean 完成其工作所需的其他 bean；这些引用也称为* collaborators <em>或</em> dependencies *。</li>\n<li>要在新创建的对象中设置的其他配置设置，例如，在 Management 连接池的 bean 中使用的连接数，或该池的大小限制。</li>\n</ul>\n<p>该元数据转换为构成每个 bean 定义的一组属性。</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-class\">“实例化 bean”</a></td>\n</tr>\n<tr>\n<td>name</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-beanname\">“命名 bean”</a></td>\n</tr>\n<tr>\n<td>scope</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-scopes\">“ Bean 范围”</a></td>\n</tr>\n<tr>\n<td>constructor arguments</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-collaborators\">“依赖注入”</a></td>\n</tr>\n<tr>\n<td>properties</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-collaborators\">“依赖注入”</a></td>\n</tr>\n<tr>\n<td>autowiring mode</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-autowire\">“自动装配合作者”</a></td>\n</tr>\n<tr>\n<td>lazy-initialization mode</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-lazy-init\">“延迟初始化的 bean”</a></td>\n</tr>\n<tr>\n<td>initialization method</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-lifecycle-initializingbean\">称为“初始化回调”的部分</a></td>\n</tr>\n<tr>\n<td>destruction method</td>\n<td><a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-factory-lifecycle-disposablebean\">称为“销毁回调”的部分</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"5-1-命名-Bean\"><a href=\"#5-1-命名-Bean\" class=\"headerlink\" title=\"5.1 命名 Bean\"></a>5.1 命名 Bean</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>每个 bean 具有一个或多个标识符。这些标识符在承载 Bean 的容器内必须唯一。 Bean 通常只有一个标识符，但是如果需要多个标识符，则<strong>多余的标识符可以被视为别名</strong>。</p></blockquote>\n<p>使用<code>id</code>和/或<code>name</code>属性来指定 Bean 标识符。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">id与name 属性在作用上基本没有区别。推荐使用id。\n\nid取值要求严格些，必须满足XML的命名规范。id是唯一的，配置文件中不允许出现两个id相同的&lt;bean&gt;。\n \nname取值比较随意，甚至可以用数字开头。配置文件中允许两个name相同的&lt;bean&gt;，在用getBean()返回实例时，后面一个Bean被返回。\n\n如果没有id，name，则用类的全名作为name，如&lt;bean class&#x3D;&quot;test.Test&quot;&gt;,可以使用getBean(&quot;test.Test&quot;)返回该实例。</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>约定是在命名 bean 时将标准 Java 约定用于实例字段名称。也就是说，bean 名称以小写字母开头，并且此后以驼峰大小写。此类名称的示例将是(不带引号)<code>&#39;accountManager&#39;</code>，<code>&#39;accountService&#39;</code>，<code>&#39;userDao&#39;</code>，<code>&#39;loginController&#39;</code>等。</p>\n<p>但是，在(不寻常的)特殊情况下，如果有多个字符并且第一个和第二个字符均为大写字母，则会保留原始大小写。</p></blockquote>\n<h4 id=\"5-2-别名-Bean\"><a href=\"#5-2-别名-Bean\" class=\"headerlink\" title=\"5.2 别名 Bean\"></a>5.2 别名 Bean</h4><p>在 bean 定义本身中，可以使用<code>id</code>属性指定的最多一个名称和<code>name</code>属性中任意数量的其他名称的组合来为 bean 提供多个名称。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;alias name&#x3D;&quot;fromName&quot; alias&#x3D;&quot;toName&quot;&#x2F;&gt;</code></pre>\n\n<p>在这种情况下，使用该别名定义后，名为<code>fromName</code>的 bean(在同一容器中)也可以称为 toName</p>\n<h4 id=\"5-3-实例化-Bean\"><a href=\"#5-3-实例化-Bean\" class=\"headerlink\" title=\"5.3 实例化 Bean\"></a>5.3 实例化 Bean</h4><p>Bean 定义本质上是创建一个或多个对象的方法。询问时，容器将查看命名 bean 的配方，并使用该 bean 定义封装的配置元数据来创建(或获取)实际对象。</p>\n<p>如果使用基于 XML 的配置元数据，则可以在<code>&lt;bean/&gt;</code>元素的<code>class</code>属性中指定要实例化的对象的类型(或类)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Note</strong></p>\n<p><strong>内部类名.</strong> 如果要为<code>static</code>嵌套类配置 bean 定义，则必须使用嵌套类的* binary *名称。</p>\n<p>例如，如果您在<code>com.example</code>包中有一个名为<code>Foo</code>的类，并且此<code>Foo</code>类具有一个名为<code>Bar</code>的<code>static</code>嵌套类，则 Bean 定义上<code>&#39;class&#39;</code>属性的值将为…</p>\n<p>com.example.Foo$Bar</p>\n<p>请注意，名称中使用了<code>$</code>字符以将嵌套的类名与外部类名分开。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">使用构造方法实例化  根据您用于该特定 bean 的 IoC 的类型，您可能需要一个**默认(空)构造函数**。\n\n使用静态工厂方法实例化\n\n使用动态工厂方法实例化</code></pre>\n\n<h4 id=\"5-4-获取Bena\"><a href=\"#5-4-获取Bena\" class=\"headerlink\" title=\"5.4 获取Bena\"></a>5.4 获取Bena</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>方法1：按照Id获取Bean。id必须正确，否则：NoSuchBeanDefinitionException: No bean named ‘happyComponent1’ available</p>\n<p><strong>id必须唯一</strong>：Configuration problem: Bean name ‘happyComponent’ is already used in this <beans> element</p>\n<p>id可以使用name替代，建议使用id。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;bean name&#x3D;&quot;happyComponent&quot; class&#x3D;&quot;com.atguigu.ioc.impl.HappyComponentImpl&quot;&gt;&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>方法2：<strong>可以通过类名（或者上级接口名）获取</strong>。条件：<strong>该类的实例只能有一个。如果有多个，只能通过id获取</strong>。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!--IoC容器创建对象时遵守的指令 --&gt;  \n&lt;bean name&#x3D;&quot;happyComponent&quot; class&#x3D;&quot;com.atguigu.ioc.impl.HappyComponentImpl&quot;&gt;&lt;&#x2F;bean&gt;    \n&lt;bean name&#x3D;&quot;happyComponent2&quot; class&#x3D;&quot;com.atguigu.ioc.impl.HappyComponentImpl&quot;&gt;&lt;&#x2F;bean&gt;</code></pre>\n\n<hr>\n<h3 id=\"06-依赖注入\"><a href=\"#06-依赖注入\" class=\"headerlink\" title=\"06. 依赖注入\"></a>06. 依赖注入</h3><h4 id=\"6-1-基于构造函数注入\"><a href=\"#6-1-基于构造函数注入\" class=\"headerlink\" title=\"6.1 基于构造函数注入\"></a>6.1 基于构造函数注入</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Builder(toBuilder &#x3D; true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User &#123;\n    private Integer id;\n    private Integer age;\n    private String name;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">配置\n&lt;bean id&#x3D;&quot;constructor&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n\t\t&lt;constructor-arg value&#x3D;&quot;1&quot;&#x2F;&gt;\n        &lt;constructor-arg value&#x3D;&quot;21&quot;&#x2F;&gt;\n        &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;kk&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void testDemo6()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n    \n        User user &#x3D; applicationContext.getBean(&quot;constructor&quot;, User.class);\n    \n        System.out.println(user);\n&#125;</code></pre>\n\n<p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p>\n<ul>\n<li>index属性：指定参数所在位置的索引（从0开始）</li>\n<li>name属性：指定参数名</li>\n</ul>\n<h4 id=\"6-2-基于Setter注入\"><a href=\"#6-2-基于Setter注入\" class=\"headerlink\" title=\"6.2 基于Setter注入\"></a>6.2 基于Setter注入</h4><p>通过property标签配置的属性值会通过setXxx()方法注入</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Builder(toBuilder &#x3D; true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User &#123;\n    private Integer id;\n    private Integer age;\n    private String name;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--2.ioc setter注入--&gt;\n&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;铁锤妹妹&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;22&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;id&quot; value&#x3D;&quot;3&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;\n&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;\n&lt;!-- value属性：指定属性值 --&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Constructor-based or setter-based DI?</p>\n<p>由于您可以混合使用基于构造函数的 DI 和基于 setter 的 DI，因此，将构造函数用于<em>强制依赖项</em>和将 setter 方法或配置方法用于<em>可选依赖项</em>是一个很好的经验法则。请注意，在 setter 方法上使用<a href=\"https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#beans-required-annotation\">@Required</a>注解可用于使属性成为必需的依赖项。</p></blockquote>\n<hr>\n<h3 id=\"07-详细的依赖和配置\"><a href=\"#07-详细的依赖和配置\" class=\"headerlink\" title=\"07. 详细的依赖和配置\"></a>07. 详细的依赖和配置</h3><h4 id=\"7-1-引入外部声明的Bean\"><a href=\"#7-1-引入外部声明的Bean\" class=\"headerlink\" title=\"7.1 引入外部声明的Bean\"></a>7.1 引入外部声明的Bean</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">引入新组件 Teacher\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Teacher &#123;\n    private String name;\n    private Integer age;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n    &lt;property name&#x3D;&quot;teacher&quot; ref&#x3D;&quot;teacher&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;bean id&#x3D;&quot;teacher&quot; class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;刘德华&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;56&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p>易错点</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.ioc.component.HappyMachine’ for property ‘happyMachine’: no matching editors or conversion strategy found 意思是不能把String类型转换成我们要的HappyMachine类型 说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote>\n<h4 id=\"7-2-内部bean\"><a href=\"#7-2-内部bean\" class=\"headerlink\" title=\"7.2 内部bean\"></a>7.2 内部bean</h4><p>在bean里面配置的bean就是内部bean，内部bean只能在当前bean内部使用，<strong>在其他地方不能使用</strong>。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;user3&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;hh&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;id&quot; value&#x3D;&quot;4&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;teacher&quot;&gt;\n        &lt;bean class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;刘德华&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;56&quot;&#x2F;&gt;\n        &lt;&#x2F;bean&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"7-3-引入外部属性文件\"><a href=\"#7-3-引入外部属性文件\" class=\"headerlink\" title=\"7.3 引入外部属性文件\"></a>7.3 引入外部属性文件</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- MySQL驱动 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.1.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- 数据源 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0.31&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 引入外部属性文件 --&gt;\n&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;\n\n&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;\n    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driverClassName&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p><strong>jdbc属性文件中</strong>，driverClassName、url、username等前面都<strong>要有前缀</strong>，比如jdbc.  否则运行都会报错</p>\n<h4 id=\"7-4-级联属性赋值\"><a href=\"#7-4-级联属性赋值\" class=\"headerlink\" title=\"7.4 级联属性赋值\"></a>7.4 级联属性赋值</h4><p>关联对象：teacher</p>\n<p>级联属性：teacher.name</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;user4&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n    &lt;property name&#x3D;&quot;teacher&quot; ref&#x3D;&quot;teacher1&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;teacher.name&quot; value&#x3D;&quot;gg&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n&lt;bean id&#x3D;&quot;teacher1&quot; class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&#x2F;&gt;</code></pre>\n\n<h4 id=\"7-5-特殊值处理\"><a href=\"#7-5-特殊值处理\" class=\"headerlink\" title=\"7.5 特殊值处理\"></a>7.5 特殊值处理</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>字面量</p>\n<p>字面量是相对于变量来说的。看下面的代码：int a = 10;</p>\n<p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a的时候，我们实际上拿到的值是10。</p>\n<p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote>\n<p>[1]字面量举例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;\n&lt;property name&#x3D;&quot;commonValue&quot; value&#x3D;&quot;hello&quot;&#x2F;&gt;</code></pre>\n\n<p>[2]类似变量举例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 使用ref属性给bean的属性复制是，Spring会把ref属性的值作为一个bean的id来处理 --&gt;\n&lt;!-- 此时ref属性的值就不是一个普通的字符串了，它应该是一个bean的id --&gt;\n&lt;property name&#x3D;&quot;happyMachine&quot; ref&#x3D;&quot;happyMachine&quot;&#x2F;&gt;</code></pre>\n\n<p><strong>空字符串值和空字符串</strong></p>\n<p>Spring 将属性等的空参数视为空<code>Strings</code>。以下基于 XML 的配置元数据片段将 email 属性设置为空的<code>String</code>值(“”)。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;bean class&#x3D;&quot;ExampleBean&quot;&gt;\n    &lt;property name&#x3D;&quot;email&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n前面的示例等效于以下 Java 代码：\nexampleBean.setEmail(&quot;&quot;);</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;null&#x2F;&gt;元素处理null个值。例如：\n&lt;bean class&#x3D;&quot;ExampleBean&quot;&gt;\n    &lt;property name&#x3D;&quot;email&quot;&gt;\n        &lt;null&#x2F;&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;\n\n上面的配置等效于以下 Java 代码：\nexampleBean.setEmail(null);</code></pre>\n\n<p><strong>小于号</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 实验九 给bean的属性赋值：特殊值处理 --&gt;\n&lt;bean id&#x3D;&quot;propValue&quot; class&#x3D;&quot;com.atguigu.ioc.component.PropValue&quot;&gt;\n    &lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;\n    &lt;!-- 解决方案一：使用XML实体来代替 --&gt;\n    &lt;property name&#x3D;&quot;expression&quot; value&#x3D;&quot;a &lt; b&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n\n上述等同于下\n&lt;!-- 实验九 给bean的属性赋值：特殊值处理 --&gt;\n&lt;bean id&#x3D;&quot;propValue&quot; class&#x3D;&quot;com.atguigu.ioc.component.PropValue&quot;&gt;\n    &lt;property name&#x3D;&quot;expression&quot;&gt;\n        &lt;!-- 解决方案二：使用CDATA节 --&gt;\n        &lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;\n        &lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;\n        &lt;!-- 所以CDATA节中写什么符号都随意 --&gt;\n        &lt;value&gt;&lt;![CDATA[a &lt; b]]&gt;&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"7-6-p-命名空间\"><a href=\"#7-6-p-命名空间\" class=\"headerlink\" title=\"7.6 p-命名空间\"></a>7.6 p-命名空间</h4><p>p 名称空间使您可以使用<code>bean</code>元素的属性而不是嵌套的<code>&lt;property/&gt;</code>元素来描述属性值，</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean name&#x3D;&quot;classic&quot; class&#x3D;&quot;com.example.ExampleBean&quot;&gt;\n    &lt;property name&#x3D;&quot;email&quot; value&#x3D;&quot;[emailprotected]&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;bean name&#x3D;&quot;p-namespace&quot; class&#x3D;&quot;com.example.ExampleBean&quot;\n    p:email&#x3D;&quot;[emailprotected]&quot;&#x2F;&gt;</code></pre>\n\n<p>第二个 bean 定义使用<code>p:spouse-ref=&quot;jane&quot;</code>作为属性来执行完全相同的操作。在这种情况下，<code>spouse</code>是属性名称，而<code>-ref</code>部分表示这不是一个直接值，而是对另一个 bean 的引用。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean name&#x3D;&quot;john-classic&quot; class&#x3D;&quot;com.example.Person&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;John Doe&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;spouse&quot; ref&#x3D;&quot;jane&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;bean name&#x3D;&quot;john-modern&quot;\n      class&#x3D;&quot;com.example.Person&quot;\n      p:name&#x3D;&quot;John Doe&quot;\n      p:spouse-ref&#x3D;&quot;jane&quot;&#x2F;&gt;\n\n&lt;bean name&#x3D;&quot;jane&quot; class&#x3D;&quot;com.example.Person&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Jane Doe&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>p 命名空间不如标准 XML 格式灵活。例如，用于声明属性引用的格式与以<code>Ref</code>结尾的属性发生冲突，而标准 XML 格式则没有。</p></blockquote>\n<h4 id=\"7-7-集合属性\"><a href=\"#7-7-集合属性\" class=\"headerlink\" title=\"7.7 集合属性\"></a>7.7 集合属性</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Data\n@Builder(toBuilder &#x3D; true)\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User &#123;\n    private Integer id;\n    private Integer age;\n    private String name;\n\n    private Teacher teacher;\n\n    private List&lt;String&gt; hobby;\n    \n    private Map&lt;String,String&gt; friend;\n\n    private Integer[] arr;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;bean id&#x3D;&quot;user6&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jj&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;hobby&quot;&gt;\n            &lt;list&gt;\n                &lt;value&gt;123&lt;&#x2F;value&gt;\n                &lt;value&gt;456&lt;&#x2F;value&gt;\n                &lt;value&gt;789&lt;&#x2F;value&gt;\n            &lt;&#x2F;list&gt;\n        &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p>其他变换形式</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 使用set标签也能实现相同效果，只是附带了去重功能 --&gt;\n&lt;bean id&#x3D;&quot;user6&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jj&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;hobby&quot;&gt;\n            &lt;set&gt;\n                &lt;value&gt;456&lt;&#x2F;value&gt;\n                &lt;value&gt;456&lt;&#x2F;value&gt;\n                &lt;value&gt;123&lt;&#x2F;value&gt;\n                &lt;value&gt;789&lt;&#x2F;value&gt;\n            &lt;&#x2F;set&gt;\n        &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;!-- array也同样兼容 --&gt;\n&lt;bean id&#x3D;&quot;user6&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jj&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;arr&quot;&gt;\n            &lt;array&gt;\n                &lt;value&gt;456&lt;&#x2F;value&gt;\n                &lt;value&gt;456&lt;&#x2F;value&gt;\n                &lt;value&gt;123&lt;&#x2F;value&gt;\n                &lt;value&gt;789&lt;&#x2F;value&gt;\n            &lt;&#x2F;array&gt;\n        &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;!-- 给Map类型的属性赋值 --&gt;\n&lt;bean id&#x3D;&quot;user6&quot; class&#x3D;&quot;com.hrenxiang.pojo.User&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jj&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;friend&quot;&gt;\n            &lt;map&gt;\n                &lt;entry key&#x3D;&quot;3&quot; value&#x3D;&quot;gg&quot;&#x2F;&gt;\n                &lt;entry key&#x3D;&quot;1&quot; value&#x3D;&quot;ll&quot;&#x2F;&gt;\n                &lt;entry key&#x3D;&quot;2&quot; value&#x3D;&quot;pp&quot;&#x2F;&gt;\n            &lt;&#x2F;map&gt;\n        &lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"7-8-集合类型的Bean\"><a href=\"#7-8-集合类型的Bean\" class=\"headerlink\" title=\"7.8 集合类型的Bean\"></a>7.8 集合类型的Bean</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">util:list id&#x3D;&quot;teacher3&quot;&gt;\n        &lt;bean class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&gt;\n            &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;qq&quot;&#x2F;&gt;\n            &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;56&quot;&#x2F;&gt;\n        &lt;&#x2F;bean&gt;\n        &lt;bean class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&gt;\n            &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ww&quot;&#x2F;&gt;\n            &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;56&quot;&#x2F;&gt;\n        &lt;&#x2F;bean&gt;\n        &lt;bean class&#x3D;&quot;com.hrenxiang.pojo.Teacher&quot;&gt;\n            &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ee&quot;&#x2F;&gt;\n            &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;56&quot;&#x2F;&gt;\n        &lt;&#x2F;bean&gt;\n&lt;&#x2F;util:list&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">测试方法\n@Test\npublic void testDemo11()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        \n        List&lt;Teacher&gt; teacherList &#x3D; (List&lt;Teacher&gt;) applicationContext.getBean(&quot;teacher3&quot;);\n        \n        System.out.println(teacherList);\n    &#125;</code></pre>\n\n\n\n<hr>\n<h3 id=\"08-自动装配模式★★★\"><a href=\"#08-自动装配模式★★★\" class=\"headerlink\" title=\"08. 自动装配模式★★★\"></a>08. 自动装配模式★★★</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>顶级<code>&lt;beans/&gt;</code>元素在其<code>default-autowire-candidates</code>属性内接受一个或多个模式</p>\n<p>通过将 Bean 标签中的 <code>autowire</code> 属性定义为以下4中模式中的一个，来确定装配类型</p>\n<p>通过将 Bean 定义的<code>autowire-candidate</code>属性设置为<code>false</code>来避免自动装配。</p>\n<p><code>autowire-candidate</code>属性旨在仅影响基于类型的自动装配。它不会影响名称的显式引用，即使指定的 bean 未标记为自动装配候选，名称也将得到解析。因此，如果名称匹配，按名称自动装配仍将注入 Bean。</p>\n<p>只用注解的方式时，<strong>注解默认是使用byType的</strong>！</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no</td>\n<td>(默认)无自动装配。 Bean 引用必须通过<code>ref</code>元素定义。对于大型部署，建议不要更改默认设置，因为明确指定协作者可以提供更好的控制和清晰度。在某种程度上，它记录了系统的结构。</td>\n</tr>\n<tr>\n<td>byName</td>\n<td>按属性名称自动布线。 Spring 寻找与需要自动装配的属性同名的 bean。例如，如果将一个 bean 定义设置为按名称自动装配，并且包含一个* master <em>属性(即，它具有一个</em> setMaster(..)*方法)，那么 Spring 将查找一个名为<code>master</code>的 bean 定义，并使用它来设置属性。</td>\n</tr>\n<tr>\n<td>byType</td>\n<td>如果容器中恰好存在一个该属性类型的 bean，则允许自动装配该属性。如果存在多个错误，则会引发致命异常，这表明您可能不对该 bean 使用* byType *自动装配。如果没有匹配的 bean，则什么也没有发生。该属性未设置。</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>与* byType *类似，但适用于构造函数参数。如果容器中不存在构造函数参数类型的一个 bean，则将引发致命错误。</td>\n</tr>\n</tbody></table>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface MyWork &#123;\n    public void doWork();\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyWorkImpl implements MyWork &#123;\n    @Override\n    public void doWork() &#123;\n        System.out.println(&quot;zuo jia wu ！！！&quot;);\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyWorkService &#123;\n    private MyWorkImpl myWorkImpl;\n\n    public MyWorkImpl returnMy() &#123;\n        return myWorkImpl;\n    &#125;\n\n    public void setMyWork(MyWorkImpl myWorkImpl) &#123;\n        this.myWorkImpl &#x3D; myWorkImpl;\n    &#125;\n\n    public MyWorkImpl getMyWork() &#123;\n        return myWorkImpl;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;myWorkImpl&quot; class&#x3D;&quot;com.hrenxiang.ioc.impl.MyWorkImpl&quot;&#x2F;&gt;\n\n\n&lt;!-- 使用bean标签的autowire属性设置自动装配效果 --&gt;\n&lt;!-- byType表示根据类型进行装配，此时如果类型匹配的bean不止一个，那么会抛NoUniqueBeanDefinitionException --&gt;\n&lt;!-- byName表示根据bean的id进行匹配。而bean的id是根据需要装配组件的属性的属性名来确定的 --&gt;\n&lt;bean id&#x3D;&quot;myWorkService&quot; class&#x3D;&quot;com.hrenxiang.service.MyWorkService&quot; autowire&#x3D;&quot;byName&quot;&gt;\n    &lt;!--&lt;property name&#x3D;&quot;myWorkImpl&quot; ref&#x3D;&quot;myWorkImpl&quot;&#x2F;&gt;--&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n    public void test2()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        MyWorkService myWorkService &#x3D; applicationContext.getBean(&quot;myWorkService&quot;, MyWorkService.class);\n        myWorkService.getMyWork().doWork();\n    &#125;</code></pre>\n\n<h4 id=\"8-1-FactoryBean机制\"><a href=\"#8-1-FactoryBean机制\" class=\"headerlink\" title=\"8.1 FactoryBean机制\"></a>8.1 FactoryBean机制</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p>\n<p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Work &#123;\n    private String workName;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class WorkFactoryBean implements FactoryBean&lt;Work&gt; &#123;\n\n    private String workName;\n\n    public String getWorkName() &#123;\n        return workName;\n    &#125;\n\n    public void setWorkName(String workName) &#123;\n        this.workName &#x3D; workName;\n    &#125;\n\n    @Override\n    public Work getObject() throws Exception &#123;\n        Work work &#x3D; new Work();\n        work.setWorkName(&quot;JavaProgrammer&quot;);\n        return work;\n    &#125;\n\n    @Override\n    public Class&lt;?&gt; getObjectType() &#123;\n        return Work.class;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;workFactoryBean&quot; class&#x3D;&quot;com.hrenxiang.ioc.WorkFactoryBean&quot;&gt;\n        &lt;property name&#x3D;&quot;workName&quot; value&#x3D;&quot;teacher&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n    public void test3()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n        &#x2F;*Bean named &#39;workFactoryBean&#39; is expected to be of type &#39;com.hrenxiang.ioc.WorkFactoryBean&#39; but was actually of type &#39;com.hrenxiang.ioc.Work&#39;*&#x2F;\n        &#x2F;*WorkFactoryBean workFactoryBean &#x3D; applicationContext.getBean(&quot;workFactoryBean&quot;, WorkFactoryBean.class);\n        System.out.println(workFactoryBean);*&#x2F;\n        \n        Work work &#x3D; applicationContext.getBean(&quot;workFactoryBean&quot;, Work.class);\n        System.out.println(work);\n    &#125;</code></pre>\n\n<h4 id=\"8-2-使用注解-Autowired\"><a href=\"#8-2-使用注解-Autowired\" class=\"headerlink\" title=\"8.2 使用注解 @Autowired\"></a>8.2 使用注解 @Autowired</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用注解 @Autowired 其实还是手动装配，因为使用这个注解后，我们在代码中查询自动装配类型时，返回的是0,而0在自动装配类型中代表的是 no ，所以说，此注解，并不是通过自动装配模式装配的，它使用的是一种变种的setter注入的方式</p></blockquote>\n<hr>\n<h3 id=\"09-lazy-Init-延迟加载\"><a href=\"#09-lazy-Init-延迟加载\" class=\"headerlink\" title=\"09. lazy-Init 延迟加载\"></a>09. lazy-Init 延迟加载</h3><ul>\n<li>关闭延迟加载(默认状态) ：ApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化</li>\n<li>开启延迟加载：bean 将不会在 ApplicationContext 启动时提前被实例化，⽽是<strong>第⼀次向容器通过 getBean 索取 bean 时实例化</strong>的。<ol>\n<li>在 <bean> 设置 lazy-init=”true”，控制单个 bean</li>\n<li>在 <beans> 设置 default-lazy-init=”true” ，控制该容器下所有 bean</li>\n</ol>\n</li>\n</ul>\n<p><em>作用：</em></p>\n<ol>\n<li>开启延迟加载⼀定程度提⾼容器启动和运转性能</li>\n<li>对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源</li>\n</ol>\n<hr>\n<h3 id=\"10-Bean的作用域\"><a href=\"#10-Bean的作用域\" class=\"headerlink\" title=\"10. Bean的作用域\"></a>10. Bean的作用域</h3><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n<th>创建对象的时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton</td>\n<td>在IOC容器中，这个bean的对象始终为单实例</td>\n<td>IOC容器初始化时</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>这个bean在IOC容器中有多个实例</td>\n<td>获取bean时</td>\n</tr>\n</tbody></table>\n<p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>request</td>\n<td>在一个请求范围内有效</td>\n</tr>\n<tr>\n<td>session</td>\n<td>在一个会话范围内有效</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;\n&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;\n&lt;bean id&#x3D;&quot;workFactoryBean2&quot; class&#x3D;&quot;com.hrenxiang.ioc.WorkFactoryBean&quot; scope&#x3D;&quot;singleton&quot;&gt;\n        &lt;property name&#x3D;&quot;workName&quot; value&#x3D;&quot;teacher&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test4()&#123;\n        ClassPathXmlApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n        &#x2F;*scope&#x3D;&quot;prototype&quot;  false  true*&#x2F;\n        &#x2F;*scope&#x3D;&quot;singleton&quot;  true   true*&#x2F;\n        Work work1 &#x3D; applicationContext.getBean(&quot;workFactoryBean2&quot;, Work.class);\n        Work work2 &#x3D; applicationContext.getBean(&quot;workFactoryBean2&quot;, Work.class);\n        System.out.println(work1&#x3D;&#x3D;work2);\n    \t&#x2F;*记得重写equals方法，否则默认调用object的，比较的还是地址值*&#x2F;\n        System.out.println(work1.equals(work2));\n    &#125;</code></pre>\n\n<h4 id=\"单例bean的优势\"><a href=\"#单例bean的优势\" class=\"headerlink\" title=\"单例bean的优势\"></a>单例bean的优势</h4><p>由于不会每次都新创建新对象所以有一下几个性能上的优势：</p>\n<p>1.减少了新生成实例的消耗</p>\n<p>新生成实例消耗包括两方面，第一，spring会通过反射或者cglib来生成bean实例这都是耗性能的操作，其次给对象分配内存也会涉及复杂算法。</p>\n<p>2.减少jvm垃圾回收</p>\n<p>由于不会给每个请求都新生成bean实例，所以自然回收的对象少了。</p>\n<p>3.可以快速获取到bean</p>\n<p>因为单例的获取bean操作除了第一次生成之外其余的都是从缓存里获取的所以很快。</p>\n<h4 id=\"单例bean的劣势\"><a href=\"#单例bean的劣势\" class=\"headerlink\" title=\"单例bean的劣势\"></a>单例bean的劣势</h4><p>单例的bean一个很大的劣势就是他不能做到线程安全！！！，由于所有请求都共享一个bean实例，所以这个bean要是有状态的一个bean的话可能在并发场景下出现问题，而原型的bean则不会有这样问题（但也有例外，比如他被单例bean依赖），因为给每个请求都新创建实例。</p>\n<hr>\n<h3 id=\"11-Bean的生命周期\"><a href=\"#11-Bean的生命周期\" class=\"headerlink\" title=\"11. Bean的生命周期\"></a>11. Bean的生命周期</h3><p>bean 为 singleton（单例模式）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>单例模式的 bean 对象生命周期与容器相同</p></blockquote>\n<p>bean 为 prototype（多例模式）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多例模式的 bean 对象，Spring 框架只负责创建，不负责销毁</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在传统Java应用中，bean生命周期很简单，使用Java关键字 new 进行Bean 的实例化，然后该Bean 就能够使用了。一旦bean不再被使用，则由Java自动进行垃圾回收。</p>\n<p>相比之下，Spring管理Bean的生命周期就复杂多了，正确理解Bean 的生命周期非常重要，因为Spring对Bean的管理可扩展性非常强，下面展示了一个Bean的构造过程。</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-lifecycle.png\" alt=\"iamges\"></p>\n<p>其中红框标记四个阶段的是基本阶段。</p>\n<p>蓝色标记的是针对所有Bean的扩展阶段，需定义BeanPostProcessor实现类并配置。</p>\n<p>未进行标记的是只针对当前Bean的阶段，需要当前Bean实现相应的接口。</p>\n<p>从上图可以看出，Bean生命周期的主要阶段包括：</p>\n<ul>\n<li>bean对象创建（调用无参构造器）</li>\n<li>给bean对象设置属性</li>\n<li>bean对象初始化之前操作（由bean的后置处理器负责）</li>\n<li>bean对象初始化（需在配置bean时指定初始化方法）</li>\n<li>bean对象初始化之后操作（由bean的后置处理器负责）</li>\n<li>bean对象就绪可以使用</li>\n<li>bean对象销毁（需在配置bean时指定销毁方法）</li>\n<li>IOC容器关闭</li>\n</ul>\n<hr>\n<h3 id=\"12-基于注解管理Bean\"><a href=\"#12-基于注解管理Bean\" class=\"headerlink\" title=\"12. 基于注解管理Bean\"></a>12. 基于注解管理Bean</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>情况一 在配置文件中开启注解 扫描（最基础，常用）</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;context:component-scan base-package&#x3D;&quot;com.hrenxiang&quot;&#x2F;&gt;  &lt;!--烧苗hrenxiang包下的所有文件--&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>指定要排除的组件或者也可以说指定不扫描的组件</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 情况三：指定不扫描的组件 --&gt;\n&lt;context:component-scan base-package&#x3D;&quot;com.atguigu.ioc.component&quot;&gt;\n    &lt;!-- context:exclude-filter标签：指定排除规则 --&gt;\n    &lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;\n    &lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;\n\t&lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;\n&lt;&#x2F;context:component-scan&gt;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>仅扫描指定组件</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 情况四：仅扫描指定的组件 --&gt;\n&lt;!-- 仅扫描 &#x3D; 关闭默认规则 + 追加规则 --&gt;\n&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;\n&lt;context:component-scan base-package&#x3D;&quot;com.atguigu.ioc.component&quot; use-default-filters&#x3D;&quot;false&quot;&gt;\n\t&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;\n\t&lt;context:include-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&#x2F;&gt;\n&lt;&#x2F;context:component-scan&gt;</code></pre>\n<h4 id=\"12-1-Component\"><a href=\"#12-1-Component\" class=\"headerlink\" title=\"12.1 @Component\"></a>12.1 @Component</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>下面是@Component 的三衍生注解 (功能目前来讲是一致的) (作用在类上)</p>\n<p>把普通pojo实例化到spring容器中，相当于配置文件中的 <bean id=\"\" class=\"\"/></p>\n<p>①默认情况<br>类名首字母小写就是bean的id。例如：SoldierController类对应的bean的id就是soldierController。</p>\n<p>②使用value属性指定 —– 当注解中只设置一个属性时，value属性的属性名可以省略</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Controller(value &#x3D; &quot;tianDog&quot;)\npublic class SoldierController &#123;\n&#125;\n\n@Service(&quot;smallDog&quot;)\npublic class SoldierService &#123;\n&#125;</code></pre></blockquote>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Controller</td>\n<td>标明WEB 层</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>标明业务层</td>\n</tr>\n<tr>\n<td>@Repository</td>\n<td>标明持久层</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository(value &#x3D; &quot;happyComponentDao&quot;)\npublic class HappyComponentDaoImpl implements HappyComponentDao &#123;\n    @Override\n    public void doWork() &#123;\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;HappyComponentDaoImpl&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    &#125;\n&#125;\n\n@Service(value &#x3D; &quot;happyComponentService1&quot;)\npublic class HappyComponentServiceImpl implements HappyComponentService &#123;\n    \n    @Autowired\n    private HappyComponentDao happyComponentDao;\n\n    @Override\n    public void doWork() &#123;\n        this.happyComponentDao.doWork();\n    &#125;\n&#125;\n\n@Service(value &#x3D; &quot;happyComponentService2&quot;)\npublic class HappyComponentServiceImpl2 implements HappyComponentService &#123;\n    @Autowired\n    private HappyComponentDao happyComponentDao;\n\n    @Override\n    public void doWork() &#123;\n        this.happyComponentDao.doWork();\n    &#125;\n&#125;\n\n@Controller(value &#x3D; &quot;controller&quot;)\npublic class HappyComponentController &#123;\n\n    @Autowired\n    &#x2F;*@Qualifier(value &#x3D; &quot;happyComponentService1&quot;)*&#x2F;\n    @Resource(name &#x3D; &quot;happyComponentService1&quot;)\n    private HappyComponentService happyComponentService;\n\n    public void doWork()&#123;\n        this.happyComponentService.doWork();\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"12-2-Qualifier-Resource\"><a href=\"#12-2-Qualifier-Resource\" class=\"headerlink\" title=\"12.2 @Qualifier @Resource\"></a>12.2 @Qualifier @Resource</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>按名称注入</p></blockquote>\n<p>@Qualifier：当一个接口有多个实现的时候，为了指名具体调用哪个类的实现。</p>\n<p>@Resource: 可以通过 byName 和 byType的方式注入， 默认先按 byName的方式 (通过id) 进行匹配，如果匹配不到，再按 byType的方式进行匹配。 </p>\n<h4 id=\"12-3-Value\"><a href=\"#12-3-Value\" class=\"headerlink\" title=\"12.3 @Value\"></a>12.3 @Value</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>用于注入普通类型</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class UserDao &#123;\n\n    @Value(&quot;hh&quot;)\n    private String name;\n\n    public void test()&#123;\n        System.out.println(name);\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"12-4-Autowired\"><a href=\"#12-4-Autowired\" class=\"headerlink\" title=\"12.4 @Autowired\"></a>12.4 @Autowired</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>自动装配：<strong>默认按类型进行装配.</strong></p>\n<p>在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-IOC-Autowired.png\" alt=\"images\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">首先根据所需要的组件类型到IOC容器中查找\n\n\t能够找到唯一的bean：直接执行装配\n\n\t如果完全找不到匹配这个类型的bean：装配失败\n\n\t和所需类型匹配的bean不止一个\n\n\t\t没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配\n\n            能够找到：执行装配\n            找不到：装配失败\n            \n        使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配\n\n            能够找到：执行装配\n            找不到：装配失败</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>佛系装配</p>\n<p>给@Autowired注解设置required = false属性表示：能装就装，装不上就不装。但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p></blockquote>\n<hr>\n<h3 id=\"13-整合Juint4\"><a href=\"#13-整合Juint4\" class=\"headerlink\" title=\"13. 整合Juint4\"></a>13. 整合Juint4</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>导入依赖</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- Spring的测试包 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>编写测试代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ContextConfiguration(value &#x3D; &#123;&quot;classpath:applicationContext.xml&quot;&#125;)\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class TestCalculator &#123;\n\n    @Autowired\n    private Calculator calculator;\n\n    @Test\n    public void testDemo()&#123;\n        calculator.add(10,20);\n\n        System.out.println(&quot;\\n&quot;);\n\n        &#x2F;*calculator.div(10,0);*&#x2F;\n        calculator.sub(100,500);\n\n        System.out.println(&quot;\\n&quot;);\n\n        calculator.abc();\n    &#125;</code></pre>","text":"01. Spring框架简介 Spring 框架是一个 Java 平台，为开发 Java 应用程序提供全面的基础架构支持。 Spring 处理基础结构，因此您可以专注于应用程序。 Spring 使您能够从“普通的 Java 对象”(POJO)构建应用程序，并将企业服务非侵入性地应...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#01-Spring%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">01. Spring框架简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.1 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%80%E7%AB%99%E5%BC%8F-%E8%BD%BB%E9%87%8F\"><span class=\"toc-text\">1.2 一站式 轻量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#02-SpringFramework\"><span class=\"toc-text\">02. SpringFramework</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BA%94%E5%A4%A7%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.1 五大功能模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-SpringFramework%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">2.2 SpringFramework优点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#03-IOC-%E7%9A%84%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">03. IOC 的简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.1 容器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-IOC-DI\"><span class=\"toc-text\">3.2 IOC DI</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-IOC-%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">3.3 IOC 内容</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#04-IOC-%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">04. IOC 的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-BeanFactory\"><span class=\"toc-text\">4.1 BeanFactory</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-ApplicationContext%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">4.2 ApplicationContext接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">4.3 实现代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">4.4 注意</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#05-Bean-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">05. Bean 概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E5%91%BD%E5%90%8D-Bean\"><span class=\"toc-text\">5.1 命名 Bean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E5%88%AB%E5%90%8D-Bean\"><span class=\"toc-text\">5.2 别名 Bean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E5%AE%9E%E4%BE%8B%E5%8C%96-Bean\"><span class=\"toc-text\">5.3 实例化 Bean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E8%8E%B7%E5%8F%96Bena\"><span class=\"toc-text\">5.4 获取Bena</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#06-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">06. 依赖注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E5%9F%BA%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">6.1 基于构造函数注入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%9F%BA%E4%BA%8ESetter%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">6.2 基于Setter注入</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#07-%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BE%9D%E8%B5%96%E5%92%8C%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">07. 详细的依赖和配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E5%A3%B0%E6%98%8E%E7%9A%84Bean\"><span class=\"toc-text\">7.1 引入外部声明的Bean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E5%86%85%E9%83%A8bean\"><span class=\"toc-text\">7.2 内部bean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">7.3 引入外部属性文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-%E7%BA%A7%E8%81%94%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">7.4 级联属性赋值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-%E7%89%B9%E6%AE%8A%E5%80%BC%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7.5 特殊值处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-6-p-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">7.6 p-命名空间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-7-%E9%9B%86%E5%90%88%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">7.7 集合属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-8-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84Bean\"><span class=\"toc-text\">7.8 集合类型的Bean</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#08-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%BC%8F%E2%98%85%E2%98%85%E2%98%85\"><span class=\"toc-text\">08. 自动装配模式★★★</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-FactoryBean%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">8.1 FactoryBean机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3-Autowired\"><span class=\"toc-text\">8.2 使用注解 @Autowired</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#09-lazy-Init-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">09. lazy-Init 延迟加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">10. Bean的作用域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8Bbean%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">单例bean的优势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8Bbean%E7%9A%84%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">单例bean的劣势</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">11. Bean的生命周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%AE%A1%E7%90%86Bean\"><span class=\"toc-text\">12. 基于注解管理Bean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-1-Component\"><span class=\"toc-text\">12.1 @Component</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-2-Qualifier-Resource\"><span class=\"toc-text\">12.2 @Qualifier @Resource</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-3-Value\"><span class=\"toc-text\">12.3 @Value</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#12-4-Autowired\"><span class=\"toc-text\">12.4 @Autowired</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E6%95%B4%E5%90%88Juint4\"><span class=\"toc-text\">13. 整合Juint4</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Spring 面向切面编程","uid":"e2df2a86487823e0935863049b9742d3","slug":"50-Spring-面向切面编程","date":"2021-09-13T15:27:32.000Z","updated":"2021-09-15T10:50:56.442Z","comments":true,"path":"api/articles/50-Spring-面向切面编程.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","text":"1. AOP是什么 AOP是Aspect Oriented Programming的缩写，意思是：面向切面编程，它是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 可以认为AOP是对OOP(Object Oriented Programming 面向对象编程)的...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Mybatis 逆向工程","uid":"cd7729b360a46c66a0dd34df45ad5b41","slug":"48-Mybatis-逆向工程","date":"2021-09-13T15:25:32.000Z","updated":"2021-09-15T10:51:17.974Z","comments":true,"path":"api/articles/48-Mybatis-逆向工程.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog9.jpg","text":"8. 补充（逆向工程）8.1 概念概念 正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。 逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源： Java实体类 Mapper接口 Mapper配置文件 8.2 基...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}