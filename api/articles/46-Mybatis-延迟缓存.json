{"title":"Mybatis 延迟缓存","uid":"381bed42b31a39fe0a5eda0244c8a085","slug":"46-Mybatis-延迟缓存","date":"2021-09-13T15:23:32.000Z","updated":"2021-09-15T10:51:42.422Z","comments":true,"path":"api/articles/46-Mybatis-延迟缓存.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"1-延迟加载\"><a href=\"#1-延迟加载\" class=\"headerlink\" title=\"1. 延迟加载\"></a>1. 延迟加载</h3><p><strong>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。也叫懒加载。</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">resultMap可以实现高级映射（使用&#96;association&#96;、&#96;collection&#96;实现一对一及一对多映射），&#96;association&#96;、&#96;collection&#96;具备延迟加载功能。</code></pre>\n\n<h3 id=\"2-延迟加载配置\"><a href=\"#2-延迟加载配置\" class=\"headerlink\" title=\"2. 延迟加载配置\"></a>2. 延迟加载配置</h3><h4 id=\"2-1-较低版本\"><a href=\"#2-1-较低版本\" class=\"headerlink\" title=\"2.1 较低版本\"></a>2.1 较低版本</h4><p>在Mybatis全局配置文件中配置settings</p>\n<pre><code>&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;\n&lt;settings&gt;\n    &lt;!-- 开启延迟加载功能：需要配置两个配置项 --&gt;\n    &lt;!-- 1、将lazyLoadingEnabled设置为true，开启懒加载功能 --&gt;\n    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;\n    &lt;!-- 2、将aggressiveLazyLoading设置为false，关闭“积极的懒加载” --&gt;\n    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;\n&lt;/settings&gt;\n</code></pre>\n<h4 id=\"2-2-较高版本\"><a href=\"#2-2-较高版本\" class=\"headerlink\" title=\"2.2 较高版本\"></a>2.2 较高版本</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- Mybatis全局配置 --&gt;\n&lt;settings&gt;\n    &lt;!-- 开启延迟加载功能 --&gt;\n    &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;&#x2F;settings&gt;</code></pre>\n\n<h3 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3. 实例\"></a>3. 实例</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">CustomerMapper.xml\n\n&lt;resultMap id&#x3D;&quot;customerMap2&quot; type&#x3D;&quot;customer&quot;&gt;\n   &lt;id column&#x3D;&quot;customer_id&quot; property&#x3D;&quot;customerId&quot;&#x2F;&gt;\n   &lt;result column&#x3D;&quot;customer_name&quot; property&#x3D;&quot;customerName&quot;&#x2F;&gt;\n   &lt;collection property&#x3D;&quot;orderList&quot; select&#x3D;&quot;com.hrenxiang.mapper.OrderMapper.selectOrderByCustomerId&quot;\n               column&#x3D;&quot;customer_id&quot;&gt;\n   &lt;&#x2F;collection&gt;\n&lt;&#x2F;resultMap&gt;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">OrderMapper.xml\n\n&lt;select id&#x3D;&quot;selectOrderByCustomerId&quot; resultType&#x3D;&quot;order&quot;&gt;\n        select order_id, order_name\n        from t_order\n        where customer_id2 &#x3D; #&#123;cusomerId&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">junit\n\n\tCustomerMapper mapper &#x3D; sqlSession.getMapper(CustomerMapper.class);\n    Customer customer &#x3D; mapper.selectCustomerWithOrderList2(1);\n\n    System.out.println(customer.getCustomerId());\n    System.out.println(customer.getCustomerName());\n    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    System.out.println(customer.getOrderList());</code></pre>\n\n<p>从控制台打印的日志来看，第一次执行，我们只调用了customer里的方法，而当调用customer中的订单列表时，我们又进行了一次查询</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">consle\n\nDEBUG 07-11 23:51:18,254 &#x3D;&#x3D;&gt;  Preparing: select customer_id, customer_name from t_customer where customer_id &#x3D; ?   (BaseJdbcLogger.java:159) \nDEBUG 07-11 23:51:18,317 &#x3D;&#x3D;&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:159) \nDEBUG 07-11 23:51:18,370 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:159) \n1\nc01\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   \nDEBUG 07-11 23:51:18,371 &#x3D;&#x3D;&gt;  Preparing: select order_id, order_name from t_order where customer_id2 &#x3D; ?   (BaseJdbcLogger.java:159) \nDEBUG 07-11 23:51:18,372 &#x3D;&#x3D;&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:159) \nDEBUG 07-11 23:51:18,375 &lt;&#x3D;&#x3D;      Total: 3  (BaseJdbcLogger.java:159) \n[Order(orderId&#x3D;1, orderName&#x3D;o1, customerId2&#x3D;null, customer&#x3D;null), Order(orderId&#x3D;2, orderName&#x3D;o2, customerId2&#x3D;null, customer&#x3D;null), Order(orderId&#x3D;3, orderName&#x3D;o3, customerId2&#x3D;null, customer&#x3D;null)]\n</code></pre>\n\n\n\n<h3 id=\"4-查询缓存\"><a href=\"#4-查询缓存\" class=\"headerlink\" title=\"4. 查询缓存\"></a>4. 查询缓存</h3><p>mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。</p>\n<p>mybaits提供一级缓存，和二级缓存。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_1.png\" alt=\"image-20210712000450725\"></p>\n<p>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。</p>\n<p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>\n<p>为什么要用缓存？</p>\n<p><strong>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</strong></p>\n<h3 id=\"5-缓存查询顺序\"><a href=\"#5-缓存查询顺序\" class=\"headerlink\" title=\"5. 缓存查询顺序\"></a>5. 缓存查询顺序</h3><ul>\n<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li>\n<li>如果二级缓存没有命中，再查询一级缓存</li>\n<li>如果一级缓存也没有命中，则查询数据库</li>\n<li><strong>SqlSession关闭之前</strong>，一级缓存中的数据会写入二级缓存</li>\n</ul>\n<h3 id=\"6-缓存范围\"><a href=\"#6-缓存范围\" class=\"headerlink\" title=\"6. 缓存范围\"></a>6. 缓存范围</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">* 一级缓存：SqlSession级别\n\n* 二级缓存：SqlSessionFactory级别</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_2.png\" alt=\"image-20210712000610240\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_3.png\" alt=\"image-20210712000702988\"></p>\n<h3 id=\"7-一级缓存\"><a href=\"#7-一级缓存\" class=\"headerlink\" title=\"7. 一级缓存\"></a>7. 一级缓存</h3><h4 id=\"7-1-测试一级缓存\"><a href=\"#7-1-测试一级缓存\" class=\"headerlink\" title=\"7.1 测试一级缓存\"></a>7.1 测试一级缓存</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Test\npublic void testFirstLevelCache() &#123;\n    \n    EmployeeMapper mapper &#x3D; session.getMapper(EmployeeMapper.class);\n    \n    &#x2F;&#x2F; 1.第一次查询\n    Employee employee1 &#x3D; mapper.selectEmployeeById(2);\n    \n    System.out.println(&quot;employee1 &#x3D; &quot; + employee1);\n    \n    &#x2F;&#x2F; 2.第二次查询\n    Employee employee2 &#x3D; mapper.selectEmployeeById(2);\n    \n    System.out.println(&quot;employee2 &#x3D; &quot; + employee2);\n    \n    &#x2F;&#x2F; 3.经过验证发现，两次查询返回的其实是同一个对象\n    System.out.println(&quot;(employee2 &#x3D;&#x3D; employee1) &#x3D; &quot; + (employee2 &#x3D;&#x3D; employee1));\n    System.out.println(&quot;employee1.equals(employee2) &#x3D; &quot; + employee1.equals(employee2));\n    System.out.println(&quot;employee1.hashCode() &#x3D; &quot; + employee1.hashCode());\n    System.out.println(&quot;employee2.hashCode() &#x3D; &quot; + employee2.hashCode());\n    \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DEBUG 12-01 09:14:48,760 &#x3D;&#x3D;&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age from t_emp where emp_id&#x3D;?   (BaseJdbcLogger.java:145) \nDEBUG 12-01 09:14:48,804 &#x3D;&#x3D;&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) \nDEBUG 12-01 09:14:48,830 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:145) \nemployee1 &#x3D; Employee&#123;empId&#x3D;2, empName&#x3D;&#39;AAAAAA&#39;, empSalary&#x3D;6666.66, empAge&#x3D;20, empGender&#x3D;&#39;male&#39;&#125;\nemployee2 &#x3D; Employee&#123;empId&#x3D;2, empName&#x3D;&#39;AAAAAA&#39;, empSalary&#x3D;6666.66, empAge&#x3D;20, empGender&#x3D;&#39;male&#39;&#125;\n(employee2 &#x3D;&#x3D; employee1) &#x3D; true\nemployee1.equals(employee2) &#x3D; true\nemployee1.hashCode() &#x3D; 1131645570\nemployee2.hashCode() &#x3D; 1131645570</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>两个变量指向同一个对象</strong></p></blockquote>\n<h4 id=\"7-2-一级缓存失效\"><a href=\"#7-2-一级缓存失效\" class=\"headerlink\" title=\"7.2 一级缓存失效\"></a>7.2 一级缓存失效</h4><ul>\n<li>不是同一个SqlSession</li>\n<li>同一个SqlSession但是查询条件发生了变化</li>\n<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>\n<li>同一个SqlSession两次查询期间手动清空了缓存</li>\n<li>同一个SqlSession两次查询期间提交了事务</li>\n</ul>\n<h3 id=\"8-二级缓存\"><a href=\"#8-二级缓存\" class=\"headerlink\" title=\"8. 二级缓存\"></a>8. 二级缓存</h3><h4 id=\"8-1-开启二级缓存功能\"><a href=\"#8-1-开启二级缓存功能\" class=\"headerlink\" title=\"8.1 开启二级缓存功能\"></a>8.1 开启二级缓存功能</h4><p>在想要使用二级缓存的Mapper配置文件中<strong>加入cache标签</strong></p>\n<pre><code>&lt;mapper namespace=&quot;com.atguigu.mybatis.EmployeeMapper&quot;&gt;\n&lt;!-- 加入cache标签启用二级缓存功能 --&gt;\n&lt;cache/&gt;\n</code></pre>\n<h4 id=\"8-2-实体类支持序列化\"><a href=\"#8-2-实体类支持序列化\" class=\"headerlink\" title=\"8.2 实体类支持序列化\"></a>8.2 实体类支持序列化</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">public class Employee implements Serializable &#123;</code></pre>\n\n<h4 id=\"8-3-测试\"><a href=\"#8-3-测试\" class=\"headerlink\" title=\"8.3 测试\"></a>8.3 测试</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void testSecondLevelCacheExists() &#123;\n    SqlSession session &#x3D; factory.openSession();\n    \n    EmployeeMapper mapper &#x3D; session.getMapper(EmployeeMapper.class);\n    \n    Employee employee &#x3D; mapper.selectEmployeeById(2);\n    \n    System.out.println(&quot;employee &#x3D; &quot; + employee);\n    \n    &#x2F;&#x2F; 在执行第二次查询前，关闭当前SqlSession\n    session.close();\n    \n    &#x2F;&#x2F; 开启一个新的SqlSession\n    session &#x3D; factory.openSession();\n    \n    mapper &#x3D; session.getMapper(EmployeeMapper.class);\n    \n    employee &#x3D; mapper.selectEmployeeById(2);\n    \n    System.out.println(&quot;employee &#x3D; &quot; + employee);\n    \n    session.close();\n    \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">DEBUG 12-01 09:44:27,057 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0  (LoggingCache.java:62) \nDEBUG 12-01 09:44:27,459 &#x3D;&#x3D;&gt;  Preparing: select emp_id,emp_name,emp_salary,emp_gender,emp_age from t_emp where emp_id&#x3D;?   (BaseJdbcLogger.java:145) \nDEBUG 12-01 09:44:27,510 &#x3D;&#x3D;&gt; Parameters: 2(Integer)  (BaseJdbcLogger.java:145) \nDEBUG 12-01 09:44:27,536 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:145) \nemployee &#x3D; Employee&#123;empId&#x3D;2, empName&#x3D;&#39;AAAAAA&#39;, empSalary&#x3D;6666.66, empAge&#x3D;20, empGender&#x3D;&#39;male&#39;&#125;\nDEBUG 12-01 09:44:27,622 Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.5  (LoggingCache.java:62) \nemployee &#x3D; Employee&#123;empId&#x3D;2, empName&#x3D;&#39;AAAAAA&#39;, empSalary&#x3D;6666.66, empAge&#x3D;20, empGender&#x3D;&#39;male&#39;&#125;</code></pre>\n\n<h4 id=\"8-4-缓存命中率\"><a href=\"#8-4-缓存命中率\" class=\"headerlink\" title=\"8.4 缓存命中率\"></a>8.4 缓存命中率</h4><p>日志中打印的Cache Hit Ratio叫做缓存命中率</p>\n<pre><code>Cache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.0（0/1)\nCache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.5（1/2）\nCache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.6666666666666666（2/3）\nCache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.75（3/4）\nCache Hit Ratio [com.atguigu.mybatis.EmployeeMapper]: 0.8（4/5）\n</code></pre>\n<p>缓存命中率=命中缓存的次数/查询的总次数</p>\n<h4 id=\"8-5-二级缓存相关配置\"><a href=\"#8-5-二级缓存相关配置\" class=\"headerlink\" title=\"8.5 二级缓存相关配置\"></a>8.5 二级缓存相关配置</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">在Mapper配置文件中添加的cache标签可以设置一些属性：\n\neviction属性：缓存回收策略\n\n\tLRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。\n\n\tFIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。\n\n\tSOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。\n\n\tWEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n\n\t默认的是 LRU。\n\nflushInterval属性：刷新间隔，单位毫秒\t\n\n\t默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新\n\nsize属性：引用数目，正整数  \n\t代表缓存最多可以存储多少个对象，太大容易导致内存溢出\n\nreadOnly属性：只读，true&#x2F;false\n\n\ttrue：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。\n\n\tfalse：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</code></pre>\n\n<h3 id=\"9-整合EHcache\"><a href=\"#9-整合EHcache\" class=\"headerlink\" title=\"9. 整合EHcache\"></a>9. 整合EHcache</h3><h4 id=\"9-1-添加依赖\"><a href=\"#9-1-添加依赖\" class=\"headerlink\" title=\"9.1 添加依赖\"></a>9.1 添加依赖</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- Mybatis EHCache整合包 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.caches&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-ehcache&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- slf4j日志门面的一个具体实现 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"9-2-依赖传递\"><a href=\"#9-2-依赖传递\" class=\"headerlink\" title=\"9.2 依赖传递\"></a>9.2 依赖传递</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_5.png\" alt=\"image-20210712001834391\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>我们发现，他们都有一个 slf4j 的依赖jar包</strong></p></blockquote>\n<table>\n<thead>\n<tr>\n<th>jar包名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mybatis-ehcache</td>\n<td>Mybatis和EHCache的整合包</td>\n</tr>\n<tr>\n<td>ehcache</td>\n<td>EHCache核心包</td>\n</tr>\n<tr>\n<td>slf4j-api</td>\n<td>SLF4J日志门面包</td>\n</tr>\n<tr>\n<td>logback-classic</td>\n<td>支持SLF4J门面接口的一个具体实现</td>\n</tr>\n</tbody></table>\n<h4 id=\"9-3-开始整合\"><a href=\"#9-3-开始整合\" class=\"headerlink\" title=\"9.3 开始整合\"></a>9.3 开始整合</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ehcache.xml\n\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;\n&lt;ehcache xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:noNamespaceSchemaLocation&#x3D;&quot;..&#x2F;config&#x2F;ehcache.xsd&quot;&gt;\n    &lt;!-- 磁盘保存路径 --&gt;\n    &lt;diskStore path&#x3D;&quot;D:\\atguigu\\ehcache&quot;&#x2F;&gt;\n    \n    &lt;defaultCache\n            maxElementsInMemory&#x3D;&quot;1000&quot;\n            maxElementsOnDisk&#x3D;&quot;10000000&quot;\n            eternal&#x3D;&quot;false&quot;\n            overflowToDisk&#x3D;&quot;true&quot;\n            timeToIdleSeconds&#x3D;&quot;120&quot;\n            timeToLiveSeconds&#x3D;&quot;120&quot;\n            diskExpiryThreadIntervalSeconds&#x3D;&quot;120&quot;\n            memoryStoreEvictionPolicy&#x3D;&quot;LRU&quot;&gt;\n    &lt;&#x2F;defaultCache&gt;\n&lt;&#x2F;ehcache&gt;</code></pre>\n\n<p>在xxxmapper.xml 的 cache 标签中，指定缓存管理器的类型</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;cache type&#x3D;&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&#x2F;&gt;</code></pre>\n\n<h4 id=\"9-4-EHCache配置文件说明\"><a href=\"#9-4-EHCache配置文件说明\" class=\"headerlink\" title=\"9.4 EHCache配置文件说明\"></a>9.4 EHCache配置文件说明</h4><p>当借助CacheManager.add(“缓存名称”)创建Cache时，EhCache便会采用<defalutCache/>指定的的管理策略。</p>\n<p>defaultCache标签各属性说明：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>是否必须</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maxElementsInMemory</td>\n<td>是</td>\n<td>在内存中缓存的element的最大数目</td>\n</tr>\n<tr>\n<td>maxElementsOnDisk</td>\n<td>是</td>\n<td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td>\n</tr>\n<tr>\n<td>eternal</td>\n<td>是</td>\n<td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td>\n</tr>\n<tr>\n<td>overflowToDisk</td>\n<td>是</td>\n<td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td>\n</tr>\n<tr>\n<td>timeToIdleSeconds</td>\n<td>否</td>\n<td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td>\n</tr>\n<tr>\n<td>timeToLiveSeconds</td>\n<td>否</td>\n<td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td>\n</tr>\n<tr>\n<td>diskSpoolBufferSizeMB</td>\n<td>否</td>\n<td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td>\n</tr>\n<tr>\n<td>diskPersistent</td>\n<td>否</td>\n<td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td>\n</tr>\n<tr>\n<td>diskExpiryThreadIntervalSeconds</td>\n<td>否</td>\n<td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td>\n</tr>\n<tr>\n<td>memoryStoreEvictionPolicy</td>\n<td>否</td>\n<td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td>\n</tr>\n</tbody></table>\n<h3 id=\"10-logback\"><a href=\"#10-logback\" class=\"headerlink\" title=\"10. logback\"></a>10. logback</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。\n\n我们也可以添加，下面依赖进行解析，进而使用log4j\n&lt;dependency&gt;\n    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.7.30&lt;&#x2F;version&gt;\n    &lt;scope&gt;test&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">logback.xml\n\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;configuration debug&#x3D;&quot;true&quot;&gt;\n    &lt;!-- 指定日志输出的位置 --&gt;\n    &lt;appender name&#x3D;&quot;STDOUT&quot;\n        class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;encoder&gt;\n            &lt;!-- 日志输出的格式 --&gt;\n            &lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;\n            &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n    \n    &lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;\n    &lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;\n    &lt;root level&#x3D;&quot;DEBUG&quot;&gt;\n        &lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;\n        &lt;appender-ref ref&#x3D;&quot;STDOUT&quot; &#x2F;&gt;\n    &lt;&#x2F;root&gt;\n    \n    &lt;!-- 根据特殊需求指定局部日志级别 --&gt;\n    &lt;logger name&#x3D;&quot;com.atguigu.crowd.mapper&quot; level&#x3D;&quot;DEBUG&quot;&#x2F;&gt;\n    \n&lt;&#x2F;configuration&gt;</code></pre>\n\n<h3 id=\"11-缓存的原理\"><a href=\"#11-缓存的原理\" class=\"headerlink\" title=\"11. 缓存的原理\"></a>11. 缓存的原理</h3><h4 id=\"1-cache-接口\"><a href=\"#1-cache-接口\" class=\"headerlink\" title=\"1. cache 接口\"></a>1. cache 接口</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">org.apache.ibatis.cache.Cache接口：所有缓存都必须实现的顶级接口</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_6.png\" alt=\"images\"></p>\n<h4 id=\"2-cache接口中的方法\"><a href=\"#2-cache接口中的方法\" class=\"headerlink\" title=\"2. cache接口中的方法\"></a>2. cache接口中的方法</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_7.png\" alt=\"images\"></p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>putObject()</td>\n<td>将对象存入缓存</td>\n</tr>\n<tr>\n<td>getObject()</td>\n<td>从缓存中取出对象</td>\n</tr>\n<tr>\n<td>removeObject()</td>\n<td>从缓存中删除对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-缓存的本质\"><a href=\"#3-缓存的本质\" class=\"headerlink\" title=\"3. 缓存的本质\"></a>3. 缓存的本质</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">根据Cache接口中方法的声明我们能够看到，缓存的本质是一个Map。</code></pre>\n\n<h4 id=\"4-PerpetualCache\"><a href=\"#4-PerpetualCache\" class=\"headerlink\" title=\"4. PerpetualCache\"></a>4. PerpetualCache</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_8.png\" alt=\"images\"></p>\n<p>org.apache.ibatis.cache.impl.PerpetualCache是Mybatis的默认缓存，也是Cache接口的默认实现。Mybatis一级缓存和自带的二级缓存都是通过PerpetualCache来操作缓存数据的。但是这就奇怪了，同样是PerpetualCache这个类，怎么能区分出来两种不同级别的缓存呢？</p>\n<p>其实很简单，调用者不同。</p>\n<ul>\n<li>一级缓存：由BaseExecutor调用PerpetualCache</li>\n<li>二级缓存：由CachingExecutor调用PerpetualCache，而CachingExecutor可以看做是对BaseExecutor的装饰</li>\n</ul>\n<h5 id=\"4-1-一级缓存机制\"><a href=\"#4-1-一级缓存机制\" class=\"headerlink\" title=\"4.1 一级缓存机制\"></a>4.1 一级缓存机制</h5><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_9.png\" alt=\"images\"></p>\n<p>org.apache.ibatis.executor.BaseExecutor类中的关键方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">query方法\n\n\npublic &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;\n    ErrorContext.instance().resource(ms.getResource()).activity(&quot;executing a query&quot;).object(ms.getId());\n    if (closed) &#123;\n        throw new ExecutorException(&quot;Executor was closed.&quot;);\n    &#125;\n    if (queryStack &#x3D;&#x3D; 0 &amp;&amp; ms.isFlushCacheRequired()) &#123;\n        clearLocalCache();\n    &#125;\n    List&lt;E&gt; list;\n    try &#123;\n        queryStack++;\n        \n        &#x2F;&#x2F; 尝试从本地缓存中获取数据\n        list &#x3D; resultHandler &#x3D;&#x3D; null ? (List&lt;E&gt;) localCache.getObject(key) : null;\n        \n        if (list !&#x3D; null) &#123;\n            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n        &#125; else &#123;\n            \n            &#x2F;&#x2F; 如果本地缓存中没有查询到数据，则查询数据库\n            list &#x3D; queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n        &#125;\n    &#125; finally &#123;\n        queryStack--;\n    &#125;\n    if (queryStack &#x3D;&#x3D; 0) &#123;\n        for (org.apache.ibatis.executor.BaseExecutor.DeferredLoad deferredLoad : deferredLoads) &#123;\n            deferredLoad.load();\n        &#125;\n        &#x2F;&#x2F; issue #601\n        deferredLoads.clear();\n        if (configuration.getLocalCacheScope() &#x3D;&#x3D; LocalCacheScope.STATEMENT) &#123;\n            &#x2F;&#x2F; issue #482\n            clearLocalCache();\n        &#125;\n    &#125;\n    return list;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">queryFromDatabase方法\n\nprivate &lt;E&gt; List&lt;E&gt; queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;\n    List&lt;E&gt; list;\n    localCache.putObject(key, EXECUTION_PLACEHOLDER);\n    try &#123;\n        \n        &#x2F;&#x2F; 从数据库中查询数据\n        list &#x3D; doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n    &#125; finally &#123;\n        localCache.removeObject(key);\n    &#125;\n    \n    &#x2F;&#x2F; 将数据存入本地缓存\n    localCache.putObject(key, list);\n    if (ms.getStatementType() &#x3D;&#x3D; StatementType.CALLABLE) &#123;\n        localOutputParameterCache.putObject(key, parameter);\n    &#125;\n    return list;\n&#125;</code></pre>\n\n<h4 id=\"4-2-二级缓存机制\"><a href=\"#4-2-二级缓存机制\" class=\"headerlink\" title=\"4.2 二级缓存机制\"></a>4.2 二级缓存机制</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_10.png\" alt=\"images\"></p>\n<p>未开启二级缓存</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_11.png\" alt=\"images\"></p>\n<p>开启后</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_12.png\" alt=\"images\"></p>\n<p>使用EHcache</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cache_13.png\" alt=\"images\"></p>\n","text":"1. 延迟加载延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。也叫懒加载。 resultMap可以实现高级映射（使用&#96;association&#96;、&#96;collection&#96;实现一对一及一对...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">1. 延迟加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2. 延迟加载配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E8%BE%83%E4%BD%8E%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2.1 较低版本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%BE%83%E9%AB%98%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2.2 较高版本</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">3. 实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">4. 查询缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">5. 缓存查询顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E7%BC%93%E5%AD%98%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">6. 缓存范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">7. 一级缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E6%B5%8B%E8%AF%95%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">7.1 测试一级缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">7.2 一级缓存失效</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">8. 二级缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%E5%BC%80%E5%90%AF%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">8.1 开启二级缓存功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E5%AE%9E%E4%BD%93%E7%B1%BB%E6%94%AF%E6%8C%81%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">8.2 实体类支持序列化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">8.3 测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E7%8E%87\"><span class=\"toc-text\">8.4 缓存命中率</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-5-%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">8.5 二级缓存相关配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E6%95%B4%E5%90%88EHcache\"><span class=\"toc-text\">9. 整合EHcache</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">9.1 添加依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">9.2 依赖传递</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-3-%E5%BC%80%E5%A7%8B%E6%95%B4%E5%90%88\"><span class=\"toc-text\">9.3 开始整合</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-4-EHCache%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">9.4 EHCache配置文件说明</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-logback\"><span class=\"toc-text\">10. logback</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">11. 缓存的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-cache-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1. cache 接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-cache%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. cache接口中的方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">3. 缓存的本质</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-PerpetualCache\"><span class=\"toc-text\">4. PerpetualCache</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">4.1 一级缓存机制</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">4.2 二级缓存机制</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Mybatis 装饰底层","uid":"14472dd3b23cbe4f0d4e64f3f2df1f1f","slug":"47-Mybatis-装饰底层","date":"2021-09-13T15:24:32.000Z","updated":"2021-09-15T10:51:27.987Z","comments":true,"path":"api/articles/47-Mybatis-装饰底层.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog8.jpg","text":"1. 装饰器模式装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Mybatis 对一对多","uid":"b4fe850bfca7fffe4256d22b623aea94","slug":"45-Mybatis-对一对多","date":"2021-09-13T15:22:32.000Z","updated":"2021-09-15T10:51:50.014Z","comments":true,"path":"api/articles/45-Mybatis-对一对多.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","text":"1. 一对一1.1. resultType实现 sql语句 确定查询的主表：订单表 确定查询的关联表：用户表 关联查询使用内连接？还是外连接？ 由于orders表中有一个外键（user_id），通过外键关联查询用户表只能查询出一条记录，可以使用内连接。 SELECT orders...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}