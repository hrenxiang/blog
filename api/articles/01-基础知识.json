{"title":"基础知识","uid":"7f9eaea51aac5991b1ad0d8e6f097110","slug":"01-基础知识","date":"2021-09-13T14:33:32.000Z","updated":"2021-09-14T15:52:42.927Z","comments":true,"path":"api/articles/01-基础知识.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog1.jpg","content":"<h3 id=\"一、终端命令（Windows）\"><a href=\"#一、终端命令（Windows）\" class=\"headerlink\" title=\"一、终端命令（Windows）\"></a>一、终端命令（Windows）</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>盘符名称：</td>\n<td>盘符切换，d: 表示切换到d盘</td>\n</tr>\n<tr>\n<td>dir</td>\n<td>查看当前路径下的内容</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>查看当前路径</td>\n</tr>\n<tr>\n<td>cd  目录</td>\n<td>进入单级目录</td>\n</tr>\n<tr>\n<td>cd  ..</td>\n<td>回退到上一-级目录</td>\n</tr>\n<tr>\n<td>cd\\</td>\n<td>回退到盘符目录</td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清屏</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>退出命令提示符窗口</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>calc</td>\n<td>启动计算器</td>\n</tr>\n<tr>\n<td>appwiz.cpl</td>\n<td>程序和功能</td>\n</tr>\n<tr>\n<td>cleanmgr</td>\n<td>打开磁盘清理工具</td>\n</tr>\n<tr>\n<td>control</td>\n<td>控制面板</td>\n</tr>\n<tr>\n<td>devmgmt.msc</td>\n<td>设备管理器</td>\n</tr>\n<tr>\n<td>explorer</td>\n<td>资源管理器</td>\n</tr>\n<tr>\n<td>gpedit.msc</td>\n<td>组策略</td>\n</tr>\n<tr>\n<td>mspaint</td>\n<td>画图</td>\n</tr>\n<tr>\n<td>notpad</td>\n<td>记事本</td>\n</tr>\n<tr>\n<td>regedit.exe</td>\n<td>注册表</td>\n</tr>\n<tr>\n<td>stikyNot</td>\n<td>便签</td>\n</tr>\n<tr>\n<td>write</td>\n<td>写字板</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、注释分类\"><a href=\"#二、注释分类\" class=\"headerlink\" title=\"二、注释分类\"></a>二、注释分类</h3><p>• 单行注释<br>格式：//信息</p>\n<p>• 多行注释<br>格式：/<em>信息</em>/    </p>\n<p>• 文档注释<br>格式：/*<em>信息</em>/</p>\n<h3 id=\"三、八大数据类型\"><a href=\"#三、八大数据类型\" class=\"headerlink\" title=\"三、八大数据类型\"></a>三、八大数据类型</h3><table>\n<thead>\n<tr>\n<th>简单类型</th>\n<th>boolean</th>\n<th>byte</th>\n<th>char</th>\n<th>short</th>\n<th>Int</th>\n<th>long</th>\n<th>float</th>\n<th>double</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>二进制位数</td>\n<td>1</td>\n<td>8</td>\n<td>16</td>\n<td>16</td>\n<td>32</td>\n<td>64</td>\n<td>32</td>\n<td>64</td>\n</tr>\n<tr>\n<td>封装器类</td>\n<td>Boolean</td>\n<td>Byte</td>\n<td>Character</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Float</td>\n<td>Double</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。如：\n例如：基本类型byte 二进制位数：Byte.SIZE 最小值：Byte.MIN_VALUE 最大值：Byte.MAX_VALUE\n\nbyte：8位，最大存储数据量是255，存放的数据范围是-128~127之间。\n\nshort：16位，最大数据存储量是65536，数据范围是-32768~32767之间。\n\nint：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。\n\nlong：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。\n\nfloat：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。\n\ndouble：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。\n\nboolean：只有true和false两个取值。\n\nchar：16位，存储Unicode码，用单引号赋值。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* jvm 内存空间\n\n  （1）. Heap 堆空间：分配对象 new Student（）\n\n  （2）. Stack 栈空间：临时变量 Student stu\n\n  （3）. Code 代码区 ：类的定义，静态资源 Student.class\n  \n* eg：Student stu &#x3D; new Student（）； &#x2F;&#x2F;new 在内存的堆空间创建对象\n\n  stu.study(); &#x2F;&#x2F;把对象的地址赋给stu引用变量\n\n  上例实现步骤：\n  \n  a.JVM加载Student.class 到Code区\n\n  b.new Student()在堆空间分配空间并创建一个Student实例；\n  \n  c.将此实例的地址赋值给引用stu， 栈空间；</code></pre>\n\n\n\n<h3 id=\"四、三大引用数据类型\"><a href=\"#四、三大引用数据类型\" class=\"headerlink\" title=\"四、三大引用数据类型\"></a>四、三大引用数据类型</h3><ul>\n<li><p>类 Class    接口 Interface    数组 Array</p>\n</li>\n<li><p>八种基本类型在java中都有对应的 封装类型，也就是 引用类型：</p>\n<p>整数类型 Byte、Short、Integer、Long<br>浮点数类型 Float、Double<br>字符型 Character<br>布尔类型 Boolean</p>\n</li>\n</ul>\n<h3 id=\"五、数据转换\"><a href=\"#五、数据转换\" class=\"headerlink\" title=\"五、数据转换\"></a>五、数据转换</h3><p>简单类型数据间的转换,有两种方式: 自动转换 和 强制转换, 通常发生在表达式中或方法的参数传递时.</p>\n<ul>\n<li><p>自动转换</p>\n<p>具体地讲,当一个较”小”数据与一个较”大”的数据一起运算时,系统将自动将”小”数据转换成”大”数据,再进行运算</p>\n<p>这里我们所说的”大”与”小”,并不是指占用字节的多少,而是指表示值的范围的大小</p>\n<p>这些类型由”小”到”大”分别为 (byte，short，char)–int–long–float—double</p>\n<p>a 如果低级类型为char型，向高级类型（整型）转换时，会转换为对应ASCII码值</p>\n<p>b 对于byte,short,char三种类型而言，他们是平级的，因此不能相互自动转换，可以使用强制类型转换</p>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.jpg\" alt=\"img\"></p>\n</li>\n<li><p>强制类型转换</p>\n<p>将”大”数据转换为”小”数据时，使用强制类型转换</p>\n<p>格式： 用圆括号括起来目标类型，置于变量前<br>例如： int n=(int)3.14159/2;</p>\n<p>这种转换肯定可能会导致溢出或精度的下降</p>\n</li>\n</ul>\n<h3 id=\"六、标识符\"><a href=\"#六、标识符\" class=\"headerlink\" title=\"六、标识符\"></a>六、标识符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1. 标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。\n\n2. Java中标识符的组成规则：\n   \n   由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字\n   \n   不能使用java中的关键字作为标识符\n   \n   标识符对大小写敏感（区分大小写）\n\n3. Java中标识符的命名约定：\n\n   * 小驼峰式命名：变量名、方法名\n   \n     首字母小写，从第二个单词开始每个单词的首字母大写\n   \n   * 大驼峰式命名：类名\n   \n     每个单词的首字母都大写\n     \n4. 标识符的命名最好可以做到见名知意</code></pre>\n\n<h3 id=\"七、进制（了解）\"><a href=\"#七、进制（了解）\" class=\"headerlink\" title=\"七、进制（了解）\"></a>七、进制（了解）</h3><h4 id=\"7-1-计算机中，数字共有四种不同进制的表示方式\"><a href=\"#7-1-计算机中，数字共有四种不同进制的表示方式\" class=\"headerlink\" title=\"7.1    计算机中，数字共有四种不同进制的表示方式\"></a>7.1    计算机中，数字共有四种不同进制的表示方式</h4><table>\n<thead>\n<tr>\n<th>十进制</th>\n<th>二进制</th>\n<th>八进制</th>\n<th>十六进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>10</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>11</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>100</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>101</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>6</td>\n<td>110</td>\n<td>6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>111</td>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1000</td>\n<td>10</td>\n<td>8</td>\n</tr>\n<tr>\n<td>9</td>\n<td>1001</td>\n<td>11</td>\n<td>9</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1010</td>\n<td>12</td>\n<td>a或A</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1011</td>\n<td>13</td>\n<td>b或B</td>\n</tr>\n<tr>\n<td>12</td>\n<td>1100</td>\n<td>14</td>\n<td>c或C</td>\n</tr>\n<tr>\n<td>13</td>\n<td>1101</td>\n<td>15</td>\n<td>d或D</td>\n</tr>\n<tr>\n<td>14</td>\n<td>1110</td>\n<td>16</td>\n<td>e或E</td>\n</tr>\n<tr>\n<td>15</td>\n<td>1111</td>\n<td>17</td>\n<td>f或F</td>\n</tr>\n<tr>\n<td>16</td>\n<td>10000</td>\n<td>20</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h4 id=\"7-2-代码中不同进制的表示方式\"><a href=\"#7-2-代码中不同进制的表示方式\" class=\"headerlink\" title=\"7.2    代码中不同进制的表示方式\"></a>7.2    代码中不同进制的表示方式</h4><ul>\n<li><p>十进制：默认就是十进制</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(10);</code></pre></li>\n<li><p>二进制：0b或0B开头</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(0B10);</code></pre></li>\n<li><p>八进制：0开头</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(010);</code></pre></li>\n<li><p>十六进制：0x或0X开头</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(0X10);</code></pre></li>\n</ul>\n<h4 id=\"7-3-进制转换\"><a href=\"#7-3-进制转换\" class=\"headerlink\" title=\"7.3    进制转换\"></a>7.3    进制转换</h4><ul>\n<li>十进制转二进制、八进制和十六进制</li>\n<li>二进制、八进制和十六进制 转换成为 十进制</li>\n<li>二进制、八进制和十六进制相互转换</li>\n</ul>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.png\" alt=\"img\"></p>\n<h4 id=\"7-4-计算机存储单位\"><a href=\"#7-4-计算机存储单位\" class=\"headerlink\" title=\"7.4    计算机存储单位\"></a>7.4    计算机存储单位</h4><ul>\n<li><p><strong>位（bit）：</strong>是数据存储的最小单位，也就是二进制。二进制数系统中，每个0或1就是一个位，叫做bit（比特）</p>\n</li>\n<li><p><strong>字节（Byte）：</strong>是计算机信息技术用于计量存储容量的一种计量单位，也是是计算机的基本存储单位，一字节等于八位。</p>\n</li>\n<li><p><strong>转换关系：</strong></p>\n<ul>\n<li>8 bit = 1 Byte</li>\n<li>1024 Byte = 1 KB</li>\n<li>1024 KB = 1 MB</li>\n<li>1024 MB = 1 GB</li>\n<li>1024 GB = 1 TB</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"7-5-数据二进制表示\"><a href=\"#7-5-数据二进制表示\" class=\"headerlink\" title=\"7.5    数据二进制表示\"></a>7.5    数据二进制表示</h4><ul>\n<li>原码</li>\n<li>反码</li>\n<li>补码</li>\n</ul>\n<h3 id=\"八、运算符\"><a href=\"#八、运算符\" class=\"headerlink\" title=\"八、运算符\"></a>八、运算符</h3><h4 id=\"8-1-运算符和表达式\"><a href=\"#8-1-运算符和表达式\" class=\"headerlink\" title=\"8.1    运算符和表达式\"></a>8.1    运算符和表达式</h4><p>运算符：对常量或者变量进行操作的符号</p>\n<p>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p>\n<p>例如：int c = a + b;    +是运算符   a+b 是表达式</p>\n<h4 id=\"8-2-算术运算符\"><a href=\"#8-2-算术运算符\" class=\"headerlink\" title=\"8.2    算术运算符\"></a>8.2    算术运算符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">算术运算符</th>\n<th align=\"center\">符号解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"center\">加法运算，字符串连接运算，正号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">减法运算，负号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">乘法运算</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">除法运算，整数/整数结果还是整数</td>\n</tr>\n<tr>\n<td align=\"center\"><code>%</code></td>\n<td align=\"center\">求余运算，余数的符号只看被除数</td>\n</tr>\n<tr>\n<td align=\"center\"><code>++</code> 、 <code>--</code></td>\n<td align=\"center\">自增自减运算</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>注意：</p>\n<p>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p>\n<p><strong>整数操作</strong>只能得到<strong>整数</strong>，要想得到小数，必须有浮点数参与运算</p>\n<ul>\n<li>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：<br>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加<br>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加<br>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</li>\n</ul>\n</li>\n<li><p>当“+”操作中出现 字符串 时，这个”+”是字符串连接符，而不是算术运算。</p>\n<p>“itheima”+ 666; // 输出：itheima666</p>\n</li>\n<li><p><strong>自增自减</strong>运算符</p>\n<p>符号  作用  说明<br>++     自增  变量的值加1<br>–       自减  变量的值减1</p>\n</li>\n<li><p>注意事项：自加自减运算</p>\n<p><code>++</code> 运算，变量自己的值加1。反之，<code>--</code> 运算，变量自己的值减少1，用法与<code>++</code> 一致。</p>\n<p>先自增运算符: ++在前，先自加，后赋值，例如, ++a;</p>\n<p>后自增运算符: ++在后，先赋值，后自加，例如, a++;</p>\n</li>\n</ul>\n<h4 id=\"8-3-赋值运算符\"><a href=\"#8-3-赋值运算符\" class=\"headerlink\" title=\"8.3    赋值运算符\"></a>8.3    赋值运算符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">赋值运算符</th>\n<th align=\"center\">符号解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>=</code></td>\n<td align=\"center\">将符号右边的值，赋值给左边的变量</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+=</code></td>\n<td align=\"center\">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相加操作，最后将结果</strong><code>赋值给左边的变量</code>**</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-=</code></td>\n<td align=\"center\">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相减操作，最后将结果</strong><code>赋值给左边的变量</code>**</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*=</code></td>\n<td align=\"center\">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相乘操作，最后将结果</strong><code>赋值给左边的变量</code>**</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/=</code></td>\n<td align=\"center\">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相除操作，最后将结果</strong><code>赋值给左边的变量</code>**</td>\n</tr>\n<tr>\n<td align=\"center\"><code>%=</code></td>\n<td align=\"center\">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行取余操作，最后将结果</strong><code>赋值给左边的变量</code>**</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* 赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量        </code></pre>\n\n<h4 id=\"8-4-关系运算符\"><a href=\"#8-4-关系运算符\" class=\"headerlink\" title=\"8.4    关系运算符\"></a>8.4    关系运算符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">关系运算符</th>\n<th align=\"center\">符号解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&lt;</code></td>\n<td align=\"center\">比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code></td>\n<td align=\"center\">比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;=</code></td>\n<td align=\"center\">比较符号左边的数据是否小于或者等于右边的数据，如果大于结果是false。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;=</code></td>\n<td align=\"center\">比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是false。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>==</code></td>\n<td align=\"center\">比较符号两边数据是否相等，相等结果是true。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>！=</code></td>\n<td align=\"center\">不等于符号 ，如果符号两边的数据不相等，结果是true。</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* 注意事项：\n     关系运算符的结果都是boolean类型，要么是true，要么是false。\n     千万不要把“&#x3D;&#x3D;”误写成“&#x3D;”，&quot;&#x3D;&#x3D;&quot;是判断是否相等的关系，&quot;&#x3D;&quot;是赋值。</code></pre>\n\n<h4 id=\"8-4-逻辑运算符\"><a href=\"#8-4-逻辑运算符\" class=\"headerlink\" title=\"8.4    逻辑运算符\"></a>8.4    逻辑运算符</h4><table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>符号解释</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>逻辑与,逻辑且</td>\n<td>只有所有的运算数都是true,结果才是true,只要有一个是false,结果就是false</td>\n</tr>\n<tr>\n<td>|</td>\n<td>逻辑或</td>\n<td>只有所有的运算数都是false,结果才是flase,只要有一个是true,结果就是true</td>\n</tr>\n<tr>\n<td>^</td>\n<td>逻辑异或</td>\n<td>相同为<code>false</code>，不同为<code>true</code></td>\n</tr>\n<tr>\n<td>!</td>\n<td>逻辑非</td>\n<td>非<code>false</code>则<code>true</code>，非<code>true</code>则<code>false</code></td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>双与，短路与</td>\n<td>左边为false，则右边就不看</td>\n</tr>\n<tr>\n<td>||</td>\n<td>双或，短路或</td>\n<td>左边为true，则右边就不看</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* 用来连接两个布尔类型结果的运算符（!除外），以判断程序中的表达式是否成立，判断的结果是 true 或 false。\n\n* 短路逻辑运算符\n     符号   作用    说明\n     &amp;&amp;    短路作用和&amp;相同，但是有短路效果\n     ||    短路或  作用和|相同，但是有短路效果\n     \n     在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，\n     短路与操作就有这样的效果，可以提高效率。\n     同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算\n     \n     逻辑与&amp;，无论左边真假，右边都要执行。\n     短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。\n     逻辑或|，无论左边真假，右边都要执行。\n     短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</code></pre>\n\n<h4 id=\"8-5-三元运算符\"><a href=\"#8-5-三元运算符\" class=\"headerlink\" title=\"8.5    三元运算符\"></a>8.5    三元运算符</h4><ul>\n<li>运算符格式关系表达式 ? 表达式1 : 表达式2;</li>\n<li>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。<pre><code> 其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。\n</code></pre>\n</li>\n</ul>\n<h4 id=\"8-6-位运算符\"><a href=\"#8-6-位运算符\" class=\"headerlink\" title=\"8.6    位运算符\"></a>8.6    位运算符</h4><table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>按位与，同为1则为1,否则为0</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或，只要有一个为1则为1,否则为0</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反，将操作数的每个位（包括符号位）全部取反</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或,相同时返回0，不同时返回1</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移运算符</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移运算符</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号右移运算符</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">位运算是将数字转换成为二进制然后再进行运算，它的运算过程都是基于补码的。\n\n思考：如何区分&amp;,|,^是逻辑运算符还是位运算符？\n\n如果操作数是boolean类型，就是逻辑运算符，如果操作数是整数，那么就位运算符。</code></pre>\n\n<h5 id=\"8-6-1-左移：-lt-lt\"><a href=\"#8-6-1-左移：-lt-lt\" class=\"headerlink\" title=\"8.6.1    左移：&lt;&lt;\"></a>8.6.1    左移：&lt;&lt;</h5><p>运算规则：左移几位就相当于乘以2的几次方</p>\n<p><strong>注意：</strong>当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p>\n<h5 id=\"8-6-2-右移：-gt-gt\"><a href=\"#8-6-2-右移：-gt-gt\" class=\"headerlink\" title=\"8.6.2    右移：&gt;&gt;\"></a>8.6.2    右移：&gt;&gt;</h5><p>快速运算：类似于除以2的n次，如果不能整除，<strong>向下取整</strong></p>\n<h5 id=\"8-6-3-无符号右移：-gt-gt-gt\"><a href=\"#8-6-3-无符号右移：-gt-gt-gt\" class=\"headerlink\" title=\"8.6.3    无符号右移：&gt;&gt;&gt;\"></a>8.6.3    无符号右移：&gt;&gt;&gt;</h5><p>运算规则：往右移动后，左边空出来的位直接补0，不看符号位</p>\n<p>正数：和右移一样</p>\n<p>负数：右边移出去几位，左边补几个0，结果变为正数</p>\n<h5 id=\"8-6-4-按位与：-amp\"><a href=\"#8-6-4-按位与：-amp\" class=\"headerlink\" title=\"8.6.4    按位与：&amp;\"></a>8.6.4    按位与：&amp;</h5><p>运算规则：对应位都是1才为1</p>\n<pre><code>             1 &amp; 1 结果为1\n \n             1 &amp; 0 结果为0\n</code></pre>\n<p>​                 0 &amp; 1 结果为0</p>\n<p>​                 0 &amp; 0 结果为0</p>\n<h5 id=\"8-6-5-按位或：\"><a href=\"#8-6-5-按位或：\" class=\"headerlink\" title=\"8.6.5    按位或：|\"></a>8.6.5    按位或：|</h5><p>运算规则：对应位只要有1即为1</p>\n<p> 1 | 1 结果为1</p>\n<p> 1 | 0 结果为1</p>\n<p> 0 | 1 结果为1</p>\n<p> 0 &amp; 0 结果为0</p>\n<h5 id=\"8-6-6-按位异或：\"><a href=\"#8-6-6-按位异或：\" class=\"headerlink\" title=\"8.6.6    按位异或：^\"></a>8.6.6    按位异或：^</h5><p> 运算规则：对应位一个为1一个为0，才为1</p>\n<p> 1 ^ 1 结果为0</p>\n<p> 1 ^ 0 结果为1</p>\n<p> 0 ^ 1 结果为1</p>\n<p> 0 ^ 0 结果为0</p>\n<h5 id=\"8-6-7-按位取反\"><a href=\"#8-6-7-按位取反\" class=\"headerlink\" title=\"8.6.7    按位取反\"></a>8.6.7    按位取反</h5><p>运算规则：~0就是1</p>\n<p> ~1就是0</p>\n<h4 id=\"8-7-运算符优先级\"><a href=\"#8-7-运算符优先级\" class=\"headerlink\" title=\"8.7    运算符优先级\"></a>8.7    运算符优先级</h4><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>()</td>\n</tr>\n<tr>\n<td>2</td>\n<td>!、+、-、~、++、–</td>\n</tr>\n<tr>\n<td>3</td>\n<td><em>、/、%</em></td>\n</tr>\n<tr>\n<td>4</td>\n<td>+、-</td>\n</tr>\n<tr>\n<td>5</td>\n<td>«、»、&gt;&gt;&gt;</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td>\n</tr>\n<tr>\n<td>7</td>\n<td>==、!=</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>9</td>\n<td>^</td>\n</tr>\n<tr>\n<td>10</td>\n<td>|</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n</tr>\n<tr>\n<td>12</td>\n<td>||</td>\n</tr>\n<tr>\n<td>13</td>\n<td>=、+=、-=、=、/=、&amp;=、|=、^=、~=、«=、»=、&gt;&gt;&gt;=</td>\n</tr>\n</tbody></table>\n<p>要求:</p>\n<ul>\n<li>表达式不要太复杂</li>\n<li>对于比较复杂的表达式，要求<strong>使用()来提升运算符的优先级</strong>。</li>\n<li>一般而言，单目运算符优先级较高，赋值运算符优先级较低。</li>\n<li>算术运算符优先级较高，关系和逻辑运算符优先级较低。</li>\n</ul>\n<h3 id=\"九、高级输出语句\"><a href=\"#九、高级输出语句\" class=\"headerlink\" title=\"九、高级输出语句\"></a>九、高级输出语句</h3><h4 id=\"9-1-转义字符的使用\"><a href=\"#9-1-转义字符的使用\" class=\"headerlink\" title=\"9.1    转义字符的使用\"></a>9.1    转义字符的使用</h4><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\t</td>\n<td>表示一个制表符(tab键)</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>表示换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>表示回车</td>\n</tr>\n<tr>\n<td>\\ ‘</td>\n<td>表示一个单引号</td>\n</tr>\n<tr>\n<td>\\ “</td>\n<td>表示一个双引号</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>表示一个\\</td>\n</tr>\n</tbody></table>\n<h4 id=\"9-2-格式化输出\"><a href=\"#9-2-格式化输出\" class=\"headerlink\" title=\"9.2    格式化输出\"></a>9.2    格式化输出</h4><p>使用<code>System.out.printf</code>方法传入占位符还能实现格式化输出。常见的格式化占位符如下:</p>\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>含义</th>\n<th>示例</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%d</td>\n<td>表示整数(byte,short,int,long类型)</td>\n<td>System.out.printf(“我今年%d岁了”,18);</td>\n<td>我今年18岁了</td>\n</tr>\n<tr>\n<td>%nd</td>\n<td>如果整数不够n位，前面使用空格补齐</td>\n<td>System.out.printf(“我是第%3d号选手”,8);</td>\n<td>我是第 8号选手</td>\n</tr>\n<tr>\n<td>%0nd</td>\n<td>如果整数不够n位，前面使用0补齐</td>\n<td>System.out.printf(“我是第%03d号选手”,8);</td>\n<td>我是第008号选手</td>\n</tr>\n<tr>\n<td>%-nd</td>\n<td>如果整数不够n位，后面使用空格补齐</td>\n<td>System.out.printf(“我是第%-3d号选手”,8);</td>\n<td>我是第8 号选手</td>\n</tr>\n<tr>\n<td>%.nf</td>\n<td>表示浮点数四舍五入保留到小数点后n位</td>\n<td>System.out.printf(“您卡上的余额是%.2f元”,34.5678);</td>\n<td>您卡上的余额是34.57元</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>表示单个字符</td>\n<td>System.out.printf(“我的幸运字母是%c”,’s’);</td>\n<td>我的幸运字母是s</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>表示字符串</td>\n<td>System.out.printf(“我的名字是是%s”,”张三”);</td>\n<td>我的名字是张三</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>表示%</td>\n<td>System.out.printf(“我的名字是是%%d”);</td>\n<td>我的名字是%d</td>\n</tr>\n</tbody></table>\n<h3 id=\"十、几个关键字\"><a href=\"#十、几个关键字\" class=\"headerlink\" title=\"十、几个关键字\"></a>十、几个关键字</h3><h4 id=\"10-1-class类\"><a href=\"#10-1-class类\" class=\"headerlink\" title=\"10.1    class类\"></a>10.1    class类</h4><ul>\n<li>class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。</li>\n<li>类是面向对象的程序设计方法的基本构造单位。</li>\n<li>类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例.</li>\n</ul>\n<h4 id=\"10-2-native-本地\"><a href=\"#10-2-native-本地\" class=\"headerlink\" title=\"10.2    native 本地\"></a>10.2    native 本地</h4><p>native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的<br>可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：<br>１、在Java中声明native()方法，然后编译；<br>２、用javah产生一个.h文件；<br>３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；<br>４、将第三步的.cpp文件编译成动态链接库文件；<br>５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。 </p>\n<h4 id=\"10-3-synchronized\"><a href=\"#10-3-synchronized\" class=\"headerlink\" title=\"10.3    synchronized\"></a>10.3    synchronized</h4><ul>\n<li>synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 </li>\n<li>synchronized 关键字可防止代码的关键代码段一次被多个线程执行。 </li>\n<li>如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 </li>\n<li>如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。 </li>\n<li>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</li>\n</ul>\n<h4 id=\"10-4-static、abstract、final、implements\"><a href=\"#10-4-static、abstract、final、implements\" class=\"headerlink\" title=\"10.4    static、abstract、final、implements\"></a>10.4    static、abstract、final、implements</h4><p>在面向对象详细介绍</p>\n","text":"一、终端命令（Windows） 命令 说明 盘符名称： 盘符切换，d: 表示切换到d盘 dir 查看当前路径下的内容 cd 查看当前路径 cd 目录 进入单级目录 cd .. 回退到上一-级目录 cd\\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 命令 说明 ca...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%EF%BC%88Windows%EF%BC%89\"><span class=\"toc-text\">一、终端命令（Windows）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%B3%A8%E9%87%8A%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">二、注释分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%85%AB%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">三、八大数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%B8%89%E5%A4%A7%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">四、三大引用数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">五、数据转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">六、标识符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E8%BF%9B%E5%88%B6%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">七、进制（了解）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%AD%97%E5%85%B1%E6%9C%89%E5%9B%9B%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">7.1    计算机中，数字共有四种不同进制的表示方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%8D%E5%90%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">7.2    代码中不同进制的表示方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">7.3    进制转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">7.4    计算机存储单位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-%E6%95%B0%E6%8D%AE%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">7.5    数据二进制表示</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">八、运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">8.1    运算符和表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.2    算术运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.3    赋值运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.4    关系运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.4    逻辑运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-5-%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.5    三元运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-6-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">8.6    位运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-1-%E5%B7%A6%E7%A7%BB%EF%BC%9A-lt-lt\"><span class=\"toc-text\">8.6.1    左移：&lt;&lt;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-2-%E5%8F%B3%E7%A7%BB%EF%BC%9A-gt-gt\"><span class=\"toc-text\">8.6.2    右移：&gt;&gt;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-3-%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB%EF%BC%9A-gt-gt-gt\"><span class=\"toc-text\">8.6.3    无符号右移：&gt;&gt;&gt;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-4-%E6%8C%89%E4%BD%8D%E4%B8%8E%EF%BC%9A-amp\"><span class=\"toc-text\">8.6.4    按位与：&amp;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-5-%E6%8C%89%E4%BD%8D%E6%88%96%EF%BC%9A\"><span class=\"toc-text\">8.6.5    按位或：|</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-6-%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96%EF%BC%9A\"><span class=\"toc-text\">8.6.6    按位异或：^</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-6-7-%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D\"><span class=\"toc-text\">8.6.7    按位取反</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-7-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">8.7    运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E9%AB%98%E7%BA%A7%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">九、高级输出语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">9.1    转义字符的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">9.2    格式化输出</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">十、几个关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-class%E7%B1%BB\"><span class=\"toc-text\">10.1    class类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-native-%E6%9C%AC%E5%9C%B0\"><span class=\"toc-text\">10.2    native 本地</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-3-synchronized\"><span class=\"toc-text\">10.3    synchronized</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-4-static%E3%80%81abstract%E3%80%81final%E3%80%81implements\"><span class=\"toc-text\">10.4    static、abstract、final、implements</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"流程控制语句","uid":"7689509bc540e79b176cff8111263e2f","slug":"02-流程控制语句","date":"2021-09-13T14:34:32.000Z","updated":"2021-09-14T16:05:57.808Z","comments":true,"path":"api/articles/02-流程控制语句.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:15-224.jpg","text":"一、顺序结构顺序结构就是从上到下逐行执行，中间没有任何跳转和判断。 public static void main(String[] args)&#123; System.out.println(&quot;&quot;); System.out.println(&quot;&q...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{}}