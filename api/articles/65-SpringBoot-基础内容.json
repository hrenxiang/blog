{"title":"SpringBoot 基础内容","uid":"1622936a4b6ba96f2723411bb290759b","slug":"65-SpringBoot-基础内容","date":"2021-09-13T15:41:32.000Z","updated":"2021-09-15T10:46:54.437Z","comments":true,"path":"api/articles/65-SpringBoot-基础内容.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","content":"<h4 id=\"1、Spirng-Boot-概念\"><a href=\"#1、Spirng-Boot-概念\" class=\"headerlink\" title=\"1、Spirng Boot 概念\"></a>1、Spirng Boot 概念</h4><p>① Spring 框架</p>\n<p>最核心的特性就是依赖注入DI（Dependency Injecttion）和控制反转IOC（Inversion Of Control）。如果你能够合理的使用DI和IOC，可以开发出松耦合、扩展性好的的应用程序。</p>\n<p>② Spring MVC</p>\n<p>Spring MVC提供了一种友好的方式来开发Web应用程序。 通过使用诸如Dispatcher Servlet，ModelAndView和View Resolver，可以轻松开发Web应用程序。</p>\n<p>③ Spring Boot</p>\n<p>Spring 和 Spring MVC最大的弊病在于存在大量的配置，并且这些配置在不同的项目中具有很高的相似性。从而导致重复配置，繁琐而且杂乱！</p>\n<p>Spring Boot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品，其最主要作用就是帮助开发人员快速的构建庞大的spring项目，并且尽可能的<strong>减少一切xml配置</strong>，做到<strong>开箱即用</strong>，迅速上手，让开发人员关注业务而非配置。</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/Spirng-Boot-1.png\" alt=\"image-20210809205509781\" style=\"zoom:67%;\" />\n</div>\n\n\n\n<h4 id=\"2、Spring-Boot-特点及目的\"><a href=\"#2、Spring-Boot-特点及目的\" class=\"headerlink\" title=\"2、Spring Boot 特点及目的\"></a>2、Spring Boot 特点及目的</h4><p>主要特点:</p>\n<ol>\n<li><p>自动配置 : 不需要再关注各个框架的整合配置, springboot全部已经配置好了</p>\n</li>\n<li><p>起步依赖 : 我们在需要使用某个框架的时候, 直接添加这个框架的启动器依赖即可 , 不需要在关注jar包的冲突和整合</p>\n</li>\n</ol>\n<p>设计目的： </p>\n<ol>\n<li>用来简化 Spring 应用的初始搭建以及开发过程。</li>\n<li>从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目所使用。</li>\n<li>它使用 “习惯优于配置”的理念让你的项目快速运行起来。</li>\n<li>spring boot 其实不是什么新的框架，它配置了很多框架的使用，像 maven 整合了所有的 jar 包，spring boot 整合了所有的框架</li>\n</ol>\n<p>总结一下及几点：</p>\n<ol>\n<li>为所有 Spring 开发提供一个更快更广泛的入门体验。</li>\n<li>零配置。无冗余代码生成和XML 强制配置，遵循“约定大于配置” 。</li>\n<li>集成了大量常用的第三方库的配置， Spring Boot 应用为这些第三方库提供了几乎可以零配置的开箱即用的能力。</li>\n<li>提供一系列大型项目常用的非功能性特征，如嵌入服务器等。</li>\n</ol>\n<p>好处：</p>\n<ol>\n<li>简单，快捷，方便</li>\n<li>不需要关注各种复杂的整合配置 , 也不用关注各个库之间的依赖及冲突问题，专注业务逻辑的开发。</li>\n</ol>\n<h4 id=\"3、Spring-Boot-快速入门\"><a href=\"#3、Spring-Boot-快速入门\" class=\"headerlink\" title=\"3、Spring Boot 快速入门\"></a>3、Spring Boot 快速入门</h4><h5 id=\"1、创建一个-maven-工程\"><a href=\"#1、创建一个-maven-工程\" class=\"headerlink\" title=\"1、创建一个 maven 工程\"></a>1、创建一个 maven 工程</h5><h5 id=\"2、导入依赖\"><a href=\"#2、导入依赖\" class=\"headerlink\" title=\"2、导入依赖\"></a>2、导入依赖</h5><p>SpringBoot 可以帮我们方便的管理项目依赖 , 在 Spring Boot 提供了一个名为 **spring-boot-starter-parent ** 的工程，里面已经对各种常用依赖的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，==需要什么依赖，直接引入坐标(不需要添加版本)==即可！</p>\n<h5 id=\"2-1、添加父工程依赖\"><a href=\"#2-1、添加父工程依赖\" class=\"headerlink\" title=\"2.1、添加父工程依赖\"></a>2.1、添加父工程依赖</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.2.RELEASE&lt;&#x2F;version&gt;\n    &lt;!--&lt;relativePath&#x2F;&gt;--&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<p>注意：如果你先创建了一个 maven 工程 如，springboot 作为你接下来学习 spring boot 时的总代码目录，而又在 spring boot 下创建了目前的入门工程，虽然我们在创建入门工程时没有继承 作为总目录的工程，但是在添加 spring boot 启动器作为父工程时，还是会报错，这时我们只需要在 父工程的依赖中加入 <code>&lt;relativePath/&gt;</code></p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-boot-2.png\" alt=\"image-20210809211433236\" style=\"zoom:80%;\" />\n</div>\n\n\n\n<h5 id=\"2-2、添加-web启动器\"><a href=\"#2-2、添加-web启动器\" class=\"headerlink\" title=\"2.2、添加 web启动器\"></a>2.2、添加 web启动器</h5><p>为了让Spring Boot帮我们完成各种自动配置，我们必须引入Spring Boot提供的自动配置依赖，我们称为启动器。因为我们是web项目，这里我们引入web启动器，在 pom.xml 文件中加入如下依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>需要注意的是，我们并没有在这里指定版本信息 , 当我们添加好启动器之后我们发现项目中已经依赖了大量的Jar包</p>\n<h5 id=\"2-3、配置JDK版本\"><a href=\"#2-3、配置JDK版本\" class=\"headerlink\" title=\"2.3、配置JDK版本\"></a>2.3、配置JDK版本</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;properties&gt;\n    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<p>思考: 为什么我们这里仅仅配置了这么一个变量 , 项目的JDK版本就会改变呢 ?<br>因为jdk插件已经在父工程中定义好了 , 默认会读取${java.version}变量值</p>\n<h5 id=\"2-4、完整的pom-xml文件\"><a href=\"#2-4、完整的pom-xml文件\" class=\"headerlink\" title=\"2.4、完整的pom.xml文件\"></a>2.4、完整的pom.xml文件</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.2.2.RELEASE&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;groupId&gt;com.atguigu&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springboot_01&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n    &lt;&#x2F;properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n\n\n<h5 id=\"2-5-创建启动器，编写controller\"><a href=\"#2-5-创建启动器，编写controller\" class=\"headerlink\" title=\"2.5 创建启动器，编写controller\"></a>2.5 创建启动器，编写controller</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n&#x2F;&#x2F;启动类（启动tomcat加载springboot）\n@SpringBootApplication\npublic class Application &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;Application.class 自己的类\n        &#x2F;&#x2F;args main方法中的参数\n        SpringApplication.run(Application.class,args);\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.controller;\nimport com.atguigu.properties.DataSourceProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController &#123;\n\n    @Autowired\n    private DataSourceProperties dataSourceProperties;\n\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String sayHello()&#123;\n        return &quot;hello spring boot&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>根据控制台信息我们可以知道默认的端口号 是 8080，（我这里是因为 我在application.yaml 中修改了端口号，默认的确是8080）</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-boot-4.png\" alt=\"image-20210809212039732\"></p>\n<p>打开浏览器,访问：<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></p>\n<h4 id=\"4、Spring-Boot-入门思考\"><a href=\"#4、Spring-Boot-入门思考\" class=\"headerlink\" title=\"4、Spring Boot 入门思考\"></a>4、Spring Boot 入门思考</h4><p>:question: 问题一：为什么我们在添加启动器的时候不需要在启动器的坐标中指定版本？</p>\n<p>答案：因为我们指定了项目的父工程，在spring-boot-starter-parent中已经通过Maven的版本锁定了Jar包的版本，所以就不需要再指定了。</p>\n<p>图片</p>\n<p>:question: 问题二：为什么我们就添加一个启动器依赖，项目就可以运行起来了，运行项目所需要的Jar包从何而来？</p>\n<p>答案：因为我们添加了这个启动器的依赖，它已经把自己运行所需要的必要包集成在这个启动器中，通过Maven的依赖传递性，将这些包都依赖到咱们的项目里了。</p>\n<p>图片</p>\n<h4 id=\"5、配置文件详解\"><a href=\"#5、配置文件详解\" class=\"headerlink\" title=\"5、配置文件详解\"></a>5、配置文件详解</h4><h5 id=\"5-1、属性配置文件\"><a href=\"#5-1、属性配置文件\" class=\"headerlink\" title=\"5.1、属性配置文件\"></a>5.1、属性配置文件</h5><h5 id=\"5-2、YAML-配置文件\"><a href=\"#5-2、YAML-配置文件\" class=\"headerlink\" title=\"5.2、YAML 配置文件\"></a>5.2、YAML 配置文件</h5><h5 id=\"5-3、多环境-profile-切换配置\"><a href=\"#5-3、多环境-profile-切换配置\" class=\"headerlink\" title=\"5.3、多环境 profile 切换配置\"></a>5.3、多环境 profile 切换配置</h5>","text":"1、Spirng Boot 概念① Spring 框架 最核心的特性就是依赖注入DI（Dependency Injecttion）和控制反转IOC（Inversion Of Control）。如果你能够合理的使用DI和IOC，可以开发出松耦合、扩展性好的的应用程序。 ② Spri...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81Spirng-Boot-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1、Spirng Boot 概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81Spring-Boot-%E7%89%B9%E7%82%B9%E5%8F%8A%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">2、Spring Boot 特点及目的</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81Spring-Boot-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">3、Spring Boot 快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-maven-%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">1、创建一个 maven 工程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2、导入依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E6%B7%BB%E5%8A%A0%E7%88%B6%E5%B7%A5%E7%A8%8B%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.1、添加父工程依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E6%B7%BB%E5%8A%A0-web%E5%90%AF%E5%8A%A8%E5%99%A8\"><span class=\"toc-text\">2.2、添加 web启动器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E9%85%8D%E7%BD%AEJDK%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2.3、配置JDK版本</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4%E3%80%81%E5%AE%8C%E6%95%B4%E7%9A%84pom-xml%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.4、完整的pom.xml文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E5%99%A8%EF%BC%8C%E7%BC%96%E5%86%99controller\"><span class=\"toc-text\">2.5 创建启动器，编写controller</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81Spring-Boot-%E5%85%A5%E9%97%A8%E6%80%9D%E8%80%83\"><span class=\"toc-text\">4、Spring Boot 入门思考</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">5、配置文件详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1%E3%80%81%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1、属性配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2%E3%80%81YAML-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2、YAML 配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E5%A4%9A%E7%8E%AF%E5%A2%83-profile-%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5.3、多环境 profile 切换配置</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"RabbitMQ 基础内容","uid":"c45f5a44aa5e1bceb86c7aa31b1d0a34","slug":"66-RabbitMQ-基础内容","date":"2021-09-13T15:42:32.000Z","updated":"2021-09-15T10:46:48.980Z","comments":true,"path":"api/articles/66-RabbitMQ-基础内容.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"01、什么是消息中间件MQ全称为Message Queue， 消息队列(MQ)是一种应用程序对应用程序的通信方法。 介绍：消息队列就是基础数据结构中的 “先进先出” 的一种数据机构。想一下，生活中买东西，需要排队，先排的人先买消费，就是典型的“先进先出”。 消息传递：指的是程序之...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"消息队列","slug":"消息队列","count":2,"path":"api/categories/消息队列.json"}],"tags":[{"name":"消息队列","slug":"消息队列","count":2,"path":"api/tags/消息队列.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Nginx","uid":"af6a277a1f79cc7652a602f9f57ed64f","slug":"64-Nginx","date":"2021-09-13T15:40:32.000Z","updated":"2021-09-15T10:39:17.590Z","comments":true,"path":"api/articles/64-Nginx.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"01、Nginx 的介绍Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器 Nginx 支持热部署，几乎能做到 7*24 小时不间断运行，即使运行几个月也不需要重启，还能在不间断服务的情况下对软件进行热更新。 Nginx 最重要的考量是 性能 ，其占用内存少、并发能力...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/categories/Nginx.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}