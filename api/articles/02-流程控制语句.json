{"title":"流程控制语句","uid":"7689509bc540e79b176cff8111263e2f","slug":"02-流程控制语句","date":"2021-09-13T14:34:32.000Z","updated":"2021-09-14T16:05:57.808Z","comments":true,"path":"api/articles/02-流程控制语句.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:15-224.jpg","content":"<h3 id=\"一、顺序结构\"><a href=\"#一、顺序结构\" class=\"headerlink\" title=\"一、顺序结构\"></a>一、顺序结构</h3><p>顺序结构就是从上到下逐行执行，中间没有任何跳转和判断。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args)&#123;\n    System.out.println(&quot;&quot;);\n    System.out.println(&quot;&quot;);\n    System.out.println(&quot;&quot;);\n    System.out.println(&quot;&quot;);\n&#125;</code></pre>\n\n\n\n<h3 id=\"二、分支结构\"><a href=\"#二、分支结构\" class=\"headerlink\" title=\"二、分支结构\"></a>二、分支结构</h3><h4 id=\"2-1-if-语句\"><a href=\"#2-1-if-语句\" class=\"headerlink\" title=\"2.1    if 语句\"></a>2.1    if 语句</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(条件表达式)&#123;  &#x2F;&#x2F; 条件表达式必须是一个布尔类型的值\n      语句体;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n    \n    首先判断条件表达式，看其结果是true还是false\n    \n    如果是true就执行语句体\n    \n    如果是false就不执行</code></pre>\n\n<h4 id=\"2-2-if-…-else-…-语句\"><a href=\"#2-2-if-…-else-…-语句\" class=\"headerlink\" title=\"2.2    if … else … 语句\"></a>2.2    if … else … 语句</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(关系表达式) &#123; \n      语句体1;\n&#125;else &#123;\n      语句体2;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n\n\t首先判断关系表达式看其结果是true还是false\n\n    如果是true就执行语句体1\n\n    如果是false就执行语句体2</code></pre>\n\n<h4 id=\"2-3-if-…-else-if-…-else-…-语句\"><a href=\"#2-3-if-…-else-if-…-else-…-语句\" class=\"headerlink\" title=\"2.3    if … else if … else … 语句\"></a>2.3    if … else if … else … 语句</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (判断条件1) &#123;\n      执行语句1;\n&#125; else if (判断条件2) &#123;\n      执行语句2;\n&#125;\n...\n&#125;else if (判断条件n) &#123;\n     执行语句n;\n&#125; else &#123;\n      执行语句n+1;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n    \n\t首先判断关系表达式1看其结果是true还是false\n\n    如果是true就执行语句体1，然后结束当前多分支\n\n    如果是false就继续判断关系表达式2看其结果是true还是false\n\n    如果是true就执行语句体2，然后结束当前多分支\n\n    如果是false就继续判断关系表达式…看其结果是true还是false\n\n    …\n\n    如果没有任何关系表达式为true，就执行语句体n+1，然后结束当前多分支。</code></pre>\n\n<h4 id=\"2-4-switch-…-case-…-语句\"><a href=\"#2-4-switch-…-case-…-语句\" class=\"headerlink\" title=\"2.4    switch … case … 语句\"></a>2.4    switch … case … 语句</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">switch(表达式)&#123;\n    case 常量值1:\n     语句块1;\n        【break;】\n    case 常量值2:\n        语句块2;\n        【break;】   \n    。。。\n   【default:\n        语句块n+1;\n        【break;】\n     】\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行过程\n（1）入口\n\t\n\t当switch(表达式)的值与case后面的某个常量值匹配，就从这个case进入；\n\t\n\t当switch(表达式)的值与case后面的所有常量值都不匹配，寻找default分支进入;不管\tdefault在哪里\n\n（2）一旦从“入口”进入switch，就会顺序往下执行，直到遇到“出口”，即可能发生贯穿\n\n（3）出口\n\n\t自然出口：遇到了switch的结束&#125;\n\n\t中断出口：遇到了break等\n        \n（4）在switch语句中，如果case的后面不写break，将出现穿透现象，\n    也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，\n    直到遇到break或者整个switch语句结束，switch语句执行终止。</code></pre>\n\n\n\n<h3 id=\"三、循环结构\"><a href=\"#三、循环结构\" class=\"headerlink\" title=\"三、循环结构\"></a>三、循环结构</h3><h4 id=\"3-1-while循环\"><a href=\"#3-1-while循环\" class=\"headerlink\" title=\"3.1    while循环\"></a>3.1    while循环</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (循环条件语句①) &#123;\n    循环体语句②；\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n\n第一步：执行循环条件语句①，看循环条件语句的值是true，还是false；\n       如果是true，执行第二步；\n       如果是false，循环语句中止，循环不再执行。\n第二步：执行循环体语句②；\n第三步：循环体语句执行完后，重新从第一步开始再执行一遍</code></pre>\n\n<h5 id=\"3-1-2-while循环语句扩展格式\"><a href=\"#3-1-2-while循环语句扩展格式\" class=\"headerlink\" title=\"3.1.2    while循环语句扩展格式\"></a>3.1.2    while循环语句扩展格式</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">初始化语句①；\nwhile (循环条件语句②) &#123;\n    循环体语句③；\n    迭代语句④；\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n第一步：执行初始化语句①，完成循环变量的初始化；\n第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；\n\t   如果是true，执行第三步；\n\t   如果是false，循环语句中止，循环不再执行。\n第三步：执行循环体语句③\n第四步：执行迭代语句④，针对循环变量重新赋值\n第五步：根据循环变量的新值，重新从第二步开始再执行一遍</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">案例：遍历1-100之间的偶数\nint num &#x3D; 2;\nwhile(num&lt;&#x3D;100)&#123;\n    System.out.println(num);\n    num+&#x3D;2;\n&#125;</code></pre>\n\n<h4 id=\"3-2-do-…-while-…-循环\"><a href=\"#3-2-do-…-while-…-循环\" class=\"headerlink\" title=\"3.2    do … while … 循环\"></a>3.2    do … while … 循环</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">do &#123;\n    循环体语句①；\n&#125; while (循环条件语句②)；</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n第一步：执行循环体语句①；\n第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；\n\t   如果是true，执行第三步；\n\t   如果是false，循环语句终止，循环不再执行。\n第三步：循环条件语句执行完后，重新从第一步开始再执行一遍\n    \n    \n注意：\n（1）while(循环条件)中循环条件必须是boolean类型\n\n（2）do&#123;&#125;while();最后有一个分号\n\n（3）do...while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</code></pre>\n\n<h5 id=\"3-2-1-do-…-while-…-循环语句扩展格式\"><a href=\"#3-2-1-do-…-while-…-循环语句扩展格式\" class=\"headerlink\" title=\"3.2.1    do … while … 循环语句扩展格式\"></a>3.2.1    do … while … 循环语句扩展格式</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">初始化语句①\ndo &#123;\n    循环体语句②；\n    迭代语句③；\n&#125; while (循环条件语句④)；</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程\n第一步：执行初始化语句①，完成循环变量的初始化；\n第二步：执行循环体语句②；\n第三步：执行迭代语句③，针对循环变量重新赋值；\n第四步：执行循环条件语句④，看循环条件语句的值是true，还是false；\n\t   如果是true，根据循环变量的新值，重新从第二步开始再执行一遍；\n\t   如果是false，循环语句中止，循环不再执行</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args)&#123;\n    &#x2F;&#x2F;随机生成一个100以内的整数\n    &#x2F;*\n        Math.random() &#x3D;&#x3D;&gt; [0,1)的小数\n        Math.random()* 100 &#x3D;&#x3D;&gt; [0,100)的小数\n        (int)(Math.random()* 100) &#x3D;&#x3D;&gt; [0,100)的整数\n        *&#x2F;\n    int num &#x3D; (int)(Math.random()* 100);\n    &#x2F;&#x2F;System.out.println(num);\n\n    &#x2F;&#x2F;声明一个变量，用来存储猜的次数\n    int count &#x3D; 0;\n\n    java.util.Scanner input &#x3D; new java.util.Scanner(System.in);\n    int guess;&#x2F;&#x2F;提升作用域\n    do&#123;\n        System.out.print(&quot;请输入100以内的整数：&quot;);\n        guess &#x3D; input.nextInt();\n\n        &#x2F;&#x2F;输入一次，就表示猜了一次\n        count++;\n\n        if(guess &gt; num)&#123;\n            System.out.println(&quot;大了&quot;);\n        &#125;else if(guess &lt; num)&#123;\n            System.out.println(&quot;小了&quot;);\n        &#125;\n    &#125;while(num !&#x3D; guess);\n\n    System.out.println(&quot;一共猜了：&quot; + count+&quot;次&quot;);\n\n&#125;</code></pre>\n\n<h4 id=\"3-3-for-循环\"><a href=\"#3-3-for-循环\" class=\"headerlink\" title=\"3.3    for 循环\"></a>3.3    for 循环</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(初始化语句①; 循环条件语句②; 迭代语句④)&#123;\n    循环体语句③\n&#125;\nfor(;;)&#123;\n    循环体语句块；&#x2F;&#x2F;如果循环体中没有跳出循环体的语句，那么就是死循环\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">注意：\n\n（1）for(;;)中的两个；是不能多也不能少\n\n（2）循环条件必须是boolean类型\n\n（3）如果循环条件语句②省略的话，就默认为循环条件成立</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行流程：\n\n第一步：执行初始化语句①，完成循环变量的初始化；\n第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；\n如果是true，执行第三步；\n如果是false，循环语句中止，循环不再执行。\n第三步：执行循环体语句③\n第四步：执行迭代语句④，针对循环变量重新赋值\n第五步：根据循环变量的新值，重新从第二步开始再执行一遍</code></pre>\n\n<h5 id=\"3-3-1-for-…-each-…-循环\"><a href=\"#3-3-1-for-…-each-…-循环\" class=\"headerlink\" title=\"3.3.1    for … each … 循环\"></a>3.3.1    for … each … 循环</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for ( 变量类型  变量名 : 数组名 ) &#123;\n    \n    需要执行的循环语句;\n \n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不使用下标变量就可以顺序地遍历整个数组</p></blockquote>\n<h4 id=\"3-4-嵌套循环\"><a href=\"#3-4-嵌套循环\" class=\"headerlink\" title=\"3.4    嵌套循环\"></a>3.4    嵌套循环</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">所谓嵌套循环，是指一个循环的循环体是另一个循环。\n比如for循环里面还有一个for循环，就是嵌套循环。\n总共的循环次数&#x3D;外循环次数*内循环次数。\n当然可以是三种循环任意互相嵌套。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;\n    for(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;\n          循环体语句⑤;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">案例1：打印倒三角形\n🐟 🐟 🐟 🐟 🐟 \n 🐟 🐟 🐟 🐟 \n  🐟 🐟 🐟 \n   🐟 🐟 \n    🐟 \npublic class Test07 &#123;\n\tpublic static void main(String[] args)&#123;\n\t\tfor(int i&#x3D;1; i&lt;&#x3D;5; i++)&#123;&#x2F;&#x2F;控制行数\n\t\t\t&#x2F;*\n\t\t\t每一行有三件事：\n\t\t\t（1）打印n个空格\n\t\t\t（2）打印m个&quot; *&quot;\n\t\t\t（3）换行\n\t\t\t*&#x2F;\n\t\t\t&#x2F;&#x2F;（1）打印n个空格\n\t\t\t&#x2F;*\n\t\t\t第1行：0个，当i&#x3D;1, j应该让它第一次循环都不满足\tj&lt;i\n\t\t\t第2行：1个，当i&#x3D;2, j运行1次，j&#x3D;1\n\t\t\t第3行：2个，当i&#x3D;3, j运行2次，j&#x3D;1,2\n\t\t\t第4行：3个，当i&#x3D;4, j运行3次，j&#x3D;1,2,3\n\t\t\t第5行：4个，当i&#x3D;5, j运行4次，j&#x3D;1,2,3,4\n\t\t\t*&#x2F;\n\t\t\tfor(int j&#x3D;1; j&lt;i; j++)&#123;\n\t\t\t\tSystem.out.print(&quot; &quot;);\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F;（2）打印m个&quot; *&quot;\n\t\t\t&#x2F;*\n\t\t\t第1行：5个，当i&#x3D;1,j运行5次，j&#x3D;1,2,3,4,5\t\tj&lt;&#x3D;6-i\n\t\t\t第2行：4个，当i&#x3D;2,j运行4次，j&#x3D;1,2,3,4\n\t\t\t第3行：3个，当i&#x3D;3,j运行3次，j&#x3D;1,2,3\n\t\t\t第4行：2个，当i&#x3D;4,j运行2次，j&#x3D;1,2\n\t\t\t第5行：1个，当i&#x3D;5,j运行1次，j&#x3D;1\n\t\t\t*&#x2F;\n\t\t\tfor(int j&#x3D;1; j&lt;&#x3D;6-i; j++)&#123;\n\t\t\t\tSystem.out.print(&quot; *&quot;);\n\t\t\t&#125;\n\t\t\t\n\t\t\t&#x2F;&#x2F;（3）换行\n\t\t\tSystem.out.println();\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">案例2：打印『X』对称图形，效果如图所示：\n        🐅*****🐅\n        *🐅***🐅*\n        **🐅*🐅**\n        ***🐅***\n        **🐅*🐅**\n        *🐅***🐅*\n        🐅*****🐅\n    \npublic class Test08 &#123;\n\tpublic static void main(String[] args)&#123;\n\t\tfor(int i&#x3D;1; i&lt;&#x3D;7; i++)&#123;&#x2F;&#x2F;控制行数\n\t\t\t&#x2F;&#x2F;(1)打印该行的*或o\n\t\t\t&#x2F;*\n\t\t\t发现O+*的总个数是7个\n\t\t\t当i&#x3D;1, 当j&#x3D;1和j&#x3D;7的时候是O，其余的是* \n\t\t\t当i&#x3D;2, 当j&#x3D;2和j&#x3D;6的时候是O，其余的是* \n\t\t\t当i&#x3D;3, 当j&#x3D;3和j&#x3D;5的时候是O，其余的是* \n\t\t\t当i&#x3D;4, 当j&#x3D;4的时候是O，其余的是* \n\t\t\t当i&#x3D;5, 当j&#x3D;5和j&#x3D;3的时候是O，其余的是* \n\t\t\t当i&#x3D;6, 当j&#x3D;6和j&#x3D;2的时候是O，其余的是* \n\t\t\t当i&#x3D;7, 当j&#x3D;7和j&#x3D;1的时候是O，其余的是* \n\t\t\t*&#x2F;\n\t\t\tfor(int j&#x3D;1; j&lt;&#x3D;7; j++)&#123;\n\t\t\t\tif(i&#x3D;&#x3D;j || i&#x3D;&#x3D;8-j)&#123;\n\t\t\t\t\tSystem.out.print(&quot;O&quot;);\n\t\t\t\t&#125;else&#123;\n\t\t\t\t\tSystem.out.print(&quot;*&quot;);\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\t\n\t\t\t&#x2F;&#x2F;(2)每一行的最后一件事是换行\n\t\t\tSystem.out.println();\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"3-5-循环语句的区别\"><a href=\"#3-5-循环语句的区别\" class=\"headerlink\" title=\"3.5    循环语句的区别\"></a>3.5    循环语句的区别</h4><ol>\n<li>从循环次数角度分析 <ul>\n<li>do…while循环至少执行一次循环体语句</li>\n<li>for和while循环先循环条件语句是否成立，然后决定是否执行循环体，至少执行零次循环体语句</li>\n</ul>\n</li>\n<li>从循环变量的生命周期角度分析<ul>\n<li>for循环的循环变量在for()中声明的，在循环语句结束后，不可以被访问；</li>\n<li>while和do…while循环的循环变量因为在外面声明的，所以while和do…while结束后可以被继续使用的；</li>\n</ul>\n</li>\n<li>如何选择<ul>\n<li>遍历有明显的循环次数（范围）的需求，选择for循环</li>\n<li>遍历没有明显的循环次数（范围）的需求，循环while循环</li>\n<li>如果循环体语句块至少执行一次，可以考虑使用do…while循环</li>\n<li>本质上：三种循环之间是可以互相转换的，都能实现循环的功能</li>\n</ul>\n</li>\n<li>三种循环结构都具有四要素：<ul>\n<li>循环变量的初始化表达式</li>\n<li>循环条件</li>\n<li>循环变量的修改的迭代表达式</li>\n<li>循环体语句块</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-6-关键字：break\"><a href=\"#3-6-关键字：break\" class=\"headerlink\" title=\"3.6    关键字：break\"></a>3.6    关键字：break</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">使用场景：终止switch 或者 当前循环\n\n在选择结构switch语句中\n\n在循环语句中\n\n离开使用场景的存在是没有意义的</code></pre>\n\n<p>break用于，<strong>跳出所在的当前整个循环，到外层代码继续执行</strong>。</p>\n<p>不管是哪种循环，一旦在循环体中遇到break，系统将完全结束循环，开始执行循环之后的代码。 </p>\n<p>break不仅可以结束其所在的循环，还可结束其外层循环。此时需要在break后紧跟一个标签，这个标签用于标识一个外层循环。</p>\n<p>Java中的标签就是一个紧跟着英文冒号（:）的标识符。且它必须放在循环语句之前才有作用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class BreakTest\n&#123;\n　　public static void main(String[] args)&#123;\n　　　　&#x2F;&#x2F; 外层循环，outer作为标识符\n　　　　outer:\n　　　　for (int i &#x3D; 0 ; i &lt; 5 ; i++ )&#123;\n　　　　　　&#x2F;&#x2F; 内层循环\n　　　　　　for (int j &#x3D; 0; j &lt; 3 ; j++ )&#123;\n　　　　　　　　System.out.println(&quot;i的值为:&quot; + i + &quot; j的值为:&quot; + j);\n　　　　　　　　if (j &#x3D;&#x3D; 1)&#123;\n　　　　　　　　　　&#x2F;&#x2F; 跳出outer标签所标识的循环。\n　　　　　　　　　　　break outer;\n　　　　　　　　&#125;\n　　　　　　&#125;\n　　　　&#125;\n　　&#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>案例：从键盘输入一个大于1的自然数，判断它是否是素数 提示：素数是指大于1的自然数中，除了1和它本身以外不能再有其他因数的自然数，即某个素数n，在[2,n-1]范围内没有其他自然数可以把n整除</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class Test07BreakExer1&#123;\n    public static void main(String[] args)&#123;\n        java.util.Scanner input &#x3D; new java.util.Scanner(System.in);\n\n        int num;\n        while(true)&#123;\n            &#x2F;&#x2F;true是常量，常量是编译期间就可以确定的值\n            System.out.print(&quot;请输入一个大于1的自然数：&quot;);\n            num &#x3D; input.nextInt();\n\n            if(num&gt;1)&#123;\n                break;\n            &#125;\n        &#125;\n        System.out.println(&quot;num &#x3D; &quot; + num);\n\n        boolean flag &#x3D; true;&#x2F;&#x2F;假设num是素数\n\n        &#x2F;&#x2F;判断它是否是素数\n        for(int i&#x3D;2; i&lt;num; i++)&#123;\n            if(num % i &#x3D;&#x3D;0)&#123;&#x2F;&#x2F;num被某个i整除了，num就不是素数\n                System.out.println(num + &quot;不是素数&quot;);\n                flag &#x3D; false;\n                break;&#x2F;&#x2F;找到其中一个可以把num整除的数，就可以结束了，因为num已经可以判定不是素数了\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F;只有把[2,num-1]之间的所有数都检查过了，才能下定结论，num是素数\n        if(flag)&#123;\n            System.out.println(num + &quot;是素数&quot;);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>案例：从键盘输入不断输入整数，输入0表示结束，统计一共有几个正数、负数。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    java.util.Scanner input &#x3D; new java.util.Scanner(System.in);\n\n    int positive &#x3D; 0;\n    int negative &#x3D; 0;\n    while(true)&#123;\n        System.out.print(&quot;请输入整数（0）结束：&quot;);\n        int num &#x3D; input.nextInt();\n        if(num&#x3D;&#x3D;0)&#123;\n            break;\n        &#125;else if(num&gt;0)&#123;\n            positive++;\n        &#125;else&#123;\n            negative++;\n        &#125;\n    &#125;\n    System.out.println(&quot;正数：&quot; + positive + &quot;，负数：&quot; + negative);\n&#125;</code></pre>\n\n<h4 id=\"3-7-关键字：continue\"><a href=\"#3-7-关键字：continue\" class=\"headerlink\" title=\"3.7    关键字：continue\"></a>3.7    关键字：continue</h4><p>执行continue操作，跳出本次循环，从下一个迭代继续运行循环，内层循环执行完毕，外层代码继续运行。</p>\n<p>continue结束的是本次循环，将接着开始下一次循环。</p>\n<h4 id=\"3-8-return\"><a href=\"#3-8-return\" class=\"headerlink\" title=\"3.8    return\"></a>3.8    return</h4><p>return关键字并不是专门用于跳出循环的，return的功能是<strong>结束一个方法</strong>。 一旦在循环体内执行到一个return语句，return语句将会</p>\n<p>结束该方法，循环自然也随之结束。</p>\n<h3 id=\"四、综合案例\"><a href=\"#四、综合案例\" class=\"headerlink\" title=\"四、综合案例\"></a>四、综合案例</h3>","text":"一、顺序结构顺序结构就是从上到下逐行执行，中间没有任何跳转和判断。 public static void main(String[] args)&#123; System.out.println(&quot;&quot;); System.out.println(&quot;&q...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">一、顺序结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">二、分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-if-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.1    if 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-if-%E2%80%A6-else-%E2%80%A6-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.2    if … else … 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-if-%E2%80%A6-else-if-%E2%80%A6-else-%E2%80%A6-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.3    if … else if … else … 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-switch-%E2%80%A6-case-%E2%80%A6-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.4    switch … case … 语句</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三、循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.1    while循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-2-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E6%89%A9%E5%B1%95%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">3.1.2    while循环语句扩展格式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-do-%E2%80%A6-while-%E2%80%A6-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.2    do … while … 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-1-do-%E2%80%A6-while-%E2%80%A6-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E6%89%A9%E5%B1%95%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">3.2.1    do … while … 循环语句扩展格式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.3    for 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-1-for-%E2%80%A6-each-%E2%80%A6-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.3.1    for … each … 循环</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.4    嵌套循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.5    循环语句的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9Abreak\"><span class=\"toc-text\">3.6    关键字：break</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9Acontinue\"><span class=\"toc-text\">3.7    关键字：continue</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-return\"><span class=\"toc-text\">3.8    return</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">四、综合案例</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"03-数组","date":"2021-09-13T14:35:32.000Z","updated":"2021-09-14T15:52:56.160Z","comments":true,"path":"api/articles/03-数组.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog3.jpg","text":"一、容器 如果使用很多个变量来逐一保存数据，这样操作起来会非常的不便。把这80个数据想象成为80个鸡蛋，如果让你一个个的操作这些鸡蛋，你会非常的慌乱，此时我们可以使用一个篮子，将所有的鸡蛋(数据)全部存储到一个容器中，统一操作。 装鸡蛋用到的篮子我们可以称之为容器，容器里的一个个...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{}}