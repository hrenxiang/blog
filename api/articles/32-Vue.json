{"title":"Vue","uid":"5f258f833478a2a0e21ce42d19305683","slug":"32-Vue","date":"2021-09-13T15:09:32.000Z","updated":"2021-09-15T11:00:55.535Z","comments":true,"path":"api/articles/32-Vue.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h4 id=\"beginner-​Vue-基础要点\"><a href=\"#beginner-​Vue-基础要点\" class=\"headerlink\" title=\":beginner: ​Vue 基础要点\"></a>:beginner: ​Vue 基础要点</h4><h4 id=\"①-什么是框架\"><a href=\"#①-什么是框架\" class=\"headerlink\" title=\"① 什么是框架\"></a>① 什么是框架</h4><p>任何编程语言在最初的时候都是没有框架的，后来随着在实际开发过程中不断总结『经验』，积累『最佳实践』，慢慢的人们发现很多『特定场景』下的『特定问题』总是可以『套用固定解决方案』。</p>\n<p>于是有人把成熟的『固定解决方案』收集起来，整合在一起，就成了『框架』。</p>\n<p>对于Java程序来说，我们使用框架就是导入那些封装了『固定解决方案』的jar包，然后通过『配置文件』告诉框架做什么，就能够大大简化编码，提高开发效率。</p>\n<p>而对于JavaScript程序来说，我们使用框架就是导入那些封装了『固定解决方案』的『js文件』，然后在框架的基础上编码。</p>\n<p>==idea中前端绑定的那些代码爆红，在idea插件库中下载一个vue.js就可以了==</p>\n<h4 id=\"②-VueJs-介绍\"><a href=\"#②-VueJs-介绍\" class=\"headerlink\" title=\"② VueJs 介绍\"></a>② VueJs 介绍</h4><p>1. Vue (读音 /vjuː/，类似于<strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。</p>\n<p>2. Vue.js 是前端的主流框架之一，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n<p>3. 与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html\">现代化的工具链</a>以及各种<a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>4. 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n<p>5. 官网地址:<a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org/</a></p>\n<h4 id=\"③-VueJs-环境\"><a href=\"#③-VueJs-环境\" class=\"headerlink\" title=\"③ VueJs 环境\"></a>③ VueJs 环境</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. Vue框架的js文件获取\n\n   官网提供的下载地址：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js\n\n2. 创建空vue.js文件,将官网提供的vue.js文件的内容复制粘贴到本地vue.js文件中\n\n   &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"④-小结\"><a href=\"#④-小结\" class=\"headerlink\" title=\"④ 小结\"></a>④ 小结</h4><p>==VueJS是前端渐进式框架，让Html和JavaScript无缝的整合，实现了视图和模型的双向数据绑定（MVVM）。==</p>\n<h4 id=\"beginner-​MVVM-模式\"><a href=\"#beginner-​MVVM-模式\" class=\"headerlink\" title=\":beginner: ​MVVM 模式\"></a>:beginner: ​MVVM 模式</h4><h4 id=\"①-mvvm-简介\"><a href=\"#①-mvvm-简介\" class=\"headerlink\" title=\"① mvvm 简介\"></a>① mvvm 简介</h4><p>==MVVM是Model-View-ViewModel的简写==。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开</p>\n<p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model）</p>\n<p>MVVM是前端视图层的分层开发思想，主要是把每个页面，分成了M , V 和 VM 其中，VM是 MVVM 思想核心；</p>\n<p>因为VM 是 M 和 V 之间的调度者</p>\n<h4 id=\"②-mvvm-的调度关系\"><a href=\"#②-mvvm-的调度关系\" class=\"headerlink\" title=\"② mvvm 的调度关系\"></a>② mvvm 的调度关系</h4><div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/vue-mvvm-1.png\" alt=\"image-20210727143743410\" style=\"zoom:67%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/vue-mvvm-2.png\" alt=\"image-20210727144243327\" style=\"zoom:40%;\" />\n</div>\n\n<h4 id=\"③-小结\"><a href=\"#③-小结\" class=\"headerlink\" title=\"③ 小结\"></a>③ 小结</h4><p>MVVM 模式是视图和模型的双向数据绑定，通过ViewModel实现，当View发生变化，Model变化；当Model变化，View也相应的变化</p>\n<h4 id=\"beginner-​Vue-入门案例\"><a href=\"#beginner-​Vue-入门案例\" class=\"headerlink\" title=\":beginner: ​Vue 入门案例\"></a>:beginner: ​Vue 入门案例</h4><h4 id=\"①-导入vue-js文件\"><a href=\"#①-导入vue-js文件\" class=\"headerlink\" title=\"① 导入vue.js文件\"></a>① 导入vue.js文件</h4><h4 id=\"②-入门程序\"><a href=\"#②-入门程序\" class=\"headerlink\" title=\"② 入门程序\"></a>② 入门程序</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 将来 new 的Vue实例，会控制这个 元素中的所有内容 --&gt;\n&lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V  --&gt;\n&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    &#x2F;&#x2F; 2. 创建一个Vue的实例\n    &#x2F;&#x2F; 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数\n    &#x2F;&#x2F;  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者\n    var vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,  &#x2F;&#x2F; 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域\n        &#x2F;&#x2F; 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的\n        data: &#123; &#x2F;&#x2F; data 属性中，存放的是 el 中要用到的数据\n            msg: &#39;欢迎学习Vue&#39; &#x2F;&#x2F; 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"③-声明式渲染\"><a href=\"#③-声明式渲染\" class=\"headerlink\" title=\"③ 声明式渲染\"></a>③ 声明式渲染</h4><p>声明式是相对于『编程式』而言的。</p>\n<ul>\n<li>声明式：告诉框架做什么，具体操作由框架完成</li>\n<li>编程式：自己编写代码完成具体操作</li>\n</ul>\n<p>Vue对象和页面上的HTML标签确实是始终保持着关联的关系，同时Vue在背后确实是做了大量的工作。</p>\n<h4 id=\"beginner-模板语法\"><a href=\"#beginner-模板语法\" class=\"headerlink\" title=\":beginner: 模板语法\"></a>:beginner: 模板语法</h4><h4 id=\"①-插值\"><a href=\"#①-插值\" class=\"headerlink\" title=\"① 插值\"></a>① 插值</h4><p>数据绑定最常见的形式就是使用“Mustache”语法 ( 双大括号 ) 的文本插值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125; &lt;&#x2F;span&gt;</code></pre>\n\n<h4 id=\"②-插值-v-text\"><a href=\"#②-插值-v-text\" class=\"headerlink\" title=\"② 插值 v-text\"></a>② 插值 v-text</h4><p>v-text 输出文本内容，不会解析html元素：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    new Vue(&#123;\n        el:&quot;#app&quot;,\n        data:&#123;\n            message:&quot;&lt;h1&gt;hello world&lt;&#x2F;h1&gt;&quot;&#x2F;&#x2F;model\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"③-插值-v-html\"><a href=\"#③-插值-v-html\" class=\"headerlink\" title=\"③ 插值 v-html\"></a>③ 插值 v-html</h4><p>双大括号，v-text将数据解释为普通文本。为了输出真正的 HTML，你需要使用<a href=\"https://v3.cn.vuejs.org/api/directives.html#v-html\"><code>v-html</code> 指令</a>：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    new Vue(&#123;\n        el:&quot;#app&quot;,\n        data:&#123;\n            message:&quot;&lt;h1&gt;hello world&lt;&#x2F;h1&gt;&quot;&#x2F;&#x2F;model\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>在你的站点上动态渲染任意的 HTML 是非常危险的，因为它很容易导致 <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS 攻击</a>。请只对可信内容使用 HTML 插值，绝不要将用户提供的内容作为插值。</p>\n<h4 id=\"④-Attribute-中插值\"><a href=\"#④-Attribute-中插值\" class=\"headerlink\" title=\"④ Attribute 中插值\"></a>④ Attribute 中插值</h4><p>Mustache 语法不能在 HTML attribute 中使用，然而，可以使用 <a href=\"https://v3.cn.vuejs.org/api/directives.html#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-bind:id&#x3D;&quot;dynamicId&quot;&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<p>如果绑定的值是 <code>null</code> 或 <code>undefined</code>，那么该 attribute 将不会被包含在渲染的元素上。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 完整语法 --&gt;\n&lt;a v-bind:href&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;\n\n&lt;!-- 缩写 --&gt;\n&lt;a :href&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;\n\n&lt;!-- 动态参数的缩写 --&gt;\n&lt;a :[key]&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;</code></pre>\n\n<h4 id=\"⑤-使用javascript表达式\"><a href=\"#⑤-使用javascript表达式\" class=\"headerlink\" title=\"⑤ 使用javascript表达式\"></a>⑤ 使用javascript表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&#123;&#123; number + 1 &#125;&#125;\n\n&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;\n\n&#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;\n\n&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;</code></pre>\n\n\n\n<h4 id=\"beginner-​双向绑定-v-model\"><a href=\"#beginner-​双向绑定-v-model\" class=\"headerlink\" title=\":beginner: ​双向绑定 v-model\"></a>:beginner: ​双向绑定 v-model</h4><h4 id=\"①-需求\"><a href=\"#①-需求\" class=\"headerlink\" title=\"① 需求\"></a>① 需求</h4><p>使用vue赋值json数据，并显示到页面的输入框中（表单回显）。</p>\n<p> 测试：改变输入框的值，同时验证模型的数据发生改变。</p>\n<p> 测试：改变json数据，验证同时输入框的内容也发生改变。</p>\n<p>这就是MVVM模式</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;!-- v-bind:属性名 效果是从Vue对象渲染到页面 --&gt;\n    &lt;!-- v-model:属性名 效果不仅是从Vue对象渲染到页面，而且能够在页面上数据修改后反向修改Vue对象中的数据属性 --&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model:value&#x3D;&quot;vueValue&quot; &#x2F;&gt;\n\n    &lt;p&gt;&#123;&#123;vueValue&#125;&#125;&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    &#x2F;&#x2F; 创建Vue对象，挂载#app这个div标签\n    var app &#x3D; new Vue(&#123;\n        &quot;el&quot;:&quot;#app&quot;,\n        &quot;data&quot;:&#123;\n            &quot;vueValue&quot;:&quot;太阳当空照&quot;\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"②-页面效果\"><a href=\"#②-页面效果\" class=\"headerlink\" title=\"② 页面效果\"></a>② 页面效果</h4><p>p标签内的数据能够和文本框中的数据实现同步修改：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/vue7.png\" alt=\"images\"></p>\n<h4 id=\"③-扩展\"><a href=\"#③-扩展\" class=\"headerlink\" title=\"③ 扩展\"></a>③ 扩展</h4><p>1. v-model:value=”值” 可以简写成 v-model=”值”</p>\n<p>2. trim修饰符</p>\n<p>实际开发中，要考虑到用户在输入数据时，有可能会包含前后空格。而这些前后的空格对我们程序运行来说都是干扰因素，要去掉。在v-model后面加上.trim修饰符即可实现。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;vueValue&quot; &#x2F;&gt;</code></pre>\n\n<p>Vue会帮助我们在文本框失去焦点时自动去除前后空格。</p>\n<h4 id=\"beginner-条件渲染\"><a href=\"#beginner-条件渲染\" class=\"headerlink\" title=\":beginner:  条件渲染\"></a>:beginner:  条件渲染</h4><p>根据Vue对象中，数据属性的值来判断是否对HTML页面内容进行渲染。</p>\n<h4 id=\"①-v-if\"><a href=\"#①-v-if\" class=\"headerlink\" title=\"① v-if\"></a>① v-if</h4><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1 v-if&#x3D;&quot;awesome&quot;&gt;Vue is awesome!&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;h3&gt;if&lt;&#x2F;h3&gt;\n    &lt;img v-if&#x3D;&quot;flag&quot; src&#x3D;&quot;&#x2F;pro03-vue&#x2F;images&#x2F;one.jpg&quot; &#x2F;&gt;\n    &lt;img v-if&#x3D;&quot;!flag&quot; src&#x3D;&quot;&#x2F;pro03-vue&#x2F;images&#x2F;two.jpg&quot; &#x2F;&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    var app &#x3D; new Vue(&#123;\n        &quot;el&quot;:&quot;#app&quot;,\n        &quot;data&quot;:&#123;\n            &quot;flag&quot;:true\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"②-v-else\"><a href=\"#②-v-else\" class=\"headerlink\" title=\"② v-else\"></a>② v-else</h4><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-if&#x3D;&quot;Math.random() &gt; 0.5&quot;&gt;\n  Now you see me\n&lt;&#x2F;div&gt;\n&lt;div v-else&gt;\n  Now you don&#39;t\n&lt;&#x2F;div&gt;</code></pre>\n\n<p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p>\n<h4 id=\"③-v-else-if\"><a href=\"#③-v-else-if\" class=\"headerlink\" title=\"③ v-else-if\"></a>③ v-else-if</h4><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，并且可以连续使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;\n  A\n&lt;&#x2F;div&gt;\n&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;\n  B\n&lt;&#x2F;div&gt;\n&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;\n  C\n&lt;&#x2F;div&gt;\n&lt;div v-else&gt;\n  Not A&#x2F;B&#x2F;C\n&lt;&#x2F;div&gt;</code></pre>\n\n<p>与 <code>v-else</code> 的用法类似，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p>\n<h4 id=\"④-v-show\"><a href=\"#④-v-show\" class=\"headerlink\" title=\"④ v-show\"></a>④ v-show</h4><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1 v-show&#x3D;&quot;ok&quot;&gt;Hello!&lt;&#x2F;h1&gt;</code></pre>\n\n<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p>\n<p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p>\n<h4 id=\"⑤-v-if-vs-v-show\"><a href=\"#⑤-v-if-vs-v-show\" class=\"headerlink\" title=\"⑤ v-if vs v-show\"></a>⑤ v-if vs v-show</h4><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>\n<h4 id=\"⑥-避免-v-if-v-for-一起使用\"><a href=\"#⑥-避免-v-if-v-for-一起使用\" class=\"headerlink\" title=\"⑥ 避免 v-if v-for 一起使用\"></a>⑥ 避免 v-if v-for 一起使用</h4><p>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul&gt;\n  &lt;li\n    v-for&#x3D;&quot;user in activeUsers&quot;\n    :key&#x3D;&quot;user.id&quot;\n  &gt;\n    &#123;&#123; user.name &#125;&#125;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul&gt;\n  &lt;template v-for&#x3D;&quot;user in users&quot; :key&#x3D;&quot;user.id&quot;&gt;\n    &lt;li v-if&#x3D;&quot;user.isActive&quot;&gt;\n      &#123;&#123; user.name &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n\n\n<h4 id=\"beginner-​列表渲染\"><a href=\"#beginner-​列表渲染\" class=\"headerlink\" title=\":beginner: ​列表渲染\"></a>:beginner: ​列表渲染</h4><h4 id=\"①-v-for-将数组对应为数据\"><a href=\"#①-v-for-将数组对应为数据\" class=\"headerlink\" title=\"① v-for 将数组对应为数据\"></a>① v-for 将数组对应为数据</h4><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul id&#x3D;&quot;array-rendering&quot;&gt;\n  &lt;li v-for&#x3D;&quot;item in items&quot;&gt;\n    &#123;&#123; item.message &#125;&#125;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Vue.createApp(&#123;\n  data() &#123;\n    return &#123;\n      items: [&#123; message: &#39;Foo&#39; &#125;, &#123; message: &#39;Bar&#39; &#125;]\n    &#125;\n  &#125;\n&#125;).mount(&#39;#array-rendering&#39;)</code></pre>\n\n<h4 id=\"②-v-for-将对象对应为数据\"><a href=\"#②-v-for-将对象对应为数据\" class=\"headerlink\" title=\"② v-for 将对象对应为数据\"></a>② v-for 将对象对应为数据</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;编号&lt;&#x2F;th&gt;\n            &lt;th&gt;姓名&lt;&#x2F;th&gt;\n            &lt;th&gt;年龄&lt;&#x2F;th&gt;\n            &lt;th&gt;专业&lt;&#x2F;th&gt;\n        &lt;&#x2F;tr&gt;\n        &lt;tr v-for&#x3D;&quot;employee in employeeList&quot;&gt;\n            &lt;td&gt;&#123;&#123;employee.empId&#125;&#125;&lt;&#x2F;td&gt;\n            &lt;td&gt;&#123;&#123;employee.empName&#125;&#125;&lt;&#x2F;td&gt;\n            &lt;td&gt;&#123;&#123;employee.empAge&#125;&#125;&lt;&#x2F;td&gt;\n            &lt;td&gt;&#123;&#123;employee.empSubject&#125;&#125;&lt;&#x2F;td&gt;\n        &lt;&#x2F;tr&gt;\n    &lt;&#x2F;table&gt;\n&lt;&#x2F;div&gt;\n\n&lt;script&gt;\n    var app &#x3D; new Vue(&#123;\n        &quot;el&quot;:&quot;#app&quot;,\n        &quot;data&quot;:&#123;\n            &quot;employeeList&quot;:[\n                &#123;\n                    &quot;empId&quot;:11,\n                    &quot;empName&quot;:&quot;tom&quot;,\n                    &quot;empAge&quot;:111,\n                    &quot;empSubject&quot;:&quot;java&quot;\n                &#125;\n            ]\n        &#125;\n    &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"③-v-for-中-绑定key的使用\"><a href=\"#③-v-for-中-绑定key的使用\" class=\"headerlink\" title=\"③ v-for 中 绑定key的使用\"></a>③ v-for 中 绑定key的使用</h4><p>需求：先选中吕不韦，添加新的人物后，还继续自动选中吕不韦</p>\n<p>不加key时，我们发现选中的是李斯</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div&gt;\n        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;\n            &lt;button @click&#x3D;&quot;add&quot;&gt;添加&lt;&#x2F;button&gt;\n            &lt;&#x2F;div&gt;\n        &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;item.id&quot;&gt;\n                &lt;input type&#x3D;&quot;checkbox&quot;&gt; &#123;&#123;item.name&#125;&#125;\n                    &lt;&#x2F;li&gt;\n                &lt;&#x2F;ul&gt;\n            &lt;script&gt;\n                &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel\n                var vm &#x3D; new Vue(&#123;\n                    el: &#39;#app&#39;,\n                    data: &#123;\n                    name: &#39;&#39;,\n                    newId: 3,\n                    list: [\n                        &#123; id: 1, name: &#39;李斯&#39; &#125;,\n                        &#123; id: 2, name: &#39;吕不韦&#39; &#125;,\n                        &#123; id: 3, name: &#39;嬴政&#39; &#125;\n                        ]\n                    &#125;,\n                    methods: &#123;\n                        add() &#123;\n                        &#x2F;&#x2F;注意这里是unshift\n                        this.list.unshift(&#123; id: ++this.newId, name: this.name &#125;)\n                        this.name &#x3D; &#39;&#39;\n                        &#125;\n                    &#125;\n                &#125;);\n            &lt;&#x2F;script&gt;\n            &lt;&#x2F;div&gt;</code></pre>\n\n\n\n<h4 id=\"beginner-数组更新检测\"><a href=\"#beginner-数组更新检测\" class=\"headerlink\" title=\":beginner: 数组更新检测\"></a>:beginner: 数组更新检测</h4><h4 id=\"①-变更方法\"><a href=\"#①-变更方法\" class=\"headerlink\" title=\"① 变更方法\"></a>① 变更方法</h4><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>\n<ul>\n<li><code>push()</code>：添加到数组的最后的位置</li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code>：往最前面的位置添加</li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>你可以打开控制台，然后对前面例子的 <code>items</code> 数组尝试调用变更方法。比如 <code>example1.items.push(&#123; message: &#39;Baz&#39; &#125;)</code></p>\n<h4 id=\"②-替换数组\"><a href=\"#②-替换数组\" class=\"headerlink\" title=\"② 替换数组\"></a>② 替换数组</h4><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">example1.items &#x3D; example1.items.filter(item &#x3D;&gt; item.message.match(&#x2F;Foo&#x2F;))</code></pre>\n\n<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>\n<h4 id=\"③-显示过滤-排序后的效果\"><a href=\"#③-显示过滤-排序后的效果\" class=\"headerlink\" title=\"③ 显示过滤/排序后的效果\"></a>③ 显示过滤/排序后的效果</h4><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;li v-for&#x3D;&quot;n in evenNumbers&quot; :key&#x3D;&quot;n&quot;&gt;&#123;&#123; n &#125;&#125;&lt;&#x2F;li&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">data() &#123;\n  return &#123;\n    numbers: [ 1, 2, 3, 4, 5 ]\n  &#125;\n&#125;,\ncomputed: &#123;\n  evenNumbers() &#123;\n    return this.numbers.filter(number &#x3D;&gt; number % 2 &#x3D;&#x3D;&#x3D; 0)\n  &#125;\n&#125;</code></pre>\n\n<p>在计算属性不适用的情况下 (例如，在嵌套 <code>v-for</code> 循环中) 你可以使用一个方法：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;ul v-for&#x3D;&quot;numbers in sets&quot;&gt;\n  &lt;li v-for&#x3D;&quot;n in even(numbers)&quot; :key&#x3D;&quot;n&quot;&gt;&#123;&#123; n &#125;&#125;&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">data() &#123;\n  return &#123;\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  &#125;\n&#125;,\nmethods: &#123;\n  even(numbers) &#123;\n    return numbers.filter(number &#x3D;&gt; number % 2 &#x3D;&#x3D;&#x3D; 0)\n  &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"beginner-事件处理\"><a href=\"#beginner-事件处理\" class=\"headerlink\" title=\":beginner: 事件处理\"></a>:beginner: 事件处理</h4><h4 id=\"①-监听事件-v-on\"><a href=\"#①-监听事件-v-on\" class=\"headerlink\" title=\"① 监听事件 v-on\"></a>① 监听事件 v-on</h4><p>使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。用法为 <code>v-on:click=&quot;methodName&quot;</code> 或使用快捷方式 <code>@click=&quot;methodName&quot;</code></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;basic-event&quot;&gt;\n  &lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;\n  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Vue.createApp(&#123;\n  data() &#123;\n    return &#123;\n      counter: 0\n    &#125;\n  &#125;\n&#125;).mount(&#39;#basic-event&#39;)</code></pre>\n\n<h4 id=\"②-事件处理方法\"><a href=\"#②-事件处理方法\" class=\"headerlink\" title=\"② 事件处理方法\"></a>② 事件处理方法</h4><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;event-with-method&quot;&gt;\n  &lt;!-- &#96;greet&#96; 是在下面定义的方法名 --&gt;\n  &lt;button @click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;button&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Vue.createApp(&#123;\n  data() &#123;\n    return &#123;\n      name: &#39;Vue.js&#39;\n    &#125;\n  &#125;,\n  methods: &#123;\n    greet(event) &#123;\n      &#x2F;&#x2F; &#96;methods&#96; 内部的 &#96;this&#96; 指向当前活动实例\n      alert(&#39;Hello &#39; + this.name + &#39;!&#39;)\n      &#x2F;&#x2F; &#96;event&#96; 是原生 DOM event\n      if (event) &#123;\n        alert(event.target.tagName)\n      &#125;\n    &#125;\n  &#125;\n&#125;).mount(&#39;#event-with-method&#39;)</code></pre>\n\n<h4 id=\"③-内联处理器的方法\"><a href=\"#③-内联处理器的方法\" class=\"headerlink\" title=\"③ 内联处理器的方法\"></a>③ 内联处理器的方法</h4><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div id&#x3D;&quot;inline-handler&quot;&gt;\n  &lt;button @click&#x3D;&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;say(&#39;what&#39;)&quot;&gt;Say what&lt;&#x2F;button&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Vue.createApp(&#123;\n  methods: &#123;\n    say(message) &#123;\n      alert(message)\n    &#125;\n  &#125;\n&#125;).mount(&#39;#inline-handler&#39;)</code></pre>\n\n<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;button @click&#x3D;&quot;warn(&#39;Form cannot be submitted yet.&#39;, $event)&quot;&gt;\n  Submit\n&lt;&#x2F;button&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; ...\nmethods: &#123;\n  warn(message, event) &#123;\n    &#x2F;&#x2F; 现在可以访问到原生事件\n    if (event) &#123;\n      event.preventDefault()\n    &#125;\n    alert(message)\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"④-多事件处理器\"><a href=\"#④-多事件处理器\" class=\"headerlink\" title=\"④ 多事件处理器\"></a>④ 多事件处理器</h4><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;\n&lt;button @click&#x3D;&quot;one($event), two($event)&quot;&gt;\n  Submit\n&lt;&#x2F;button&gt;</code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; ...\nmethods: &#123;\n  one(event) &#123;\n    &#x2F;&#x2F; 第一个事件处理器逻辑...\n  &#125;,\n  two(event) &#123;\n   &#x2F;&#x2F; 第二个事件处理器逻辑...\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"⑤-事件修饰符\"><a href=\"#⑤-事件修饰符\" class=\"headerlink\" title=\"⑤ 事件修饰符\"></a>⑤ 事件修饰符</h4><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>\n<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>\n<ul>\n<li><code>.stop</code>：阻止冒泡事件的发生</li>\n<li><code>.prevent</code>：取消控件的默认行为</li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 阻止单击事件继续传播 --&gt;\n&lt;a @click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;\n\n&lt;!-- 提交事件不再重载页面 --&gt;\n&lt;form @submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;\n\n&lt;!-- 修饰符可以串联 --&gt;\n&lt;a @click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;\n\n&lt;!-- 只有修饰符 --&gt;\n&lt;form @submit.prevent&gt;&lt;&#x2F;form&gt;\n\n&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;\n&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;\n&lt;div @click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;\n\n&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;\n&lt;!-- 即事件不是从内部元素触发的 --&gt;\n&lt;div @click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TIP</p>\n<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止所有的点击，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p></blockquote>\n<h4 id=\"⑥-按键修饰符\"><a href=\"#⑥-按键修饰符\" class=\"headerlink\" title=\"⑥ 按键修饰符\"></a>⑥ 按键修饰符</h4><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 或者 <code>@</code> 在监听键盘事件时添加按键修饰符：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 只有在 &#96;key&#96; 是 &#96;Enter&#96; 时调用 &#96;vm.submit()&#96; --&gt;\n&lt;input @keyup.enter&#x3D;&quot;submit&quot; &#x2F;&gt;</code></pre>\n\n<p><a href=\"https://v3.cn.vuejs.org/guide/events.html#%E6%8C%89%E9%94%AE%E5%88%AB%E5%90%8D\"><strong>按键别名</strong></a>，Vue 为最常用的键提供了别名：</p>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code> (捕获“删除”和“退格”键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p>【需求】：在输入框中，如果输入回车键，就执行弹出窗口事件（可用于网页登录）。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n   &lt;head&gt;\n      &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n      &lt;title&gt;v-on:按键修饰符&lt;&#x2F;title&gt;\n \n      &lt;script src&#x3D;&quot;js&#x2F;vuejs-2.5.16.js&quot;&gt;&lt;&#x2F;script&gt;\n   &lt;&#x2F;head&gt;\n \n   &lt;body&gt;\n      &lt;div id&#x3D;&quot;app&quot;&gt;\n         &lt;!--当按下按键enter的时候，触发fun事件--&gt;\n         &lt;input type&#x3D;&quot;text&quot; @keydown.enter&#x3D;&quot;fun()&quot;&gt;\n         &lt;!--&lt;input type&#x3D;&quot;text&quot; @keydown&#x3D;&quot;fun($event)&quot; &#x2F;&gt;--&gt;\n      &lt;&#x2F;div&gt;\n   &lt;&#x2F;body&gt;\n   &lt;script&gt;\n      &#x2F;&#x2F;view model\n      new Vue(&#123;\n         el: &quot;#app&quot;,\n         methods: &#123;\n            fun1:function()&#123;\n               alert(&quot;输入的回车键！&quot;);\n            &#125;\n&#x2F;&#x2F;          fun1:function (e) &#123;\n&#x2F;&#x2F;             var keyCode &#x3D; e.keyCode;\n&#x2F;&#x2F;             &#x2F;&#x2F;alert(keyCode);\n&#x2F;&#x2F;             if(keyCode &#x3D;&#x3D; 13)&#123;\n&#x2F;&#x2F;                 alert(&quot;输入的回车键！&quot;)\n&#x2F;&#x2F;             &#125;\n&#x2F;&#x2F;          &#125;\n         &#125;\n      &#125;);\n   &lt;&#x2F;script&gt;\n \n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"⑦-v-on-keydown\"><a href=\"#⑦-v-on-keydown\" class=\"headerlink\" title=\"⑦ v-on:keydown\"></a>⑦ v-on:keydown</h4><p>keycode对照表</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/vue-keydown.png\" alt=\"image-20210727170701012\"></p>\n<p>【需求】：对文本输入框做校验，使用键盘按下事件，如果按下0-9的数字，正常显示，其他按键则阻止事件执行。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n   &lt;head&gt;\n      &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n      &lt;title&gt;v-on:keydown&lt;&#x2F;title&gt;\n      &lt;script src&#x3D;&quot;js&#x2F;vuejs-2.5.16.js&quot;&gt;&lt;&#x2F;script&gt;\n   &lt;&#x2F;head&gt;\n \n   &lt;body&gt;\n      &lt;div id&#x3D;&quot;app&quot;&gt;\n         &lt;input type&#x3D;&quot;text&quot; v-on:keydown&#x3D;&quot;fun($event)&quot;&gt;    \n         &lt;!-- &lt;input type&#x3D;&quot;text&quot; @keydown&#x3D;&quot;fun($event)&quot; &#x2F;&gt; --&gt;\n      &lt;&#x2F;div&gt;\n   &lt;&#x2F;body&gt;\n   &lt;script&gt;\n      &#x2F;&#x2F;view model\n      new Vue(&#123;\n         el: &quot;#app&quot;,\n         data: &#123;\n           message: 10 &#x2F;&#x2F;model\n         &#125;,\n         methods: &#123;\n            fun: function(e) &#123;\n               &#x2F;&#x2F;1.捕获keyCode 判断它是否是0-9  需要使用event对象\n               var keyCode &#x3D; e.keyCode;\n                &#x2F;&#x2F; 只能输入数字\n               if(!(keyCode &gt;&#x3D; 48 &amp;&amp; keyCode &lt;&#x3D; 57)) &#123;\n                  &#x2F;&#x2F;2.阻止默认行为执行\n                  e.preventDefault();\n               &#125;\n            &#125;\n         &#125;\n      &#125;);\n   &lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>输入框中只能输入0-9的数字，如果不是0-9的数字，不能输入。</p>\n<h4 id=\"beginner-​Vue-生命周期\"><a href=\"#beginner-​Vue-生命周期\" class=\"headerlink\" title=\":beginner: ​Vue 生命周期\"></a>:beginner: ​Vue 生命周期</h4><h4 id=\"①-概念\"><a href=\"#①-概念\" class=\"headerlink\" title=\"① 概念\"></a>① 概念</h4><p>在我们各种语言的编程领域中，<span style=\"color:blue;font-weight:bold;\">『生命周期』</span>都是一个非常常见的概念。一个对象从创建、初始化、工作再到释放、清理和销毁，会经历很多环节的演变。比如我们在JavaSE阶段学习过线程的生命周期，今天学习Vue对象的生命周期，将来还要学习Servlet、Filter等Web组件的生命周期。</p>\n<p>1. 什么叫生命周期？</p>\n<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 、并在数据变化时更新 DOM 等。</p>\n<p>2. 什么叫钩子函数？</p>\n<p>同时在生命周期执行的这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p>\n<h4 id=\"②-Vue对象的生命周期\"><a href=\"#②-Vue对象的生命周期\" class=\"headerlink\" title=\"② Vue对象的生命周期\"></a>② Vue对象的生命周期</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/vue-lifcyle.png\" alt=\"image-20210727171504758\"></p>\n<h4 id=\"③-生命周期钩子函数\"><a href=\"#③-生命周期钩子函数\" class=\"headerlink\" title=\"③ 生命周期钩子函数\"></a>③ 生命周期钩子函数</h4><p>Vue允许我们在特定的生命周期环节中通过钩子函数来加入我们的代码。</p>\n<p>【需求】：演示vue对象的创建、赋值、显示、改值、销毁的全过程，即Vue的生命周期，同时使用钩子函数添加自己的业务逻辑</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n   &lt;head&gt;\n      \n      &lt;script src&#x3D;&quot;js&#x2F;vuej&lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n      &lt;title&gt;vuejs生命周期&lt;&#x2F;title&gt;s-2.5.16.js&quot;&gt;&lt;&#x2F;script&gt;\n   &lt;&#x2F;head&gt;\n \n   &lt;body&gt;\n      &lt;div id&#x3D;&quot;app&quot;&gt;\n         &#123;&#123;message&#125;&#125;\n      &lt;&#x2F;div&gt;\n   &lt;&#x2F;body&gt;\n   &lt;script&gt;\n      var vue &#x3D; new Vue(&#123;\n         el: &quot;#app&quot;,\n         &#x2F;&#x2F;template:&quot;&lt;h1&gt;&lt;font color&#x3D;&#39;red&#39;&gt;你好硅谷&lt;&#x2F;font&gt;&lt;&#x2F;h1&gt;&quot;, &#x2F;&#x2F;在vue配置项中修改的\n         data: &#123;\n            message: &#39;hello world&#39;\n         &#125;,\n         beforeCreate: function() &#123;\n            showData(&#39;创建vue实例前&#39;, this);\n         &#125;,\n         created: function() &#123;\n            showData(&#39;创建vue实例后&#39;, this);\n         &#125;,\n         beforeMount: function() &#123;\n            showData(&#39;挂载到dom前&#39;, this);\n         &#125;,\n         mounted: function() &#123;\n            showData(&#39;挂载到dom后&#39;, this);\n         &#125;,\n         beforeUpdate: function() &#123;\n            showData(&#39;数据变化更新前&#39;, this);\n         &#125;,\n         updated: function() &#123;\n            showData(&#39;数据变化更新后&#39;, this);\n         &#125;,\n         beforeDestroy: function() &#123;\n            showData(&#39;vue实例销毁前&#39;, this);\n         &#125;,\n         destroyed: function() &#123;\n            showData(&#39;vue实例销毁后&#39;, this);\n         &#125;\n      &#125;);\n \n      function showData(process, obj) &#123;\n         console.log(process);\n         console.log(&#39;data 数据：&#39; + obj.message)\n         console.log(&#39;vue挂载的虚拟dom对象：&#39;)\n         console.log(obj.$el)\n         console.log(&#39;真实dom结构：&#39; + document.getElementById(&#39;app&#39;).innerHTML);\n         console.log(&#39;------------------&#39;)\n         console.log(&#39;------------------&#39;)\n      &#125;\n      &#x2F;&#x2F;vue.$mount(&quot;#app&quot;);\n      vue.message &#x3D; &quot;good...&quot;;\n      vue.$destroy(); &#x2F;&#x2F; 销毁了监听，不会执行数据变化的监听，即不会将message的值改成good...\n   &lt;&#x2F;script&gt;\n \n&lt;&#x2F;html&gt;</code></pre>\n\n<p>查看谷歌浏览器</p>\n<p>分析生命周期相关方法的执行时机</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            message: &#39;床前明月光&#39;\n        &#125;,\n        &#x2F;&#x2F; 页面在内存中已经初始化完毕：\n        &#x2F;&#x2F; 可以操作 data 中的数据、调用methods中的方法\n        &#x2F;&#x2F; 但是数据尚未被渲染到页面中：用户看不见\n        created() &#123;\n            console.log(&#39;created&#39;)\n            &#x2F;&#x2F;可以操作 data 中的数据\n            console.log(this.message)\n            &#x2F;&#x2F;可以调用methods中的方法\n            this.show()\n            &#x2F;&#x2F;无法取出dom节点取数据，说明用户无法在浏览器中看见这个内容\n            console.log(document.getElementById(&#39;h3&#39;).innerText)\n        &#125;,\n        \n        &#x2F;&#x2F; 数据已经被渲染到页面中\n        mounted() &#123; &#x2F;&#x2F; 第四个被执行的钩子方法\n            console.log(&#39;mounted&#39;)\n            &#x2F;&#x2F;可以取出dom节点取数据，说明用户已经在浏览器中看见内容\n            console.log(document.getElementById(&#39;h3&#39;).innerText)\n        &#125;,\n        \n        methods: &#123;\n            show() &#123;\n                console.log(&#39;show方法被调用&#39;)\n            &#125;\n        &#125;,\n    &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h4 id=\"beginner-Vue-路由\"><a href=\"#beginner-Vue-路由\" class=\"headerlink\" title=\":beginner: Vue 路由\"></a>:beginner: Vue 路由</h4><h4 id=\"一、锚点的概念\"><a href=\"#一、锚点的概念\" class=\"headerlink\" title=\"一、锚点的概念\"></a>一、锚点的概念</h4><p>案例：百度百科</p>\n<p>特点：单页Web应用，预先加载页面内容</p>\n<p>形式：url#锚点</p>\n<h4 id=\"二、路由的作用\"><a href=\"#二、路由的作用\" class=\"headerlink\" title=\"二、路由的作用\"></a>二、路由的作用</h4><p>Vue.js 路由允许我们通过锚点定义不同的 URL， 达到访问不同的页面的目的，每个页面的内容通过延迟加载渲染出来。</p>\n<p>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）</p>\n<p>==SSP单页面应用，项目只有一个页面，在页面中动态显示的内容只要切换加载页面碎片即可==</p>\n<p>==容器内通过router-view显示vue路由动态加载的页面碎片==</p>\n<p>==容器内提供一组路由链接router-link(菜单列表)，每个路由链接点击时可以加载自己的页面碎片到routerview中显示==</p>\n<h4 id=\"三、路由实例\"><a href=\"#三、路由实例\" class=\"headerlink\" title=\"三、路由实例\"></a>三、路由实例</h4><p><strong>创建文件夹router_pro</strong></p>\n<h5 id=\"1、复制js资源\"><a href=\"#1、复制js资源\" class=\"headerlink\" title=\"1、复制js资源\"></a>1、复制js资源</h5><p>vue.min.js</p>\n<p>vue-router.min.js</p>\n<h5 id=\"2、创建-路由-html\"><a href=\"#2、创建-路由-html\" class=\"headerlink\" title=\"2、创建 路由.html\"></a>2、创建 路由.html</h5><h5 id=\"3、引入js\"><a href=\"#3、引入js\" class=\"headerlink\" title=\"3、引入js\"></a>3、引入js</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<h5 id=\"4、编写html\"><a href=\"#4、编写html\" class=\"headerlink\" title=\"4、编写html\"></a>4、编写html</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;h1&gt;Hello App!&lt;&#x2F;h1&gt;\n    &lt;p&gt;\n        &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 &#96;&lt;a&gt;&#96; 标签 --&gt;\n        &lt;!-- 通过传入 &#96;to&#96; 属性指定链接. --&gt;\n        &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;\n        &lt;router-link to&#x3D;&quot;&#x2F;student&quot;&gt;会员管理&lt;&#x2F;router-link&gt;\n        &lt;router-link to&#x3D;&quot;&#x2F;teacher&quot;&gt;讲师管理&lt;&#x2F;router-link&gt;\n    &lt;&#x2F;p&gt;\n    &lt;!-- 路由出口 --&gt;\n    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h5 id=\"5、编写js\"><a href=\"#5、编写js\" class=\"headerlink\" title=\"5、编写js\"></a>5、编写js</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 定义（路由）组件。\n  &#x2F;&#x2F; 复杂的组件也可以从独立的vue文件中引入\n  const Welcome &#x3D; &#123; template: &#39;&lt;div&gt;欢迎&lt;&#x2F;div&gt;&#39; &#125;\n  const Student &#x3D; &#123; template: &#39;&lt;div&gt;student list&lt;&#x2F;div&gt;&#39; &#125;\n  const Teacher &#x3D; &#123; template: &#39;&lt;div&gt;teacher list&lt;&#x2F;div&gt;&#39; &#125;\n  &#x2F;&#x2F; 2. 定义路由\n  &#x2F;&#x2F; 每个路由应该映射一个组件。\n  const routes &#x3D; [\n    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;welcome&#39; &#125;, &#x2F;&#x2F;设置默认指向的路径\n    &#123; path: &#39;&#x2F;welcome&#39;, component: Welcome &#125;,\n    &#123; path: &#39;&#x2F;student&#39;, component: Student &#125;,\n    &#123; path: &#39;&#x2F;teacher&#39;, component: Teacher &#125;\n  ]\n  &#x2F;&#x2F; 3. 创建 router 实例，然后传 &#96;routes&#96; 配置\n  const router &#x3D; new VueRouter(&#123;\n    routes &#x2F;&#x2F; （缩写）相当于 routes: routes\n  &#125;)\n  &#x2F;&#x2F; 4. 创建和挂载根实例。\n  &#x2F;&#x2F; 从而让整个应用都有路由功能\n  new Vue(&#123;\n    el: &#39;#app&#39;,\n    router\n      &#x2F;&#x2F; router: new VueRouter(&#123;\n      &#x2F;&#x2F;     routes: [\n      &#x2F;&#x2F;         &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;index&#39; &#125;,\n      &#x2F;&#x2F;         &#123; path: &#39;&#x2F;index&#39;, component: &#123; template: &#39;&lt;div&gt;欢迎&lt;&#x2F;div&gt;&#39; &#125; &#125;,\n      &#x2F;&#x2F;         &#123; path: &#39;&#x2F;course&#39;, component: &#123; template: &#39;&lt;div&gt;course list&lt;&#x2F;div&gt;&#39; &#125; &#125;,\n      &#x2F;&#x2F;         &#123; path: &#39;&#x2F;teacher&#39;, component: &#123; template: &#39;&lt;div&gt;teacher list&lt;&#x2F;div&gt;&#39; &#125; &#125;\n      &#x2F;&#x2F;     ]\n      &#x2F;&#x2F; &#125;)\n  &#125;)\n  &#x2F;&#x2F; 现在，应用已经启动了！\n&lt;&#x2F;script&gt;</code></pre>\n","text":":beginner: ​Vue 基础要点① 什么是框架任何编程语言在最初的时候都是没有框架的，后来随着在实际开发过程中不断总结『经验』，积累『最佳实践』，慢慢的人们发现很多『特定场景』下的『特定问题』总是可以『套用固定解决方案』。 于是有人把成熟的『固定解决方案』收集起来，整合在...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8BVue-%E5%9F%BA%E7%A1%80%E8%A6%81%E7%82%B9\"><span class=\"toc-text\">:beginner: ​Vue 基础要点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">① 什么是框架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-VueJs-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">② VueJs 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-VueJs-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">③ VueJs 环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">④ 小结</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8BMVVM-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">:beginner: ​MVVM 模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-mvvm-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">① mvvm 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-mvvm-%E7%9A%84%E8%B0%83%E5%BA%A6%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">② mvvm 的调度关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">③ 小结</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8BVue-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">:beginner: ​Vue 入门案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%AF%BC%E5%85%A5vue-js%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">① 导入vue.js文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">② 入门程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">③ 声明式渲染</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">:beginner: 模板语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%8F%92%E5%80%BC\"><span class=\"toc-text\">① 插值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%8F%92%E5%80%BC-v-text\"><span class=\"toc-text\">② 插值 v-text</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%8F%92%E5%80%BC-v-html\"><span class=\"toc-text\">③ 插值 v-html</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-Attribute-%E4%B8%AD%E6%8F%92%E5%80%BC\"><span class=\"toc-text\">④ Attribute 中插值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E4%BD%BF%E7%94%A8javascript%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">⑤ 使用javascript表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8B%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A-v-model\"><span class=\"toc-text\">:beginner: ​双向绑定 v-model</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">① 需求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">② 页面效果</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">③ 扩展</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">:beginner:  条件渲染</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-v-if\"><span class=\"toc-text\">① v-if</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-v-else\"><span class=\"toc-text\">② v-else</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-v-else-if\"><span class=\"toc-text\">③ v-else-if</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-v-show\"><span class=\"toc-text\">④ v-show</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-v-if-vs-v-show\"><span class=\"toc-text\">⑤ v-if vs v-show</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E9%81%BF%E5%85%8D-v-if-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">⑥ 避免 v-if v-for 一起使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8B%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">:beginner: ​列表渲染</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-v-for-%E5%B0%86%E6%95%B0%E7%BB%84%E5%AF%B9%E5%BA%94%E4%B8%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">① v-for 将数组对应为数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-v-for-%E5%B0%86%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%BA%94%E4%B8%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">② v-for 将对象对应为数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-v-for-%E4%B8%AD-%E7%BB%91%E5%AE%9Akey%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">③ v-for 中 绑定key的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">:beginner: 数组更新检测</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%8F%98%E6%9B%B4%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">① 变更方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%9B%BF%E6%8D%A2%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">② 替换数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">③ 显示过滤&#x2F;排序后的效果</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">:beginner: 事件处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6-v-on\"><span class=\"toc-text\">① 监听事件 v-on</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">② 事件处理方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">③ 内联处理器的方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%A4%9A%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">④ 多事件处理器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">⑤ 事件修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">⑥ 按键修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A6-v-on-keydown\"><span class=\"toc-text\">⑦ v-on:keydown</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-%E2%80%8BVue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">:beginner: ​Vue 生命周期</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">① 概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-Vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">② Vue对象的生命周期</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">③ 生命周期钩子函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beginner-Vue-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">:beginner: Vue 路由</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%94%9A%E7%82%B9%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">一、锚点的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">二、路由的作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">三、路由实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A4%8D%E5%88%B6js%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">1、复制js资源</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA-%E8%B7%AF%E7%94%B1-html\"><span class=\"toc-text\">2、创建 路由.html</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%BC%95%E5%85%A5js\"><span class=\"toc-text\">3、引入js</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%BC%96%E5%86%99html\"><span class=\"toc-text\">4、编写html</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%BC%96%E5%86%99js\"><span class=\"toc-text\">5、编写js</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"XML","uid":"1158d9e6c37bc3dd9f057cb155218f0c","slug":"34-Xml","date":"2021-09-13T15:10:32.000Z","updated":"2021-09-15T10:26:43.050Z","comments":true,"path":"api/articles/34-Xml.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. XML概述1.1 概念Extensible Markup Language 可扩展标记语言 可扩展：标签是自定义的 &lt;user&gt; &lt;学习&gt; 1.2 功能作为配置文件，存储数据 存储数据后也可以在网络中传输数据 1.3 XML与HTML的区别XML标签...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Thymeleaf","uid":"6f6443e7d108482a5cb5a126a4a24a84","slug":"31-Thymeleaf","date":"2021-09-13T15:08:32.000Z","updated":"2021-09-15T10:26:12.095Z","comments":true,"path":"api/articles/31-Thymeleaf.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. 创建模板文件创建一个 HTML 模板文件： &lt;!DOCTYPE HTML&gt; &lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt; &lt;head&gt; &lt;ti...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}