{"title":"Regular Expression","uid":"011b445bb73b7101b5e897c141561df0","slug":"30-Regular expression","date":"2021-09-13T15:07:32.000Z","updated":"2021-09-15T10:25:53.055Z","comments":true,"path":"api/articles/30-Regular expression.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><p>正则表达式用于文本内容的查找和替换。</p>\n<p>正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。</p>\n<p><a href=\"https://regexr.com/\">正则表达式在线工具</a></p>\n<h3 id=\"二、匹配单个字符\"><a href=\"#二、匹配单个字符\" class=\"headerlink\" title=\"二、匹配单个字符\"></a>二、匹配单个字符</h3><p><strong>.</strong>   可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p>\n<p><strong>.</strong>   是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。</p>\n<p>正则表达式一般是区分大小写的，但也有些实现不区分。</p>\n<h5 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><strong>正则表达式</strong></h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">C.C2018</code></pre>\n\n<h5 id=\"匹配结果\"><a href=\"#匹配结果\" class=\"headerlink\" title=\"匹配结果\"></a><strong>匹配结果</strong></h5><p>My name is   <strong>CyC2018</strong>  .</p>\n<h3 id=\"三、匹配一组字符\"><a href=\"#三、匹配一组字符\" class=\"headerlink\" title=\"三、匹配一组字符\"></a>三、匹配一组字符</h3><p><strong>[ ]</strong>   定义一个字符集合；</p>\n<p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p>\n<p><strong>-</strong>   只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p>\n<p><strong>^</strong>   在 [ ] 中是取非操作。</p>\n<p><strong>应用</strong>  </p>\n<p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串：</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">abc[^0-9]</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<ol>\n<li>  <strong>abcd</strong>  </li>\n<li>abc1</li>\n<li>abc2</li>\n</ol>\n<h3 id=\"四、使用元字符\"><a href=\"#四、使用元字符\" class=\"headerlink\" title=\"四、使用元字符\"></a>四、使用元字符</h3><h4 id=\"4-1-匹配空白字符\"><a href=\"#4-1-匹配空白字符\" class=\"headerlink\" title=\"4.1 匹配空白字符\"></a>4.1 匹配空白字符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[\\b]</td>\n<td align=\"center\">回退（删除）一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\f</td>\n<td align=\"center\">换页符</td>\n</tr>\n<tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">换行符</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">回车符</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">制表符</td>\n</tr>\n<tr>\n<td align=\"center\">\\v</td>\n<td align=\"center\">垂直制表符</td>\n</tr>\n</tbody></table>\n<p>\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。</p>\n<p>\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p>\n<h4 id=\"4-2-匹配特定的字符\"><a href=\"#4-2-匹配特定的字符\" class=\"headerlink\" title=\"4.2 匹配特定的字符\"></a>4.2 匹配特定的字符</h4><h5 id=\"4-2-1-数字元字符\"><a href=\"#4-2-1-数字元字符\" class=\"headerlink\" title=\"4.2.1 数字元字符\"></a>4.2.1 数字元字符</h5><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">数字字符，等价于 [0-9]</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"center\">非数字字符，等价于 [^0-9]</td>\n</tr>\n</tbody></table>\n<h5 id=\"4-2-2-字母数字元字符\"><a href=\"#4-2-2-字母数字元字符\" class=\"headerlink\" title=\"4.2.2 字母数字元字符\"></a>4.2.2 字母数字元字符</h5><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"center\">对 \\w 取非</td>\n</tr>\n</tbody></table>\n<h5 id=\"4-2-3-空白字符元字符\"><a href=\"#4-2-3-空白字符元字符\" class=\"headerlink\" title=\"4.2.3 空白字符元字符\"></a>4.2.3 空白字符元字符</h5><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\s</td>\n<td align=\"center\">任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"center\">对 \\s 取非</td>\n</tr>\n</tbody></table>\n<p>\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\xA 对应值为 10 的 ASCII 字符 ，即 \\n。</p>\n<h3 id=\"五、重复匹配\"><a href=\"#五、重复匹配\" class=\"headerlink\" title=\"五、重复匹配\"></a>五、重复匹配</h3><ul>\n<li>  <strong>+</strong>   匹配 1 个或者多个字符</li>\n<li>  *<em>*</em>  * 匹配 0 个或者多个字符</li>\n<li>  <strong>?</strong>   匹配 0 个或者 1 个字符</li>\n</ul>\n<p><strong>应用</strong>  </p>\n<p>匹配邮箱地址。</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[\\w.]+@\\w+\\.\\w+</code></pre>\n\n<p>[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p>\n<p><strong>匹配结果</strong>  </p>\n<p><strong>abc.def&lt;span&gt;@&lt;/span&gt;qq.com</strong>  </p>\n<ul>\n<li>  <strong>{n}</strong>   匹配 n 个字符</li>\n<li>  <strong>{m,n}</strong>   匹配 m~n 个字符</li>\n<li>  <strong>{m,}</strong>   至少匹配 m 个字符</li>\n</ul>\n<p>* 和 + 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m,n}? 。</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a.+c</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<p><strong>abcabcabc</strong>  </p>\n<p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p>\n<h3 id=\"六、位置匹配\"><a href=\"#六、位置匹配\" class=\"headerlink\" title=\"六、位置匹配\"></a>六、位置匹配</h3><h4 id=\"单词边界\"><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h4><p><strong>\\b</strong>   可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；<strong>\\B</strong> 匹配一个不是单词边界的位置。</p>\n<p>\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。</p>\n<h4 id=\"字符串边界\"><a href=\"#字符串边界\" class=\"headerlink\" title=\"字符串边界\"></a>字符串边界</h4><p><strong>^</strong>   匹配整个字符串的开头，**$** 匹配结尾。</p>\n<p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p>\n<p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p>\n<p><strong>应用</strong>  </p>\n<p>匹配代码中以 // 开始的注释行</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">^\\s*\\&#x2F;\\&#x2F;.*$</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<ol>\n<li>public void fun() {</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;      <strong>// 注释 1</strong>  </li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int a = 1;</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int b = 2;</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;      <strong>// 注释 2</strong>  </li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int c = a + b;</li>\n<li>}</li>\n</ol>\n<h3 id=\"七、使用子表达式\"><a href=\"#七、使用子表达式\" class=\"headerlink\" title=\"七、使用子表达式\"></a>七、使用子表达式</h3><p>使用   <strong>( )</strong>   定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p>\n<p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(ab)&#123;2,&#125;</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<p><strong>ababab</strong>  </p>\n<p><strong>|</strong>   是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(19|20)\\d&#123;2&#125;</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<ol>\n<li>  <strong>1900</strong>  </li>\n<li>  <strong>2010</strong>  </li>\n<li>1020</li>\n</ol>\n<p><strong>应用</strong>  </p>\n<p>匹配 IP 地址。</p>\n<p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p>\n<ul>\n<li>一位数字</li>\n<li>不以 0 开头的两位数字</li>\n<li>1 开头的三位数</li>\n<li>2 开头，第 2 位是 0-4 的三位数</li>\n<li>25 开头，第 3 位是 0-5 的三位数</li>\n</ul>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">((25[0-5]|(2[0-4]\\d)|(1\\d&#123;2&#125;)|([1-9]\\d)|(\\d))\\.)&#123;3&#125;(25[0-5]|(2[0-4]\\d)|(1\\d&#123;2&#125;)|([1-9]\\d)|(\\d))</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<ol>\n<li>  <strong>192.168.0.1</strong>  </li>\n<li>00.00.00.00</li>\n<li>555.555.555.555</li>\n</ol>\n<h3 id=\"八、回溯引用\"><a href=\"#八、回溯引用\" class=\"headerlink\" title=\"八、回溯引用\"></a>八、回溯引用</h3><p>回溯引用使用   <strong>\\n</strong>   来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p>\n<h4 id=\"8-1-应用\"><a href=\"#8-1-应用\" class=\"headerlink\" title=\"8.1 应用\"></a>8.1 应用</h4><p>匹配 HTML 中合法的标题元素。</p>\n<p><strong>正则表达式</strong></p>\n<p>\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;(h[1-6])&gt;\\w*?&lt;\\&#x2F;\\1&gt;</code></pre>\n\n<p><strong>匹配结果</strong>  </p>\n<ol>\n<li>  <strong>&lt;h1&gt;x&lt;/h1&gt;</strong>  </li>\n<li>  <strong>&lt;h2&gt;x&lt;/h2&gt;</strong>  </li>\n<li>&lt;h3&gt;x&lt;/h1&gt;</li>\n</ol>\n<h4 id=\"8-2-替换\"><a href=\"#8-2-替换\" class=\"headerlink\" title=\"8.2 替换\"></a>8.2 替换</h4><p>需要用到两个正则表达式。</p>\n<p><strong>应用</strong>  </p>\n<p>修改电话号码格式。</p>\n<p><strong>文本</strong>  </p>\n<p>313-555-1234</p>\n<p><strong>查找正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(\\d&#123;3&#125;)(-)(\\d&#123;3&#125;)(-)(\\d&#123;4&#125;)</code></pre>\n\n<p><strong>替换正则表达式</strong>  </p>\n<p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">($1) $3-$5</code></pre>\n\n<p><strong>结果</strong>  </p>\n<p>(313) 555-1234</p>\n<h4 id=\"8-3-大小写转换\"><a href=\"#8-3-大小写转换\" class=\"headerlink\" title=\"8.3 大小写转换\"></a>8.3 大小写转换</h4><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\l</td>\n<td align=\"center\">把下个字符转换为小写</td>\n</tr>\n<tr>\n<td align=\"center\">\\u</td>\n<td align=\"center\">把下个字符转换为大写</td>\n</tr>\n<tr>\n<td align=\"center\">\\L</td>\n<td align=\"center\">把\\L 和\\E 之间的字符全部转换为小写</td>\n</tr>\n<tr>\n<td align=\"center\">\\U</td>\n<td align=\"center\">把\\U 和\\E 之间的字符全部转换为大写</td>\n</tr>\n<tr>\n<td align=\"center\">\\E</td>\n<td align=\"center\">结束\\L 或者\\U</td>\n</tr>\n</tbody></table>\n<p><strong>应用</strong>  </p>\n<p>把文本的第二个和第三个字符转换为大写。</p>\n<p><strong>文本</strong>  </p>\n<p>abcd</p>\n<p><strong>查找</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(\\w)(\\w&#123;2&#125;)(\\w)</code></pre>\n\n<p><strong>替换</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$1\\U$2\\E$3</code></pre>\n\n<p><strong>结果</strong>  </p>\n<p>aBCd</p>\n<h3 id=\"九、前后查找\"><a href=\"#九、前后查找\" class=\"headerlink\" title=\"九、前后查找\"></a>九、前后查找</h3><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。</p>\n<p>向前查找使用   <strong>?=</strong>   定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?&lt;= 定义（注: JavaScript 不支持向后匹配，Java 对其支持也不完善）。</p>\n<p><strong>应用</strong>  </p>\n<p>查找出邮件地址 @ 字符前面的部分。</p>\n<p><strong>正则表达式</strong>  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\w+(?&#x3D;@)</code></pre>\n\n<p><strong>结果</strong>  </p>\n<p><strong>abc</strong>  @qq.com</p>\n<p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p>\n<h3 id=\"十、嵌入条件\"><a href=\"#十、嵌入条件\" class=\"headerlink\" title=\"十、嵌入条件\"></a>十、嵌入条件</h3><h4 id=\"10-1-回溯引用条件\"><a href=\"#10-1-回溯引用条件\" class=\"headerlink\" title=\"10.1 回溯引用条件\"></a>10.1 回溯引用条件</h4><p>条件为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p>\n<p><strong>正则表达式</strong>  </p>\n<p>子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(\\()?abc(?(1)\\))</code></pre>\n\n<p><strong>结果</strong>  </p>\n<ol>\n<li>  <strong>(abc)</strong>  </li>\n<li>  <strong>abc</strong>  </li>\n<li>(abc</li>\n</ol>\n<h4 id=\"10-2-前后查找条件\"><a href=\"#10-2-前后查找条件\" class=\"headerlink\" title=\"10.2 前后查找条件\"></a>10.2 前后查找条件</h4><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p>\n<p><strong>正则表达式</strong>  </p>\n<p> ?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\d&#123;5&#125;(?(?&#x3D;-)-\\d&#123;4&#125;)</code></pre>\n\n<p><strong>结果</strong>  </p>\n<ol>\n<li>  <strong>11111</strong>  </li>\n<li>22222-</li>\n<li>  <strong>33333-4444</strong>  </li>\n</ol>\n","text":"一、概述正则表达式用于文本内容的查找和替换。 正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。 正则表达式在线工具 二、匹配单个字符. 可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符； . 是元字符，表示它有特殊的含义，而不是字符本身的含义...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一、概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%8C%B9%E9%85%8D%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">二、匹配单个字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">匹配结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%8C%B9%E9%85%8D%E4%B8%80%E7%BB%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">三、匹配一组字符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">四、使用元字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%8C%B9%E9%85%8D%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4.1 匹配空白字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4.2 匹配特定的字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-1-%E6%95%B0%E5%AD%97%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4.2.1 数字元字符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-2-%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4.2.2 字母数字元字符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-3-%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4.2.3 空白字符元字符</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E9%87%8D%E5%A4%8D%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">五、重复匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">六、位置匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">单词边界</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">字符串边界</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E4%BD%BF%E7%94%A8%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">七、使用子表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E5%9B%9E%E6%BA%AF%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">八、回溯引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">8.1 应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">8.2 替换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">8.3 大小写转换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E5%89%8D%E5%90%8E%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">九、前后查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81%E5%B5%8C%E5%85%A5%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">十、嵌入条件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-%E5%9B%9E%E6%BA%AF%E5%BC%95%E7%94%A8%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">10.1 回溯引用条件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-%E5%89%8D%E5%90%8E%E6%9F%A5%E6%89%BE%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">10.2 前后查找条件</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Thymeleaf","uid":"6f6443e7d108482a5cb5a126a4a24a84","slug":"31-Thymeleaf","date":"2021-09-13T15:08:32.000Z","updated":"2021-09-15T10:26:12.095Z","comments":true,"path":"api/articles/31-Thymeleaf.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. 创建模板文件创建一个 HTML 模板文件： &lt;!DOCTYPE HTML&gt; &lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt; &lt;head&gt; &lt;ti...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Javascript 简单总结","uid":"423214af91a95c0f0996d8a59fd1a243","slug":"29-JavaScript","date":"2021-09-13T15:06:32.000Z","updated":"2021-09-15T10:25:22.059Z","comments":true,"path":"api/articles/29-JavaScript.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. JavaScript的起源在1995年时，由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript，因为Netscape与Sun合作，网景公司管理层希望蹭Java的热度，因此取名为J...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}