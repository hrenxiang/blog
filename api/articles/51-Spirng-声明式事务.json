{"title":"Spring 声明式事务","uid":"a69a9b95a293fad60680e3e8965ab8da","slug":"51-Spirng-声明式事务","date":"2021-09-13T15:28:32.000Z","updated":"2021-09-15T10:50:45.764Z","comments":true,"path":"api/articles/51-Spirng-声明式事务.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h4 id=\"1、JdbcTemplate\"><a href=\"#1、JdbcTemplate\" class=\"headerlink\" title=\"1、JdbcTemplate\"></a>1、JdbcTemplate</h4><hr>\n<p>Spring提供了整合JDBC的JDBCTemplate，先有Spring，再出现MyBatis，所以整合包不是Spring提供的，而是第三方提供的。</p>\n<p>JDBCTemplate和MyBatis共同点：都是对JDBC进行了封装</p>\n<p>不同点：肯定是MyBatis封装的更彻底，提供了更多的功能</p>\n<h5 id=\"1-1、常用方法\"><a href=\"#1-1、常用方法\" class=\"headerlink\" title=\"1.1、常用方法\"></a>1.1、常用方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n<th>注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>update()</td>\n<td>返回的是一个int值，影响的行数。</td>\n<td>用于执行INSERT、UPDATE、DELETE等DML语句</td>\n</tr>\n<tr>\n<td>queryForMap()</td>\n<td>将查询结果封装为map集合，列名作为key，值作为value</td>\n<td>查询单个对象，这个方法查询的结果集长度为  1</td>\n</tr>\n<tr>\n<td>queryForList()</td>\n<td>查询多个对象，返回一个List对象，List对象存储是Map对象</td>\n<td>将每一条记录封装为一个map集合，再讲map集合封装到List集合中</td>\n</tr>\n<tr>\n<td>queryForObject( sql , 聚合函数类型的Class对象)</td>\n<td>查询单个对象,将结果封装为对象，返回单个实体类对象</td>\n<td>一般用于聚合函数的查询</td>\n</tr>\n<tr>\n<td>query( sql , RowMapper)</td>\n<td>查询多个对象，返回的是一个List对象，List对象存储是实体类（javaBean对象）</td>\n<td>一般我们使用的是<strong>BeanPropertyRowMapper</strong>实现类，可以完成数据到javabean的自动封装</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String sql &#x3D; &quot;select count(学号) from xs_kc&quot;;\nLong aLong &#x3D; template.queryForObject(sql, Long.class);</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;xskc&gt; list &#x3D; template.query(sql,new BeanPropertyRowMapper&lt;xskc&gt;(xskc.class));</code></pre>\n\n\n\n<h5 id=\"1-2、配置环境\"><a href=\"#1-2、配置环境\" class=\"headerlink\" title=\"1.2、配置环境\"></a>1.2、配置环境</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>添加依赖</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- Spring 持久化层支持jar包 --&gt;\n&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;\n&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-orm&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!-- MySQL驱动 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.1.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!-- 数据库连接池 alibaba 的 druid  --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0.31&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring配置</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 导入外部属性文件 jdbc配置文件中，各项值必须有前缀--&gt;\n&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;\n&lt;bean id&#x3D;&quot;druidDataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;\n    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driverClassName&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;\n    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;druidDataSource&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h5 id=\"1-3、使用方法\"><a href=\"#1-3、使用方法\" class=\"headerlink\" title=\"1.3、使用方法\"></a>1.3、使用方法</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>execute</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void testExecute() &#123;\n    jdbcTemplate.execute(&quot;create table user1(id int, name varchar(20))&quot;);\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>update</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; update 方法\npublic void testUpdate() &#123;\n    String sql &#x3D; &quot;insert into student(name, sex) values(?,?)&quot;;\n    jdbcTemplate.update(sql, new Object[]&#123;&quot;张飞&quot;, &quot;男&quot;&#125;);  &#x2F;&#x2F; 将值放到数组中\n&#125;\n\n&#x2F;&#x2F; update 方法（常用）\npublic void testUpdate2() &#123;\n    String sql &#x3D; &quot;update student set sex&#x3D;? where id&#x3D;?&quot;;\n    jdbcTemplate.update(sql, &quot;女&quot;, 1);   &#x2F;&#x2F; 直接写参数，不用放在数组中\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询简单数据项 —-&gt;   非对象类型，比如 聚合查询，查询单行数据的某列字段</p></blockquote>\n<p>获取一个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">T queryForObject(String sql, Class&lt;T&gt; type)\nT queryForObject(String sql, Object[] args, Class&lt;T&gt; type)\nT queryForObject(String sql, Class&lt;T&gt; type, Object... args)</code></pre>\n\n<p>获取多个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;T&gt; queryForList(String sql, Class&lt;T&gt; type)\nList&lt;T&gt; queryForList(String sql, Object[] args, Class&lt;T&gt; type)\nList&lt;T&gt; queryForList(String sql, Class&lt;T&gt; type, Object... args)</code></pre>\n\n<p>举例说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 查询简单数据项（获取一个）\npublic void testQuerySimple() &#123;\n    String sql &#x3D; &quot;select count(*) from student&quot;;\n    int count &#x3D; jdbcTemplate.queryForObject(sql, Integer.class);\n    System.out.println(count);\n&#125;\n\n&#x2F;&#x2F; 查询简单数据项（获取多个）\npublic void testQuerySimple2() &#123;\n    String sql &#x3D; &quot;select name from student where sex&#x3D;?&quot;;\n    List&lt;String&gt; names &#x3D; jdbcTemplate.queryForList(sql, String.class, &quot;男&quot;);\n    System.out.println(names);\n\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询复杂对象（封装为Map）——&gt;  查询一<strong>条</strong>数据，或多<strong>条</strong>数据</p></blockquote>\n<p>获取一个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Map queryForMap(String sql)\nMap queryForMap(String sql, Object[] args)\nMap queryForMap(String sql, Object... args)</code></pre>\n\n<p>获取多个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;Map&lt;String, Object&gt;&gt; queryForList(String sql)\nList&lt;Map&lt;String, Object&gt;&gt; queryForList(String sql, Object[] args)\nList&lt;Map&lt;String, Object&gt;&gt; queryForList(String sql, Object... args)</code></pre>\n\n<p>举例说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 查询复杂对象（封装为Map，查询一个）\n public void testQueryMap1() &#123;\n     String sql &#x3D; &quot;select * from student where id &#x3D; ?&quot;;\n     Map&lt;String, Object&gt; stu &#x3D; jdbcTemplate.queryForMap(sql, 1);\n     System.out.println(stu);\n &#125;\n\n &#x2F;&#x2F; 查询复杂对象（封装为Map， 查询多个）\n public void testQueryMap2() &#123;\n     String sql &#x3D; &quot;select * from student&quot;;\n     List&lt;Map&lt;String, Object&gt;&gt; stus &#x3D; jdbcTemplate.queryForList(sql);\n     System.out.println(stus);\n &#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询复杂对象（<strong>封装为实体对象</strong>）——-&gt; 使用<strong>RowMapper接口</strong></p></blockquote>\n<p>获取一个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">T queryForObject(String sql, RowMapper&lt;T&gt; mapper)\nT queryForObject(String sql, Object[] args, RowMapper&lt;T&gt; mapper)\nT queryForObject(String sql, RowMapper&lt;T&gt; mapper, Object... arg)</code></pre>\n\n<p>获取多个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;T&gt; query(String sql, RowMapper&lt;T&gt; mapper)\nList&lt;T&gt; query(String sql, Object[] args, RowMapper&lt;T&gt; mapper)\nList&lt;T&gt; query(String sql, RowMapper&lt;T&gt; mapper, Object... arg)</code></pre>\n\n<p>举例说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;查询复杂对象（封装为实体对象，获取一个）\n&#x2F;&#x2F;映射写法\npublic void testQueryEntity1() &#123;\n    final String sql &#x3D; &quot;select * from student where id&#x3D;?&quot;;\n    &#x2F;&#x2F; 匿名内部类\n    Student stu &#x3D; jdbcTemplate.queryForObject(sql, new RowMapper&lt;Student&gt;() &#123;\n        public Student mapRow(ResultSet resultSet, int i) throws SQLException &#123;\n            Student stu &#x3D; new Student();\n            stu.setId(resultSet.getInt(&quot;id&quot;));\n            stu.setName(resultSet.getString(&quot;name&quot;));\n            stu.setSex(resultSet.getString(&quot;sex&quot;));\n            stu.setBorn(resultSet.getDate(&quot;born&quot;));\n            return stu;\n        &#125;\n    &#125;, 3);\n    System.out.println(stu);\n&#125;\n\n&#x2F;&#x2F; 查询复杂对象（封装为实体对象，查询多个）\npublic void testQueryEntity2() &#123;\n    String sql &#x3D; &quot;select * from student&quot;;\n    List&lt;Student&gt; stus &#x3D; jdbcTemplate.query(sql, new StudentRowMapper());\n    System.out.println(stus);\n&#125;\n\n&#x2F;&#x2F; 构造封装对象类\nprivate class StudentRowMapper implements RowMapper&lt;Student&gt; &#123;\n    public Student mapRow(ResultSet resultSet, int i) throws SQLException &#123;\n        Student stu &#x3D; new Student();\n        stu.setId(resultSet.getInt(&quot;id&quot;));\n        stu.setName(resultSet.getString(&quot;name&quot;));\n        stu.setSex(resultSet.getString(&quot;sex&quot;));\n        stu.setBorn(resultSet.getDate(&quot;born&quot;));\n        return stu;\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><span style=\"color:red;\">一般我们使用的是BeanPropertyRowMapper实现类，可以完成数据到javabean的自动封装</span></p>\n<p>创建  实体类，直接进行封装</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;xskc&gt; list &#x3D; template.query(sql,new BeanPropertyRowMapper&lt;xskc&gt;(xskc.class));</code></pre>\n\n\n\n<h5 id=\"1-4、优缺总结\"><a href=\"#1-4、优缺总结\" class=\"headerlink\" title=\"1.4、优缺总结\"></a>1.4、优缺总结</h5><p>JDBC Template 优点：简单 灵活</p>\n<p>JDBC Template 缺点：SQL 与 Java 代码参杂  功能不丰富</p>\n<p>总结：JDBC Template是 Spring 框架对 JDBC 操作的封装。简单、灵活但不够强大。实际应用中还需要和其他 ORM 框架混合使用。</p>\n<h4 id=\"2、声明式事务\"><a href=\"#2、声明式事务\" class=\"headerlink\" title=\"2、声明式事务\"></a>2、声明式事务</h4><hr>\n<h5 id=\"2-1、声明式，编程式事务\"><a href=\"#2-1、声明式，编程式事务\" class=\"headerlink\" title=\"2.1、声明式，编程式事务\"></a>2.1、声明式，编程式事务</h5><p>编程式事务：事务功能的相关操作全部通过自己编写代码来实现，<strong>自己写代码</strong>实现功能</p>\n<p>编程式的实现方式存在缺陷：</p>\n<ul>\n<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li>\n<li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li>\n</ul>\n<p>声明式事务：既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。进而，我们可以通过<strong>配置</strong>让<strong>框架</strong>实现功能</p>\n<p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p>\n<ul>\n<li>好处1：提高开发效率</li>\n<li>好处2：消除了冗余的代码</li>\n<li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li>\n</ul>\n<h5 id=\"2-2-事务管理器\"><a href=\"#2-2-事务管理器\" class=\"headerlink\" title=\"2.2 事务管理器\"></a>2.2 事务管理器</h5><p>我们现在（使用JDBCTemplate访问数据库）要使用的事务管理器是 DataSourceTransactionManager，整合 Mybatis 用的也是。</p>\n<p>org.springframework.jdbc.datasource.<strong>DataSourceTransactionManager</strong>，</p>\n<p>DataSourceTransactionManager类中的主要方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>doBegin()</td>\n<td>开启事务</td>\n</tr>\n<tr>\n<td>doSuspend()</td>\n<td>挂起事务</td>\n</tr>\n<tr>\n<td>doResume()</td>\n<td>恢复挂起的事务</td>\n</tr>\n<tr>\n<td>doCommit()</td>\n<td>提交事务</td>\n</tr>\n<tr>\n<td>doRollback()</td>\n<td>回滚事务</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-1.png\" alt=\"image-20210715103908099\"></p>\n<p>spring5.2 以后PlatformTransactionManager继承自TransactionManager，TransactionManager接口中什么都没有，但是它还是有存在的意义——定义一个技术体系。</p>\n<hr>\n<h4 id=\"3、使用事务\"><a href=\"#3、使用事务\" class=\"headerlink\" title=\"3、使用事务\"></a>3、使用事务</h4><hr>\n<h5 id=\"3-1、准备工作\"><a href=\"#3-1、准备工作\" class=\"headerlink\" title=\"3.1、准备工作\"></a>3.1、准备工作</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在JdbcTemplate项目的基础上，添加依赖，orm为必须包</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- Spring 持久化层支持jar包 --&gt;\n&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;\n&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-orm&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>spring配置</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 配置事务管理器 --&gt;\n&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;\n   \n    &lt;!-- 事务管理器的bean只需要装配数据源，其他属性保持默认值即可 --&gt;\n    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;druidDataSource&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;!-- 开启基于注解的声明式事务功能 --&gt;\n&lt;!-- 使用transaction-manager属性指定当前使用是事务管理器的bean --&gt;\n&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;\n&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Dao层</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserDao &#123;\n\n    &#x2F;**\n     * 通过id 更新员工名称\n     * @param empId\n     * @param empName\n     *&#x2F;\n    public void updateEmpNameById(Integer empId, String empName);\n\n    &#x2F;**\n     * 通过id修改员工薪水\n     * @param empId\n     * @param salary\n     *&#x2F;\n    public void updateEmpSalaryById(Integer empId, Double salary);\n\n    &#x2F;**\n     * 通过id查找员工姓名\n     * @param empId\n     * @return\n     *&#x2F;\n    public String selectEmpNameById(Integer empId);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic class UserDaoImpl implements UserDao &#123;\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    &#x2F;**\n     * 通过id修改姓名\n     * @param empId\n     * @param empName\n     *&#x2F;\n    @Override\n    public void updateEmpNameById(Integer empId, String empName) &#123;\n        String  sql &#x3D; &quot;update emp set ename&#x3D;? where empno&#x3D;?&quot;;\n        jdbcTemplate.update(sql,empName,empId);\n    &#125;\n\n    @Override\n    public void updateEmpSalaryById(Integer empId, Double salary)&#123;\n\n        try &#123;\n            TimeUnit.SECONDS.sleep(8);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n        String  sql &#x3D; &quot;update emp set sal&#x3D;? where empno&#x3D;?&quot;;\n        jdbcTemplate.update(sql,salary,empId);\n    &#125;\n\n    @Override\n    public String selectEmpNameById(Integer empId) &#123;\n        String sql &#x3D; &quot;select ename from emp where empno&#x3D;?&quot;;\n        String s &#x3D; jdbcTemplate.queryForObject(sql, String.class, empId);\n        return s;\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>service层</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserService &#123;\n\n    &#x2F;**\n     * 通过id 更新员工名称\n     *\n     * @param empId\n     * @param empName\n     *&#x2F;\n    public void updateEmpNameById(Integer empId, String empName);\n\n    &#x2F;**\n     * 通过id修改员工薪水\n     *\n     * @param empId\n     * @param salary\n     *&#x2F;\n    public void updateEmpSalaryById(Integer empId, Double salary);\n\n    &#x2F;**\n     * 通过id查找员工姓名\n     *\n     * @param empId\n     * @return\n     *&#x2F;\n    public String selectEmpNameById(Integer empId);\n\n    &#x2F;**\n     * 为了测试事务是否生效，执行两个数据库操作，看它们是否会在某一个失败时一起回滚\n     * @param empId\n     * @param newName\n     * @param empIdSalary\n     * @param newSalary\n     *&#x2F;\n    public void updateTwice(&#x2F;&#x2F; 修改员工姓名的一组参数\n                            Integer empId, String newName,\n                            &#x2F;&#x2F; 修改员工工资的一组参数\n                            Integer empIdSalary, Double newSalary);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserServiceImpl implements UserService &#123;\n\n    &#x2F;**\n     * 数据库访问层接口\n     *&#x2F;\n    @Autowired\n    private UserDao userDao;\n\n    &#x2F;**\n     * 通过id改姓名\n     *\n     * @param empId\n     * @param empName\n     *&#x2F;\n    @Override\n    public void updateEmpNameById(Integer empId, String empName) &#123;\n        userDao.updateEmpNameById(empId, empName);\n    &#125;\n\n    &#x2F;**\n     * 通过id改薪水\n     *\n     * @param empId\n     * @param salary\n     *&#x2F;\n    @Override\n    @Transactional\n    public void updateEmpSalaryById(Integer empId, Double salary) &#123;\n        userDao.updateEmpSalaryById(empId, salary);\n    &#125;\n\n    &#x2F;**\n     * 通过id找姓名\n     *\n     * @param empId\n     * @return\n     *&#x2F;\n    @Override\n    @Transactional\n    public String selectEmpNameById(Integer empId) &#123;\n        return userDao.selectEmpNameById(empId);\n    &#125;\n\n    &#x2F;&#x2F; 为了便于核对数据库操作结果，不要修改同一条记录\n    @Override\n    @Transactional\n    public void updateTwice(\n            &#x2F;&#x2F; 修改员工姓名的一组参数\n            Integer empId, String newName,\n            &#x2F;&#x2F; 修改员工工资的一组参数\n            Integer empIdSalary, Double newSalary\n    ) &#123;\n        &#x2F;&#x2F; 为了测试事务是否生效，执行两个数据库操作，看它们是否会在某一个失败时一起回滚\n        userDao.updateEmpNameById(empId, newName);\n\n        userDao.updateEmpSalaryById(empIdSalary, newSalary);\n\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试功能</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(value &#x3D; &#123;&quot;classpath:applicationContext.xml&quot;&#125;)\npublic class test &#123;\n\n    @Autowired\n    @Qualifier(value &#x3D; &quot;userServiceImpl&quot;)\n    private UserService userService;\n\n    &#x2F;**\n     * 测试sql操作\n     *&#x2F;\n    @Test\n    public void testDemo1() &#123;\n        String s &#x3D; userService.selectEmpNameById(7369);\n        System.out.println(s);\n\n        userService.updateEmpNameById(7369, &quot;SMITH&quot;);\n\n        userService.updateEmpSalaryById(7369, 900.0);\n    &#125;\n\n    &#x2F;**\n     * 不修改同一条数据，并破坏第二条修改薪资的sql语句，查看是否同时失败\n     * 结果，第一条成功，第二条失败\n     *&#x2F;\n    @Test\n    public void testDemo2() &#123;\n        userService.updateTwice(7369, &quot;HH&quot;, 7499, 1700.0);\n    &#125;\n\n    &#x2F;&#x2F; 添加事务功能,并开启，且在updateTwice方法上添加使用事务的注解\n\n    &#x2F;**\n     * 再次调用updateTwice方法,看是否同时成功同时失败\n     *\n     * 效果：控制台报错，主要是因为第二项失败，而第一项名字修改也没有成功\n     *&#x2F;\n    @Test\n    public void testDemo3() &#123;\n        userService.updateTwice(7369, &quot;SMITH&quot;, 7499, 1700.0);\n    &#125;\n\n    &#x2F;**\n     * 将sql修改正确\n     *\n     * 效果： 同时成功\n     *&#x2F;\n    @Test\n    public void testDemo4() &#123;\n        userService.updateTwice(7369, &quot;SMITH&quot;, 7499, 1700.0);\n    &#125;\n\n    &#x2F;**\n     * 添加日子功能，在日志中查看事务\n     *&#x2F;\n    @Test\n    public void testDemo5()&#123;\n        String s &#x3D; userService.selectEmpNameById(7369);\n        System.out.println(s);\n    &#125;\n\n\n&#125;</code></pre>\n\n\n\n<h5 id=\"3-2、业务添加在哪一层\"><a href=\"#3-2、业务添加在哪一层\" class=\"headerlink\" title=\"3.2、业务添加在哪一层\"></a>3.2、业务添加在哪一层</h5><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-2.png\" alt=\"image-20210715105012878\"></p>\n<h5 id=\"3-3、基本的事务控制\"><a href=\"#3-3、基本的事务控制\" class=\"headerlink\" title=\"3.3、基本的事务控制\"></a>3.3、基本的事务控制</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在需要的业务上添加 事务注解</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-3.png\" alt=\"image-20210715105225594\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>启用日志，方便 查看运行过程 ，清晰了解事务的开启 提交 回滚 关闭</p>\n<p>使用 logback日志框架，添加logback.xml文件</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;configuration debug&#x3D;&quot;true&quot;&gt;\n    &lt;!-- 指定日志输出的位置 --&gt;\n    &lt;appender name&#x3D;&quot;STDOUT&quot;\n              class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;encoder&gt;\n            &lt;!-- 日志输出的格式 --&gt;\n            &lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;\n            &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n\n    &lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;\n    &lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;\n        &lt;appender-ref ref&#x3D;&quot;STDOUT&quot; &#x2F;&gt;\n    &lt;&#x2F;root&gt;\n\n    &lt;!-- 根据特殊需求指定局部日志级别 --&gt;\n    &lt;logger name&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot; level&#x3D;&quot;DEBUG&quot;&#x2F;&gt;\n    &lt;logger name&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot; level&#x3D;&quot;DEBUG&quot; &#x2F;&gt;\n\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试 —–&gt;   成功提交事务，失败回滚事务</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-4.png\" alt=\"image-20210715105703702\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-5.png\" alt=\"image-20210715110059369\"></p>\n<h4 id=\"4、事务注解位置\"><a href=\"#4、事务注解位置\" class=\"headerlink\" title=\"4、事务注解位置\"></a>4、事务注解位置</h4><hr>\n<p>位置</p>\n<p>​     类上：该类的<strong>所有方法都启用</strong>事务</p>\n<p>​     方法上：只有该方法启用事务，和其他方法无关</p>\n<p>​     如果类上和某些方法上都有事务，以方法上的事务配置为准。（<strong>就近优先</strong>）</p>\n<p>测试代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 如果类中的每一个方法都需要添加事务，那么可以提取到类上\n *[com.atguigu.service.impl.UserServiceImpl3.selectEmpNameById]:\n * PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly]\n *&#x2F;\n@Test\npublic void testDemo1() &#123;\n    String s &#x3D; userService.selectEmpNameById(7369);\n    System.out.println(s);\n&#125;\n\n&#x2F;**\n * 对一个方法来说，离它最近的@Transactional注解中的事务属性设置生效。\n *\n *在selectEmpName上添加就近的事务管理注解，并设置readOnly&#x3D;false\n * [com.atguigu.service.impl.UserServiceImpl3.selectEmpNameById]:\n * PROPAGATION_REQUIRED,ISOLATION_DEFAULT]\n *\n * PS：Spring 环境下很多场合都有类似设定，一个注解如果标记了类的每一个方法那么通常就可以提取到类级别。\n *&#x2F;\n@Test\npublic void testDemo2() &#123;\n    String s &#x3D; userService.selectEmpNameById(7369);\n    System.out.println(s);\n&#125;</code></pre>\n\n<hr>\n<h4 id=\"5、事务中的五大属性\"><a href=\"#5、事务中的五大属性\" class=\"headerlink\" title=\"5、事务中的五大属性\"></a>5、事务中的五大属性</h4><hr>\n<p>Propagation 传播特性      Isolation 隔离级别        timeout 超时时间         readonly 只读事务         （异常回滚类型）</p>\n<h5 id=\"5-1、只读\"><a href=\"#5-1、只读\" class=\"headerlink\" title=\"5.1、只读\"></a>5.1、只读</h5><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p>\n<p>针对增删改操作设置只读，就会抛出异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>问题：查询不使用事务， 还是使用只读事务？？<strong>应用场合：</strong></p></blockquote>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；</p>\n<p>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用事务注解 @Transaction中的属性 readOnly 开启或关闭只读属性</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n@Transactional(readOnly &#x3D; true)\npublic void updateEmpNameById(Integer empId, String empName) &#123;\n    userDao.updateEmpNameById(empId, empName);\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试只读</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试只读\n * [Creating new transaction with name [com.atguigu.service.impl.UserServiceImpl2.selectEmpNameById]:\n * PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly]，我们发现会多一个readOnly\n *&#x2F;\n@Test\npublic void testDemo1() &#123;\n    String s &#x3D; userService.selectEmpNameById(7369);\n    System.out.println(s);\n&#125;\n\n&#x2F;**    \n * 设置 修改操作为只读\n *\n * 【结果，控制台】\n * org.springframework.dao.TransientDataAccessResourceException: PreparedStatementCallback;\n * SQL [update emp set ename&#x3D;? where empno&#x3D;?];\n * Connection is read-only. Queries leading to data modification are not allowed;\n * nested exception is java.sql.SQLException: Connection is read-only.\n * Queries leading to data modification are not allowed\n *&#x2F;\n@Test\npublic void testDemo2()&#123;\n    userService.updateEmpNameById(7369,&quot;HH&quot;);\n&#125;</code></pre>\n\n\n\n<h5 id=\"5-2、超时\"><a href=\"#5-2、超时\" class=\"headerlink\" title=\"5.2、超时\"></a>5.2、超时</h5><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p>\n<p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p>\n<p>概括来说就是一句话：<strong>超时回滚，释放资源</strong>。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-6.png\" alt=\"image-20210715111816477\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 事务属性：超时\n *\n * 超时的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。\n *\n *  | @Transactional(readOnly &#x3D; true,timeout &#x3D; 5)\n *  在UserDaoImpl中执行sql语言前设置 睡眠时间 8秒\n *  TimeUnit.SECONDS.sleep(8);\n *\n *  效果：修改没成功\n *  org.springframework.transaction.TransactionTimedOutException:\n *  Transaction timed out: deadline was Wed Jul 14 16:36:30 CST 2021\n *&#x2F;\n@Test\npublic void testDemo1() &#123;\n    userService.updateTwice(7369,&quot;SMITH&quot;,7499,1600.0);\n&#125;</code></pre>\n\n<p>注意</p>\n<p>如果一个事务中，启用了两个操作，后一个超时，第一个操作也会回滚</p>\n<p>如果超时，出现如下错误：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">org.springframework.transaction.TransactionTimedOutException: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2021</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>超时的操作只能加在这个位置，加在执行sql语句后将不起作用</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-7.png\" alt=\"image-20210715112332556\"></p>\n<h5 id=\"5-3、回滚和不回滚异常\"><a href=\"#5-3、回滚和不回滚异常\" class=\"headerlink\" title=\"5.3、回滚和不回滚异常\"></a>5.3、回滚和不回滚异常</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>默认只针对运行时异常回滚，编译时异常不回滚</strong>。情景模拟代码如下：</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void updateEmpSalaryById(Integer empId, Double salary) throws FileNotFoundException &#123;\n    String sql &#x3D; &quot;update t_emp set emp_salary&#x3D;? where emp_id&#x3D;?&quot;;\n    jdbcTemplate.update(sql, salary, empId);\n\n    &#x2F;&#x2F;  抛出编译时异常测试是否回滚（编译期间，查找文件所处位置）\n        new FileInputStream(&quot;aaaa.aaa&quot;);\n\n    &#x2F;&#x2F;  抛出运行时异常测试是否回滚\n    &#x2F;&#x2F;  System.out.println(10 &#x2F; 0);\n&#125;</code></pre>\n\n<p>rollbackFor属性：需要设置一个Class类型的对象  （ @Transactional(rollbackFor = Exception.class)  ）</p>\n<p>rollbackForClassName属性：需要设置一个字符串类型的全类名</p>\n<p>noRollbackFor属性：在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。</p>\n<p>@Transactional(noRollbackFor = FileNotFoundException.class)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 事务属性：编译时异常不回滚\n *\n * 添加编译时异常，在serviceImpl实现类中的第一条语句和第二条语句中间加入new FileInputStream(&quot;aaaa.aaa&quot;);\n * 编译时，会找不到文件\n *\n * 效果：第一条成功，第二条失败，所以，虽然添加了事务，但是，编译时并不会回滚\n *&#x2F;\n@Test\npublic void testDemo2() throws FileNotFoundException &#123;\n    userService.updateTwice(7369,&quot;SMITH&quot;,7499,1800.0);\n&#125;\n\n&#x2F;**\n * 设置回滚异常\n *\n * Transactional设置回滚异常的属性\n * rollbackFor属性：需要设置一个Class类型的对象\n * rollbackForClassName属性：需要设置一个字符串类型的全类名\n * 设置异常不回滚的属性\n * noRollbackFor &#x3D; FileNotFoundException.class\n *\n * |设置 @Transactional(rollbackFor &#x3D; FileNotFoundException.class)\n *\n * 效果：进行行了回滚，都没成功\n * [17:08:47.897] [DEBUG] [main] [org.springframework.jdbc.datasource.DataSourceTransactionManager] [Initiating transaction rollback]\n * [17:08:47.897] [DEBUG] [main] [org.springframework.jdbc.datasource.DataSourceTransactionManager] [Rolling back JDBC transaction on Connection\n *&#x2F;\n@Test\npublic void testDemo3() throws FileNotFoundException &#123;\n    userService.updateTwice(7369,&quot;HH&quot;,7499,1700.0);\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所有的异常都回滚</p></blockquote>\n<p>方法1：设置rollbackFor=Exception.class</p>\n<p>方法2：异常链。底层出现了检查异常，进行处理，并向上层抛出一个新的异常（一般是运行异常）。既可以传递异常到上层，还可以避免方法签名中使用throws。在Spring事务中还可以实现所有异常都回滚的效果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Transactional(timeout &#x3D; 5,rollbackFor &#x3D; Exception.class)</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void updateEmpSalaryById(Integer empId, Double salary) &#123;   \n\tString sql &#x3D; &quot;update t_emp set emp_salary&#x3D;? where emp_id&#x3D;?&quot;;   \n\tjdbcTemplate.update(sql, salary, empId);   \n    \n    &#x2F;&#x2F;int n &#x3D; 10&#x2F;0;   \n    &#x2F;&#x2F;new FileInputStream(&quot;asdfadf&quot;);   \n    try&#123;\n        FileInputStream(&quot;asdfadf&quot;);    \n    &#125; catch (FileNotFoundException e) &#123;     \n        e.printStackTrace();     \n        throw new RuntimeException(e.getMessage()); \n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"5-4、隔离级别\"><a href=\"#5-4、隔离级别\" class=\"headerlink\" title=\"5.4、隔离级别\"></a>5.4、隔离级别</h5><p>脏读 :一个事务读到了另一个事务的未提交的数据</p>\n<p>不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致.</p>\n<p>幻读 :一个事务读到了另一个事务已经提交的 insert或者delete 的数据导致多次查询结果不一致.</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>read-uncommitted</td>\n<td>允许A事务读取其他事务未提交和已提交的数据。会出现脏读、不可重复读、幻读问题</td>\n</tr>\n<tr>\n<td>read-committed</td>\n<td>只允许A事务读取其他事务已提交的数据。可以避免脏读，但仍然会出现不可重复读、幻读问题</td>\n</tr>\n<tr>\n<td>repeatable-read</td>\n<td>确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读。但是幻读问题仍然存在。注意：mysql中使用了MVCC多版本控制技术，在这个级别也可以避免幻读。</td>\n</tr>\n<tr>\n<td>serializable</td>\n<td>确保事务可以从一个表中读取相同的行，相同的记录。在这个事务持续期间，禁止其他事务对该表执行插入、更新、删除操作。所有并发问题都可以避免，但性能十分低下。</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring的隔离级别</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public enum Isolation &#123;\n    DEFAULT(-1),\n    READ_UNCOMMITTED(1),\n    READ_COMMITTED(2),\n    REPEATABLE_READ(4),\n    SERIALIZABLE(8);\n\n    private final int value;\n    private Isolation(int value) &#123;\n        this.value &#x3D; value;\n    &#125;\n    public int value() &#123;\n        return this.value;\n    &#125;\n&#125;</code></pre>\n\n<p>如果选择DEFAULT，默认值，由底层数据库自动判断应该使用什么隔离级别。</p>\n<p>对于互联网高并发项目来说，如果采用隔离级别SERIALIZABLE，固然安全，担心性能会受到严重影响。此时一般将隔离级别降低，保证效率，再配合悲观锁、乐观锁等技术来保证安全性。</p>\n<p>事务的隔离级别要得到底层数据库引擎的支持, 而不是应用程序或者框架的支持。Oracle 支持的 2 种事务隔离级别：READ_COMMITED（默认） , SERIALIZABLE。MySQL 支持 4种事务隔离级别，默认REPEATABLE READ。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用注解 @Transaction 中的属性 isolation 设置隔离级别</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n@Transactional(readOnly &#x3D; false,isolation &#x3D; Isolation.REPEATABLE_READ)\npublic void updateEmpNameById(Integer empId, String empName) &#123;\n    userDao.updateEmpNameById(empId, empName);\n&#125;</code></pre>\n\n<p>测试代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 设置两个方法的隔离级别是：isolation &#x3D; Isolation.READ_UNCOMMITTED\n * 在 UserDaoImpl 的jdbcTemplate执行完sql语句后，自定义一个错误，打断点，我们运行此测试方法，跳到断点\n * 我们在开启查询方法，直接运行完成，发现得到的输出结果是  HH，此时的数据还未提交，继续运行，报错后会进行rollback\n *\n * 设置隔离级别是：isolation &#x3D; Isolation.READ_COMMITTED\n * 同时开启1,2两个事务\n * 1.查询名字 2.修改 （数据没有提交，就查不到，只能读到数据库中的） 1.再次查询（与第一次是同一次事务）\n * 我们发现我们只能读到已经提交的\n * 但是同时我们会发现，第一次查和第二次查的不一样\n *\n * 设置隔离级别是：isolation &#x3D; Isolation.REPEATABLE_READ\n * 在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读\n * 开启了两个事务，1进行添加id为7的员工后，在第2事务也进行添加id为7的操作，却发现无用，这就是幻读\n *&#x2F;\n@Test\npublic void updateNameTest()&#123;\n    userService.updateEmpNameById(7369,&quot;GG&quot;);\n&#125;\n\n@Test\npublic void getNameTest()&#123;\n    String s &#x3D; userService.selectEmpNameById(7369);\n    System.out.println(s);\n&#125;</code></pre>\n\n\n\n<h5 id=\"5-5、传播特性\"><a href=\"#5-5、传播特性\" class=\"headerlink\" title=\"5.5、传播特性\"></a>5.5、传播特性</h5><p>在大多数情况下，我们会认为事务操作要么都成功，要么回到初始状态。比如下订单，如果主订单添加成功，三个订单明细添加成功两个，总额就对不上了，顾客最终收货会有减少的。这种情况肯定要保证全部成功。类似还有银行转账例子。但也存在不同的需求，</p>\n<p>一般是业务层直接调用DAO层，不存在业务层平行调用的问题。哪怎么会有被调用的方法还是否开启事务的问题呢？比如：</p>\n<p>①Service方法应用了通知</p>\n<p>②过滤器或拦截器等类似组件</p>\n<p>@Transactional 注解通过 <strong>propagation</strong> 属性设置事务的传播行为。它的默认值是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Propagation propagation() default Propagation.REQUIRED;</code></pre>\n\n<p>propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>REQUIRED</strong></td>\n<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是默认值。</td>\n</tr>\n<tr>\n<td><strong>REQUIRES_NEW</strong></td>\n<td>新建事务，如果当前存在事务，把当前事务挂起。</td>\n</tr>\n<tr>\n<td>SUPPORTS</td>\n<td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td>\n</tr>\n<tr>\n<td>MANDATORY</td>\n<td>使用当前的事务，如果当前没有事务，就抛出异常。</td>\n</tr>\n<tr>\n<td>NOT_SUPPORTED</td>\n<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>\n</tr>\n<tr>\n<td>NEVER</td>\n<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>\n</tr>\n<tr>\n<td>NESTED</td>\n<td>如当前存在事务，则在嵌套事务内执行。如当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</td>\n</tr>\n</tbody></table>\n<p><strong>测试 REQUIRED  REQUIRES_NEW模式</strong></p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-8.png\"/>\n    <== REQUIRED --- REQUIRES_NEW ==>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-9.png\" \"/>\n</div>\n\n<p>测试代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)\npublic void updateEmpNameById(Integer empId, String empName) &#123;\n    userDao.updateEmpNameById(empId, empName);\n&#125;\n\n&#x2F;**\n * 通过id改薪水\n *\n * @param empId\n * @param salary\n *&#x2F;\n@Override\n@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)\npublic void updateEmpSalaryById(Integer empId, Double salary) &#123;\n    System.out.println(10 &#x2F; 0);\n    userDao.updateEmpSalaryById(empId, salary);\n&#125;\n\n&#x2F;&#x2F; 为了便于核对数据库操作结果，不要修改同一条记录\n@Override\n@Transactional\npublic void updateTwice(\n    &#x2F;&#x2F; 修改员工姓名的一组参数\n    Integer empId, String newName,\n    &#x2F;&#x2F; 修改员工工资的一组参数\n    Integer empIdSalary, Double newSalary\n) &#123;\n    &#x2F;&#x2F; 为了测试事务是否生效，执行两个数据库操作，看它们是否会在某一个失败时一起回滚\n    userDao.updateEmpNameById(empId, newName);\n\n    userDao.updateEmpSalaryById(empIdSalary, newSalary);\n\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试事务的传播性\n *\n * 一个方法调用了两个方法，使第二个方法内部抛出异常，想让第一条执行成功，第二条失败\n *\n * propagation 属性的可选值为 REQUIRED\n * 发现两条语句都没执行成功 \n *\n * propagation 属性的可选值为 REQUIRES_NEW\n * 第一条成功，第二条失败\n *&#x2F;\n@Test\npublic void updateNameTest()&#123;\n    topicService.runTwice();\n&#125;</code></pre>\n\n<p>我们在事务传播行为这里，<strong>使用 REQUIRES_NEW 属性</strong>，也可以说是让不同事务方法从事务的使用上<strong>解耦合</strong>，不要互相影响。</p>\n<p>过滤器或拦截器等类似组件</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-transaction-10.png\" alt=\"images\"></p>\n<h4 id=\"6、Spring5-新特性\"><a href=\"#6、Spring5-新特性\" class=\"headerlink\" title=\"6、Spring5 新特性\"></a>6、Spring5 新特性</h4><hr>\n<h5 id=\"6-1、JSP305标准相关注解\"><a href=\"#6-1、JSP305标准相关注解\" class=\"headerlink\" title=\"6.1、JSP305标准相关注解\"></a>6.1、JSP305标准相关注解</h5><p>CP：JCP（Java Community Process) 是一个由SUN公司发起的，开放的国际组织。主要由Java开发者以及被授权者组成，负责Java技术规范维护，Java技术发展和更新。</p>\n<p>JSR ：Java Specification Request，意思是 Java 规范提案。谁向谁提案呢？任何人都可以向 JCP (Java Community Process) 提出新增一个标准化技术规范的正式请求。</p>\n<p>JSR 305: 使用注解（例如@NonNull等等）协助开发者侦测软件缺陷</p>\n<p>Spring5中对JSR305提案给出了实现</p>\n<table>\n<thead>\n<tr>\n<th><strong>注解名称</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>可标记位置</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Nullable</td>\n<td>可以为空</td>\n<td>@Target({ElementType.<strong>METHOD</strong>,  ElementType.<strong>PARAMETER</strong>,  ElementType.<strong>FIELD</strong>})</td>\n</tr>\n<tr>\n<td>@NonNull</td>\n<td>不应为空</td>\n<td>@Target({ElementType.<strong>METHOD</strong>, ElementType.<strong>PARAMETER</strong>, ElementType.<strong>FIELD</strong>})</td>\n</tr>\n<tr>\n<td>@NonNullFields</td>\n<td>在特定包下的字段不应为空</td>\n<td>@Target(ElementType.<strong>PACKAGE</strong>)   @TypeQualifierDefault(ElementType.<strong>FIELD</strong>)</td>\n</tr>\n<tr>\n<td>@NonNullApi</td>\n<td>参数和方法返回值不应为空</td>\n<td>@Target(ElementType.<strong>PACKAGE</strong>)   @TypeQualifierDefault({ElementType.<strong>METHOD</strong>, ElementType.<strong>PARAMETER</strong>})</td>\n</tr>\n</tbody></table>\n<p> 以上注解是Spring5提供的，不是JDK提供的。</p>\n<h5 id=\"6-2、整合Junit5\"><a href=\"#6-2、整合Junit5\" class=\"headerlink\" title=\"6.2、整合Junit5\"></a>6.2、整合Junit5</h5><p>注意：Junit5的@Test和Junit4的@Test不是一个包下，要使用Junit5的@Test</p>\n<p>Junit4：org.junit.Test</p>\n<p>Junit5：org.junit.jupiter.api.Test;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RunWith(SpringJUnit4ClassRunner.class)\n&#x2F;*@ExtendWith(SpringExtension.class)\n@ContextConfiguration(value &#x3D; &quot;classpath:applicationContext.xml&quot;)*&#x2F;\n\n@SpringJUnitConfig(locations&#x3D;&quot;classpath:applicationContext.xml&quot;)\npublic class testJunit5 &#123;\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Test\n    public void test1() throws SQLException &#123;\n\n        Connection connection &#x3D; dataSource.getConnection();\n        System.out.println(connection);\n\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<h4 id=\"7、事务使用xml配置\"><a href=\"#7、事务使用xml配置\" class=\"headerlink\" title=\"7、事务使用xml配置\"></a>7、事务使用xml配置</h4><hr>\n<p>相比于基于注解的声明式事务，基于 XML 的声明式事务需要一个额外的依赖：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>将上一个基于注解的 module 中的代码转移到新module。去掉 @Transactional 注解。</p>\n<p>去掉 tx:annotation-driven 标签，然后加入下面的配置：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">\n&lt;aop:config&gt;\n    &lt;!-- 配置切入点表达式，将事务功能定位到具体方法上 --&gt;\n    &lt;aop:pointcut id&#x3D;&quot;txPoincut&quot; expression&#x3D;&quot;execution(* *..*Service.*(..))&quot;&#x2F;&gt;\n    \n    &lt;!-- 将事务通知和切入点表达式关联起来 --&gt;\n    &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;txPoincut&quot;&#x2F;&gt;\n    \n&lt;&#x2F;aop:config&gt;\n    \n&lt;!-- tx:advice标签：配置事务通知 --&gt;\n&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;\n&lt;!-- transaction-manager属性：关联事务管理器 --&gt;\n&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;\n    &lt;tx:attributes&gt;\n    \n        &lt;!-- tx:method标签：配置具体的事务方法 --&gt;\n        &lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;\n        &lt;tx:method name&#x3D;&quot;get*&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;\n        &lt;tx:method name&#x3D;&quot;query*&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;\n        &lt;tx:method name&#x3D;&quot;find*&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;\n    \n        &lt;!-- read-only属性：设置只读属性 --&gt;\n        &lt;!-- rollback-for属性：设置回滚的异常 --&gt;\n        &lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;\n        &lt;!-- isolation属性：设置事务的隔离级别 --&gt;\n        &lt;!-- timeout属性：设置事务的超时属性 --&gt;\n        &lt;!-- propagation属性：设置事务的传播行为 --&gt;\n        &lt;tx:method name&#x3D;&quot;save*&quot; read-only&#x3D;&quot;false&quot; rollback-for&#x3D;&quot;java.lang.Exception&quot; propagation&#x3D;&quot;REQUIRES_NEW&quot;&#x2F;&gt;\n        &lt;tx:method name&#x3D;&quot;update*&quot; read-only&#x3D;&quot;false&quot; rollback-for&#x3D;&quot;java.lang.Exception&quot; propagation&#x3D;&quot;REQUIRES_NEW&quot;&#x2F;&gt;\n        &lt;tx:method name&#x3D;&quot;delete*&quot; read-only&#x3D;&quot;false&quot; rollback-for&#x3D;&quot;java.lang.Exception&quot; propagation&#x3D;&quot;REQUIRES_NEW&quot;&#x2F;&gt;\n    &lt;&#x2F;tx:attributes&gt;\n&lt;&#x2F;tx:advice&gt;</code></pre>\n\n<p><strong>其余自行百度</strong></p>\n","text":"1、JdbcTemplate Spring提供了整合JDBC的JDBCTemplate，先有Spring，再出现MyBatis，所以整合包不是Spring提供的，而是第三方提供的。 JDBCTemplate和MyBatis共同点：都是对JDBC进行了封装 不同点：肯定是MyBat...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81JdbcTemplate\"><span class=\"toc-text\">1、JdbcTemplate</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.1、常用方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">1.2、配置环境</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.3、使用方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E4%BC%98%E7%BC%BA%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">1.4、优缺总结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">2、声明式事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E5%A3%B0%E6%98%8E%E5%BC%8F%EF%BC%8C%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">2.1、声明式，编程式事务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.2 事务管理器</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">3、使用事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">3.1、准备工作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E4%B8%9A%E5%8A%A1%E6%B7%BB%E5%8A%A0%E5%9C%A8%E5%93%AA%E4%B8%80%E5%B1%82\"><span class=\"toc-text\">3.2、业务添加在哪一层</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3%E3%80%81%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3.3、基本的事务控制</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">4、事务注解位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E4%BA%8B%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BA%94%E5%A4%A7%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5、事务中的五大属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1%E3%80%81%E5%8F%AA%E8%AF%BB\"><span class=\"toc-text\">5.1、只读</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2%E3%80%81%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">5.2、超时</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E5%9B%9E%E6%BB%9A%E5%92%8C%E4%B8%8D%E5%9B%9E%E6%BB%9A%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">5.3、回滚和不回滚异常</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-4%E3%80%81%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">5.4、隔离级别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5%E3%80%81%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">5.5、传播特性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81Spring5-%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">6、Spring5 新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1%E3%80%81JSP305%E6%A0%87%E5%87%86%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">6.1、JSP305标准相关注解</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-2%E3%80%81%E6%95%B4%E5%90%88Junit5\"><span class=\"toc-text\">6.2、整合Junit5</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8xml%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">7、事务使用xml配置</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SpringMVC 基础功能","uid":"0873bab37682d9a4ef349b4c3c9c31a9","slug":"52-SpringMVC-基础功能","date":"2021-09-13T15:29:32.000Z","updated":"2021-09-15T10:50:36.880Z","comments":true,"path":"api/articles/52-SpringMVC-基础功能.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"01、springMVC 入门① 传统 MVC 架构使用MVC架构（JSP/Thymeleaf+Servlet+JavaBean）进行分层开发，可以实现分工协作、可以实现组件重用、可以利于后期维护。 缺点如下 每个功能都要声明对应的Servlet，Servlet数量多。即使让一个...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Spring 面向切面编程","uid":"e2df2a86487823e0935863049b9742d3","slug":"50-Spring-面向切面编程","date":"2021-09-13T15:27:32.000Z","updated":"2021-09-15T10:50:56.442Z","comments":true,"path":"api/articles/50-Spring-面向切面编程.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","text":"1. AOP是什么 AOP是Aspect Oriented Programming的缩写，意思是：面向切面编程，它是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 可以认为AOP是对OOP(Object Oriented Programming 面向对象编程)的...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}