{"title":"SpringCloud Slueth","uid":"2254a0dbf3036d34e7e7cb5837d981ff","slug":"71-SpringCloud-Slueth","date":"2021-09-13T15:47:32.000Z","updated":"2021-09-15T10:46:21.111Z","comments":true,"path":"api/articles/71-SpringCloud-Slueth.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog5.jpg","content":"<h4 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><p>随着业务发展，系统拆分导致系统调用链路愈发复杂一个前端请求可能最终需要调用很多次后端服务才能完成，当整个请求变慢或不可用时，我们是无法得知该请求是由某个或某些后端服务引起的，这时就需要解决如何快读定位服务故障点，以对症下药。于是就有了分布式系统调用跟踪的诞生。</p>\n<p>现今业界分布式服务跟踪的理论基础主要来自于 Google 的一篇论文<a href=\"https://research.google.com/pubs/pub36356.html\">《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》</a>，使用最为广泛的开源实现是 Twitter 的 Zipkin，为了实现平台无关、厂商无关的分布式服务跟踪，CNCF 发布了布式服务跟踪标准 Open Tracing。国内，淘宝的“鹰眼”、京东的“Hydra”、大众点评的“CAT”、新浪的“Watchman”、唯品会的“Microscope”、窝窝网的“Tracing”都是这样的系统。</p>\n<h4 id=\"2、Spring-Cloud-Sleuth\"><a href=\"#2、Spring-Cloud-Sleuth\" class=\"headerlink\" title=\"2、Spring Cloud Sleuth\"></a>2、Spring Cloud Sleuth</h4><p>一般的，一个分布式服务跟踪系统，主要有三部分：数据收集、数据存储和数据展示。根据系统大小不同，每一部分的结构又有一定变化。譬如，对于大规模分布式系统，数据存储可分为实时数据和全量数据两部分，实时数据用于故障排查（troubleshooting），全量数据用于系统优化；数据收集除了支持平台无关和开发语言无关系统的数据收集，还包括异步数据收集（需要跟踪队列中的消息，保证调用的连贯性），以及确保更小的侵入性；数据展示又涉及到数据挖掘和分析。虽然每一部分都可能变得很复杂，但基本原理都类似。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:11:19.png\" alt=\"img\"></p>\n<p>服务追踪的追踪单元是从客户发起请求（request）抵达被追踪系统的边界开始，到被追踪系统向客户返回响应（response）为止的过程，称为一个“trace”。每个 trace 中会调用若干个服务，为了记录调用了哪些服务，以及每次调用的消耗时间等信息，在每次调用服务时，埋入一个调用记录，称为一个“span”。这样，若干个有序的 span 就组成了一个 trace。在系统向外界提供服务的过程中，会不断地有请求和响应发生，也就会不断生成 trace，把这些带有span 的 trace 记录下来，就可以描绘出一幅系统的服务拓扑图。附带上 span 中的响应时间，以及请求成功与否等信息，就可以在发生问题的时候，找到异常的服务；根据历史数据，还可以从系统整体层面分析出哪里性能差，定位性能优化的目标。</p>\n<p>Spring Cloud Sleuth为服务之间调用提供链路追踪。通过Sleuth可以很清楚的了解到一个服务请求经过了哪些服务，每个服务处理花费了多长。从而让我们可以很方便的理清各微服务间的调用关系。此外Sleuth可以帮助我们：</p>\n<ul>\n<li>耗时分析: 通过Sleuth可以很方便的了解到每个采样请求的耗时，从而分析出哪些服务调用比较耗时;</li>\n<li>可视化错误: 对于程序未捕捉的异常，可以通过集成Zipkin服务界面上看到;</li>\n<li>链路优化: 对于调用比较频繁的服务，可以针对这些服务实施一些优化措施。</li>\n</ul>\n<p>spring cloud sleuth可以结合zipkin，将信息发送到zipkin，利用zipkin的存储来存储信息，利用zipkin ui来展示数据。</p>\n<p>这是Spring Cloud Sleuth的概念图：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:13:01.png\" alt=\"img\"></p>\n<h4 id=\"3、ZipKin\"><a href=\"#3、ZipKin\" class=\"headerlink\" title=\"3、ZipKin\"></a>3、ZipKin</h4><p>Zipkin 是一个开放源代码分布式的跟踪系统，由Twitter公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</p>\n<p>每个服务向zipkin报告计时数据，zipkin会根据调用关系通过Zipkin UI生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</p>\n<p>Zipkin提供了可插拔数据存储方式：In-Memory、MySql、Cassandra以及Elasticsearch。接下来的测试为方便直接采用In-Memory方式进行存储，生产推荐Elasticsearch。</p>\n<h4 id=\"4、快速上手\"><a href=\"#4、快速上手\" class=\"headerlink\" title=\"4、快速上手\"></a>4、快速上手</h4><h5 id=\"创建zipkin-server项目\"><a href=\"#创建zipkin-server项目\" class=\"headerlink\" title=\"创建zipkin-server项目\"></a>创建zipkin-server项目</h5><p><strong>项目依赖</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.zipkin.java&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;zipkin-server&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.zipkin.java&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p><strong>启动类</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@SpringBootApplication\n@EnableEurekaClient\n@EnableZipkinServer\npublic class ZipkinApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ZipkinApplication.class, args);\n    &#125;\n\n&#125;</code></pre>\n\n<p>使用了<code>@EnableZipkinServer</code>注解，启用Zipkin服务。</p>\n<p><strong>配置文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eureka:\n  client:\n    serviceUrl:\n      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;\nserver:\n  port: 9000\nspring:\n  application:\n    name: zipkin-server</code></pre>\n\n<p>配置完成后依次启动示例项目：<code>spring-cloud-eureka</code>、<code>zipkin-server</code>项目。刚问地址:<code>http://localhost:9000/zipkin/</code>可以看到Zipkin后台页面</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:11:21.png\" alt=\"img\"></p>\n<h5 id=\"项目添加zipkin支持\"><a href=\"#项目添加zipkin支持\" class=\"headerlink\" title=\"项目添加zipkin支持\"></a>项目添加zipkin支持</h5><p>在项目<code>spring-cloud-producer</code>和<code>spring-cloud-zuul</code>中添加zipkin的支持。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>Spring应用在监测到Java依赖包中有sleuth和zipkin后，会自动在RestTemplate的调用过程中向HTTP请求注入追踪信息，并向Zipkin Server发送这些信息。</p>\n<p>同时配置文件中添加如下代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spring:\n  zipkin:\n    base-url: http:&#x2F;&#x2F;localhost:9000\n  sleuth:\n    sampler:\n      percentage: 1.0</code></pre>\n\n<p>spring.zipkin.base-url指定了Zipkin服务器的地址，spring.sleuth.sampler.percentage将采样比例设置为1.0，也就是全部都需要。</p>\n<p>Spring Cloud Sleuth有一个Sampler策略，可以通过这个实现类来控制采样算法。采样器不会阻碍span相关id的产生，但是会对导出以及附加事件标签的相关操作造成影响。 Sleuth默认采样算法的实现是Reservoir sampling，具体的实现类是PercentageBasedSampler，默认的采样比例为: 0.1(即10%)。不过我们可以通过spring.sleuth.sampler.percentage来设置，所设置的值介于0.0到1.0之间，1.0则表示全部采集。</p>\n<p>这两个项目添加zipkin之后，依次进行启动。</p>\n<h5 id=\"进行验证\"><a href=\"#进行验证\" class=\"headerlink\" title=\"进行验证\"></a>进行验证</h5><p>这样我们就模拟了这样一个场景，通过外部请求访问Zuul网关，Zuul网关去调用<code>spring-cloud-producer</code>对外提供的服务。</p>\n<p>四个项目均启动后，在浏览器中访问地址：<code>http://localhost:8888/producer/hello?name=neo</code> 两次，然后再打开地址： <code>http://localhost:9000/zipkin/</code>点击对应按钮进行查看。</p>\n<p>点击查找看到有两条记录</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:12:42.png\" alt=\"img\"></p>\n<p>点击记录进去页面，可以看到每一个服务所耗费的时间和顺序</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:12:47.png\" alt=\"img\"></p>\n<p>点击依赖分析，可以看到项目之间的调用关系</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:10-11:12:53.png\" alt=\"img\"></p>\n","text":"1、概述随着业务发展，系统拆分导致系统调用链路愈发复杂一个前端请求可能最终需要调用很多次后端服务才能完成，当整个请求变慢或不可用时，我们是无法得知该请求是由某个或某些后端服务引起的，这时就需要解决如何快读定位服务故障点，以对症下药。于是就有了分布式系统调用跟踪的诞生。 现今业界分...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":4,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","count":4,"path":"api/tags/SpringCloud.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81Spring-Cloud-Sleuth\"><span class=\"toc-text\">2、Spring Cloud Sleuth</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81ZipKin\"><span class=\"toc-text\">3、ZipKin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\"><span class=\"toc-text\">4、快速上手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAzipkin-server%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">创建zipkin-server项目</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0zipkin%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">项目添加zipkin支持</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">进行验证</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SpringCloudALibaba Nacos","uid":"46276fa8df4cb43fb10a4919c6ba9d21","slug":"72-SpringCloudAlibaba-Nacos","date":"2021-09-13T15:48:32.000Z","updated":"2021-09-15T10:46:15.635Z","comments":true,"path":"api/articles/72-SpringCloudAlibaba-Nacos.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog4.jpg","text":"01、SpringCloud Alibaba 简介 1.1、SpringCloud Alibaba为何出现 1.2、SpringCloud Alibaba是什么诞生：2018.10.31，Spring Cloud Alibaba正式入驻了Spring Cloud官网孵化器，并在M...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/categories/SpringCloud-Alibaba.json"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/tags/SpringCloud-Alibaba.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"SpringCloud GateWay","uid":"6dd02a05274ef2720cdd348b80b5ceee","slug":"70-SpringCloud-GateWay","date":"2021-09-13T15:46:32.000Z","updated":"2021-09-15T10:46:26.355Z","comments":true,"path":"api/articles/70-SpringCloud-GateWay.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog6.jpg","text":"一、SpringCloud Gateway 网关 1、Gateway 的概念SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":4,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","count":4,"path":"api/tags/SpringCloud.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}