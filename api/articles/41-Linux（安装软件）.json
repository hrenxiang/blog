{"title":"Linux（软件）","uid":"0f4e1baf76f1d61cc7b69fa9f200505f","slug":"41-Linux（安装软件）","date":"2021-09-13T15:18:32.000Z","updated":"2021-09-15T10:52:34.149Z","comments":true,"path":"api/articles/41-Linux（安装软件）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","content":"<h4 id=\"1、安装-jdk\"><a href=\"#1、安装-jdk\" class=\"headerlink\" title=\"1、安装 jdk\"></a>1、安装 jdk</h4><p>目前使用的一台 m1 的 macbook pro ，但是安装上也大同小异</p>\n<p>下载 jdk：<a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:08:25-10:29:52.png\" alt=\"image-20210824171054544\"></p>\n<p>下载后使用工具将文件放到 linux 中的 /opt 目录下，windows一般使用 xftp，Mac （目前使用的是paralles desktop，但是装不上 pd tools）我使用的是 forklift</p>\n<p>在 /opt 目录下将 压缩包解压\u0003</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tar -zxvf jdk-8u301-linux-aarch64.tar.gz</code></pre>\n\n<p>得到 </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost opt]# ls\njdk1.8.0_301  jdk-8u301-linux-aarch64.tar.gz</code></pre>\n\n<p>配置环境变量，打开配置文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;profile</code></pre>\n\n<p>在最后追加配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk1.8.0_301\nexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</code></pre>\n\n<p>更新配置文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">source &#x2F;etc&#x2F;profile</code></pre>\n\n<p>进行测试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -version</code></pre>\n\n<p>成功如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost bin]# java -version\njava version &quot;1.8.0_301&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_301-b09)\nJava HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode)</code></pre>\n\n\n\n<h4 id=\"2、安装-tomcat\"><a href=\"#2、安装-tomcat\" class=\"headerlink\" title=\"2、安装 tomcat\"></a>2、安装 tomcat</h4><p>下载：apache-tomcat-7.0.70.tar.gz，也可以试试其他版本，这个没有特别要求</p>\n<p>解压到 /opt 目录中，进行解压，解压完成后进入 /opt/apache-tomcat-7.0.70/bin 可以使用命令启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.&#x2F;startup.sh</code></pre>\n\n<p>关闭</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.&#x2F;shutdown.sh</code></pre>\n\n<p>但是我们在其他目录没办法直接使用命令启动关闭，所以配置环境变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;profile</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export CATALINA_HOME&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70\nexport PATH&#x3D;$CATALINA_HOME&#x2F;bin:$PATH</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">source &#x2F;etc&#x2F;profile</code></pre>\n\n<p>在任意目录下，都可以使用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost opt]# startup.sh \nUsing CATALINA_BASE:   &#x2F;opt&#x2F;apache-tomcat-7.0.70\nUsing CATALINA_HOME:   &#x2F;opt&#x2F;apache-tomcat-7.0.70\nUsing CATALINA_TMPDIR: &#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;temp\nUsing JRE_HOME:        &#x2F;opt&#x2F;jdk1.8.0_301\nUsing CLASSPATH:       &#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;bootstrap.jar:&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;tomcat-juli.jar\nTomcat started.\n\n\n[root@localhost opt]# ps -ef |grep tomcat\nroot        3311       1 16 17:50 pts&#x2F;0    00:00:01 &#x2F;opt&#x2F;jdk1.8.0_301&#x2F;bin&#x2F;java -Djava.util.logging.config.file&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize&#x3D;2048 -Djava.endorsed.dirs&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;endorsed -classpath &#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;bootstrap.jar:&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;tomcat-juli.jar -Dcatalina.base&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70 -Dcatalina.home&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70 -Djava.io.tmpdir&#x3D;&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;temp org.apache.catalina.startup.Bootstrap start\nroot        3335    2619  0 17:51 pts&#x2F;0    00:00:00 grep --color&#x3D;auto tomcat\n\n\n[root@localhost opt]# shutdown.sh \nUsing CATALINA_BASE:   &#x2F;opt&#x2F;apache-tomcat-7.0.70\nUsing CATALINA_HOME:   &#x2F;opt&#x2F;apache-tomcat-7.0.70\nUsing CATALINA_TMPDIR: &#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;temp\nUsing JRE_HOME:        &#x2F;opt&#x2F;jdk1.8.0_301\nUsing CLASSPATH:       &#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;bootstrap.jar:&#x2F;opt&#x2F;apache-tomcat-7.0.70&#x2F;bin&#x2F;tomcat-juli.jar</code></pre>\n\n\n\n<h4 id=\"3、安装-msyql8\"><a href=\"#3、安装-msyql8\" class=\"headerlink\" title=\"3、安装 msyql8\"></a>3、安装 msyql8</h4><p>之前还有安装 5 的方法，但是现在 5 的官方下载中已经取消了 aarch的相关文件，所以只能被迫安装8了</p>\n<p>使用最新的包管理器安装MySQL</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo dnf install @mysql</code></pre>\n\n<p>开启启动，安装完成后，运行以下命令来启动MySQL服务并使它在启动时自动启动：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo systemctl enable --now mysqld</code></pre>\n\n<p>要检查MySQL服务器是否正在运行，请输入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo systemctl status mysqld</code></pre>\n\n<p>添加密码及安全设置，运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo mysql_secure_installation</code></pre>\n\n<p>步骤如下：</p>\n<ul>\n<li>\u001d配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置</li>\n<li>选择密码验证策略等级， 建议选择 low，回车</li>\n<li>输入新密码两次</li>\n<li>确认是否继续使用提供的密码？输入y ，回车</li>\n<li>移除匿名用户？ 输入y ，回车</li>\n<li>不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车</li>\n<li>移除test数据库？ 输入y ，回车</li>\n<li>重新载入权限表？ 输入y ，回车</li>\n</ul>\n<p>配置远程登陆，也就是配置 root 的 host 字段，将 localhost 修改为 %，将root用户的host字段设为 ‘%’ ，意为接受root 所有IP地址的登录请求，在 Linux 中登录 MySQL:</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql -uroot -p 密码</code></pre>\n\n<p>接着继续执行 mysql 语句，将将 root 用户的 host 字段设为 ‘%’ ：</p>\n<p>如果是mysql 5</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code></pre>\n\n<p>从 mysql 8开始,您不再可以(隐式)使用 GRANT 命令创建用户.请改用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-user.html\">CREATE USER</a>,，然后使用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/grant.html\">GRANT</a> 声明：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39;;\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; WITH GRANT OPTION;</code></pre>\n\n<p>刷新权限</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">flush privileges;</code></pre>\n\n<p>设置完成后输入exit退出mysql，回到终端shell界面，接着开启系统防火墙的3306端口：( 其实建议直接关闭防火墙 )</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo firewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent\nsudo firewall-cmd --reload\n\n# 关闭防火墙\nsystemctl stop firewalld.service\n# 永久关闭\nsystemctl disable firewalld.service</code></pre>\n\n<p>在宿主机上使用相关数据库可视化界面工具连接 linux 上的数据库</p>\n<h4 id=\"4、安装-Nginx\"><a href=\"#4、安装-Nginx\" class=\"headerlink\" title=\"4、安装 Nginx\"></a>4、安装 Nginx</h4><p>在线安装：</p>\n<ul>\n<li>第 1.0 步 安装openssl、zlib、gcc 依赖 <code>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></li>\n<li>第 2.1 步 联网下载pcre<br><code>wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</code></li>\n<li>第 2.2 步 解压压缩文件 <code>tar -zxvf pcre-8.37.tar.gz</code></li>\n<li>第 2.3 步 <code>./configure</code> 完成后，回到pcre目录下执行 <code>make</code>，最后执行 <code>make install</code></li>\n<li>第 2.4 步 <code>pcre-config --version</code>  检查版本</li>\n<li>第 3.0 步，安装nginx，先去官网下载安装包，最好是高点的版本，因为低版本 centos8 不能使用，我下载的是1.20.1 ，使用命令解压 然后进入解压缩目录，执行 <code>./configure</code> 然后 <code>make</code> &amp;&amp; <code>make install</code></li>\n<li>进入目录 <code>/usr/local/nginx/sbin</code>  执行 <code>./nginx</code> 启动服务</li>\n<li>第 4.0 步，关闭防火墙，访问nginx</li>\n</ul>\n<p>Nginx 相关命令，我们需要去相关目录下执行命令，下面我们一个命令直接到了相应目录并执行 nginx 相关操作</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># nginx版本检查\nnginx -v\n\n# nginx编译参数\nnginx -V\n\n# 启停方式\n- 启动\n\t[root@zls ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx\n\t[root@zls ~]# systemctl start nginx\n- 停止\n\t[root@zls ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop\n\t[root@zls ~]# systemctl stop nginx\n- 重启\n\t[root@zls ~]# systemctl restart nginx\n- 重载\n\t[root@zls ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload\n\t[root@zls ~]# systemctl reload nginx</code></pre>\n\n<p>==上述 — 使用 systemctl start nginx 来启动 nginx 是需要配置的，下面我们来创建并配置 nginx.service 文件==</p>\n<p>Systemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，可以直接使用systemctl相关命令。而用源码编译安装的，则需要手动创建nginx.service服务文件。</p>\n<p>配置nginx.service文件</p>\n<p>vim /usr/lib/systemd/system/nginx.service</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#配置文件内容\n[Unit]                                          \nDescription&#x3D;nginx \nAfter&#x3D;network.target \n\n[Service] \nType&#x3D;forking \nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx \nExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload \nExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s quit\nPrivateTmp&#x3D;true \n\n[Install] \nWantedBy&#x3D;multi-user.target\n\n#[Unit]:服务的说明\n#Description:描述服务\n#After:描述服务类别\n#[Service]服务运行参数的设置\n#Type&#x3D;forking是后台运行的形式\n#ExecStart为服务的具体运行命令\n#ExecReload为重启命令\n#ExecStop为停止命令\n#PrivateTmp&#x3D;True表示给服务分配独立的临时空间\n#注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n#[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#查看nginx服务状态\nsystemctl status nginx.service\n#启动nginx服务\nsystemctl start nginx.service\n#停止nginx服务\nsystemctl stop nginx.service\n#重启nginx服务\nsystemctl restart nginx.service\n#重新读取nginx配置(这个最常用, 不用停止nginx服务就能使修改的配置生效)\nsystemctl reload nginx.service</code></pre>\n\n\n\n<h4 id=\"5、安装-redis\"><a href=\"#5、安装-redis\" class=\"headerlink\" title=\"5、安装 redis\"></a>5、安装 redis</h4><p>前台启动（不推荐）：前台启动，命令行窗口不能关闭，否则服务器停止</p>\n<p>后台启动（推荐）</p>\n<p>备份redis.conf ，拷贝一份redis.conf到其他目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@localhost opt]# mkdir &#x2F;myredis\n[root@localhost opt]# cp redis-6.2.1&#x2F;redis.conf &#x2F;myredis&#x2F;redis.conf</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd reids-6.2.1\nmake\nmake install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis</code></pre>\n\n<p>后台启动设置daemonize no改成yes，修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p>\n<p>Redis启动</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server  &#x2F;myredis&#x2F;redis.conf</code></pre>\n\n<p>用客户端访问：/usr/local/redis/bin/redis-cli</p>\n<p>多个端口可以：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">redis-cli -p 6379</code></pre>\n\n<p>测试验证： ping，Redis Ping 命令使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG 。通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值。</p>\n<p>Redis关闭，单实例关闭：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">redis-cli shutdown</code></pre>\n\n<p>也可以进入终端后再关闭，多实例关闭，指定端口关闭</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">redis-cli -p 6379 shutdown</code></pre>\n\n\n\n<h4 id=\"6、安装-HAProxy\"><a href=\"#6、安装-HAProxy\" class=\"headerlink\" title=\"6、安装 HAProxy\"></a>6、安装 HAProxy</h4><p>步骤1.首先，让我们首先确保您的系统是最新的。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo clean all\nsudo dnf update</code></pre>\n\n<p>步骤2.在<a href=\"https://www.yundongfang.com/Yuntag/centos-8\">CentOS 8</a>上<a href=\"https://www.yundongfang.com/Yuntag/%E5%AE%89%E8%A3%85hapro\">安装HAPro</a>xy。</p>\n<p>HAProxy在默认的<a href=\"https://www.yundongfang.com/Yuntag/centos-8\">CentOS 8</a>上可用，现在使用以下<code>dnf</code>命令<a href=\"https://www.yundongfang.com/Yuntag/%E5%AE%89%E8%A3%85hapro\">安装HAPro</a>xy：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo dnf install haproxy</code></pre>\n\n<p>步骤3.配置HAProxy。进入配置文件：<code>/etc/haproxy/haproxy.cfg</code>，开启客户端，defaults 模块下添加 stats uri</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">defaults\n    stats uri \t\t    &#x2F;admin&#x2F;stats</code></pre>\n\n<p>启动停止服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo systemctl start haproxy\nsudo systemctl enable haproxy\nsudo systemctl stop haproxy</code></pre>\n\n","text":"1、安装 jdk目前使用的一台 m1 的 macbook pro ，但是安装上也大同小异 下载 jdk：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html 下载后使用工具将文件放到 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%89%E8%A3%85-jdk\"><span class=\"toc-text\">1、安装 jdk</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%89%E8%A3%85-tomcat\"><span class=\"toc-text\">2、安装 tomcat</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%89%E8%A3%85-msyql8\"><span class=\"toc-text\">3、安装 msyql8</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%AE%89%E8%A3%85-Nginx\"><span class=\"toc-text\">4、安装 Nginx</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%89%E8%A3%85-redis\"><span class=\"toc-text\">5、安装 redis</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%AE%89%E8%A3%85-HAProxy\"><span class=\"toc-text\">6、安装 HAProxy</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Redis","uid":"a978a5e93d8e6628e9f4ee713be55be8","slug":"42-Redis","date":"2021-09-13T15:19:32.000Z","updated":"2021-09-15T10:52:16.306Z","comments":true,"path":"api/articles/42-Redis.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. NoSQL数据库1.1 技术发展技术的分类 1、解决功能性的问题：Java、JSP、RDBMS、Tomcat、HTML、Linux、JDBC、SVN 2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis 3、解决性能的问题...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Redis","slug":"Redis","count":1,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Linux","uid":"3fe1ee3f3830128bf539e5f4ed9fbbe9","slug":"41-Linux","date":"2021-09-13T15:17:32.000Z","updated":"2021-09-15T10:52:47.068Z","comments":true,"path":"api/articles/41-Linux.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"1. 为什么学习Linux开源、稳定、漏洞少、主要定位在服务器端操作系统（个人操作系统Windows还是具有很大优势的，操作方便，应用软件多，生态完善）。 比如：可在Windows下使用idea进行软件开发，开发完毕后发布到Linux服务器上。 2. Linux目录及结构2.1 ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}