{"title":"SpringMVC 基础功能","uid":"0873bab37682d9a4ef349b4c3c9c31a9","slug":"52-SpringMVC-基础功能","date":"2021-09-13T15:29:32.000Z","updated":"2021-09-15T10:50:36.880Z","comments":true,"path":"api/articles/52-SpringMVC-基础功能.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","content":"<h3 id=\"01、springMVC-入门\"><a href=\"#01、springMVC-入门\" class=\"headerlink\" title=\"01、springMVC 入门\"></a>01、springMVC 入门</h3><h4 id=\"①-传统-MVC-架构\"><a href=\"#①-传统-MVC-架构\" class=\"headerlink\" title=\"① 传统 MVC 架构\"></a>① 传统 MVC 架构</h4><p>使用MVC架构（JSP/Thymeleaf+Servlet+JavaBean）进行分层开发，可以实现分工协作、可以实现组件重用、可以利于后期维护。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>缺点如下</p></blockquote>\n<ul>\n<li>每个功能都要声明对应的Servlet，Servlet数量多。即使让一个Servlet包括多个方法，也无法从根本上解决Servlet数量多的问题。</li>\n<li>在Servlet中获取请求数据较麻烦： 需要大量的request.getParameter(“name”)。</li>\n<li>手动的类型转换：比如int age = Integer.parseInt(request.getParameter(“age”))</li>\n<li>响应的方式的代码其实只想声明对应的响应数据。比如：request.getRequestDispatcher(path).forward(request,response); 中最关键的还是path。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>解决方案（就是SpringMVC的解决方案）。</p></blockquote>\n<ul>\n<li><p><strong>项目只声明一个Servlet</strong>，该Servlet作为项目请求的公共入口。并且在该Servlet中根据请求地址调用对应的控制代码处理请求。</p>\n<p>如果将控制方法（之前Servlet接收请求参数、调用业务层、实现视图跳转等功能)全部声明在Servlet中造成代码的体系结构不清晰。</p>\n</li>\n<li><p>**将控制方法单独声明到控制类中(Controller类)**。然后Servlet中根据请求动态的调用对应的控制类中的控制方法处理请求即可。</p>\n</li>\n<li><p>如何在Servlet中获取控制类对象呢？</p>\n<p>使用Spring容器的子容器，在子容器中存储所有的Controller的实例化对象，然后Servlet一次性从子容器中获取所有的对象即可。在init方法中实现即可。</p>\n</li>\n<li><p>这其实就引出了MVC框架的概念。常见的JavaEE开发领域 MVC框架: SpringMVC, Struts2,JFinal(中国人写的)。</p>\n<p>SpringMVC3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。</p>\n<p>主流的JavaEE开源框架已经从SSH，SSH2（Spring+Struts2+Hibernate）发展到了SSM（Spring+SpringMVC+MyBatis）。</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>图一：传统 mvc    图二：改进后的 mvc</p></blockquote>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-oldmvc.png\" style=\"width:471px;\"/>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-newmvc.png\"\n     style=\"width:481px;height:230px\"/>\n</div>\n\n\n\n<h4 id=\"②-SpringMVC-简介\"><a href=\"#②-SpringMVC-简介\" class=\"headerlink\" title=\"② SpringMVC 简介\"></a>② SpringMVC 简介</h4><p>SpringMVC (全称Spring Web MVC)是Spring提供给Web应用的框架设计，其实是Spring的一部分。它是一种基于Servlet的技术，提供了核心控制器和相关的组件，并制定了松散的结构，以适合各种灵活的需要。</p>\n<p>只不过在实际开发中、培训中一般都是当做 一个单独的框架来学习,位于软件三层架构中的表示层。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>M、V、C 释义</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>代表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>M 代表 模型（Model）</td>\n<td>模型就是数据，如：dao，bean</td>\n</tr>\n<tr>\n<td>V 代表 视图（View）</td>\n<td>视图就是数据的可视化的表现，如：网页，JSP，用来展示模型中的数据</td>\n</tr>\n<tr>\n<td>C 代表 控制器（Controller）</td>\n<td>控制器就是作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SpirngMVC 解决的问题</p></blockquote>\n<p>请求映射    数据输入    视图界面    请求分发    表单回显    会话控制    过滤拦截    异步交互    文件上传    文件下载    数据校验    类型转换</p>\n<h4 id=\"③-SpringMVC-优势\"><a href=\"#③-SpringMVC-优势\" class=\"headerlink\" title=\"③ SpringMVC 优势\"></a>③ SpringMVC 优势</h4><p>SpringMVC 已经成为目前最主流的 MVC 框架之一。自从Spring 2.5版本发布后，由于支持注解配置，易用性有了大幅度的提高。随着 Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。目前普遍选择 SpringMVC 作为 Java EE 项目表述层开发的首选方案。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SpringMVC 具备如下显著优势</p></blockquote>\n<ul>\n<li><p><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</p>\n</li>\n<li><p>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></p>\n</li>\n<li><p><strong>代码清新简洁</strong>，大幅度提升开发效率</p>\n</li>\n<li><p>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</p>\n</li>\n<li><p><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</p>\n</li>\n<li><p>支持RESTful 编程风格的请求。</p>\n</li>\n<li><p>轻量级的框架，简单易学，进行更简洁的Web层开发</p>\n</li>\n<li><p>可适配、非侵入：可以根据不同的应用场景，选择合适的控制器子类(simple型、command型、from型、wizard型、multi-action型或者自定义)，而不是一个单一控制器(比如Action/ActionForm)</p>\n</li>\n<li><p>非常容易与其他视图技术集成，如:Velocity、FreeMarker等等</p>\n</li>\n<li><p>因为模型数据不存放在特定的API里，而是放在一个Model里(Map数据结构实现，因此很容易被其他框架使用)</p>\n</li>\n<li><p>非常灵活的数据验证、格式化和数据绑定机制、能使用任何对象进行数据绑定，不必实现特定框架的API</p>\n</li>\n<li><p>更加简单、强大的异常处理</p>\n</li>\n<li><p>对静态资源的支持</p>\n</li>\n<li><p>支持灵活的本地化、主题等解析</p>\n<p>总之，简单易用，性能优良，同类技术中市场占有率最高，不用犹豫，就是它了。</p>\n</li>\n</ul>\n<h4 id=\"④-SpringMVC-代码对比\"><a href=\"#④-SpringMVC-代码对比\" class=\"headerlink\" title=\"④ SpringMVC 代码对比\"></a>④ SpringMVC 代码对比</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原生代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;   \n    \n    String userName &#x3D; request.getParameter(&quot;userName&quot;);\n    int age  &#x3D; Integer.parseInt(request.getParameter(&quot;age&quot;));\n    System.out.println(&quot;userName&#x3D;&quot;+userName+&quot;,age&#x3D;&quot;+age);\n    \n    request.getRequestDispatcher(&quot;&#x2F;templates&#x2F;result.html&quot;).forward(request,response);\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>springmvc 代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;user&#x2F;login&quot;)\npublic String login(String userName,Integer age)&#123;\n    \n    System.out.println(&quot;userName&#x3D;&quot;+userName+&quot;,age&#x3D;&quot;+age);\n    \n    return &quot;result&quot;;\n&#125;</code></pre>\n\n\n\n<h4 id=\"⑤-跟踪-SpringMVC-的请求\"><a href=\"#⑤-跟踪-SpringMVC-的请求\" class=\"headerlink\" title=\"⑤ 跟踪 SpringMVC 的请求\"></a>⑤ 跟踪 SpringMVC 的请求</h4><p>每当用户在 Web 浏览器中点击链接或者提交表单的时候，请求就开始工作了，像是邮递员一样，从离开浏览器开始到获取响应返回，它会经历很多站点，在每一个站点都会留下一些信息同时也会带上其他信息，下图为 Spring MVC 的请求流程：</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-4.png\" style=\"\"/>\n</div>\n\n<h5 id=\"第一站：DispatcherServlet\"><a href=\"#第一站：DispatcherServlet\" class=\"headerlink\" title=\"第一站：DispatcherServlet\"></a>第一站：DispatcherServlet</h5><p>从请求离开浏览器以后，第一站到达的就是 DispatcherServlet，看名字这是一个 Servlet，通过 J2EE 的学习，我们知道 Servlet 可以拦截并处理 HTTP 请求，DispatcherServlet 会拦截所有的请求，并且将这些请求发送给 Spring MVC 控制器。</p>\n<p><strong>DispatcherServlet 的任务就是拦截请求发送给 Spring MVC 控制器。</strong></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-5.png\" alt=\"image-20210719205250028\"></p>\n<h5 id=\"第二站：HandlerMapping\"><a href=\"#第二站：HandlerMapping\" class=\"headerlink\" title=\"第二站：HandlerMapping\"></a>第二站：HandlerMapping</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>处理器映射</p></blockquote>\n<p><strong>问题：</strong>典型的应用程序中可能会有多个控制器，这些请求到底应该发给哪一个控制器呢？</p>\n<p>所以 DispatcherServlet 会查询一个或多个处理器映射来确定请求的下一站在哪里，处理器映射会<strong>根据请求所携带的 URL 信息来进行决策</strong>，例如下面的例子中，我们通过注解配置 RequestMapping 来将 /register/registerSuccess 地址交给 RegisterController处理：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class RegisterController &#123;\n\t@RequestMapping(&quot;&#x2F;register&#x2F;registerSuccess&quot;)\n    public String toRegisterSuccess()&#123;\n        \n    &#125;\n&#125;</code></pre>\n\n<h5 id=\"第三站：控制器\"><a href=\"#第三站：控制器\" class=\"headerlink\" title=\"第三站：控制器\"></a>第三站：控制器</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>各种controller类中定义的方法内部执行的语句</p></blockquote>\n<p>一旦选择了合适的控制器， DispatcherServlet 会将请求发送给选中的控制器，到了控制器，请求会卸下其负载（用户提交的请求）等待控制器处理完这些信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n* 注册成功页面\n* 参数与html上的参数名不相同\n* @param name     注册的用户名\n* @param password 注册的密码\n* @return\n*&#x2F;\n@RequestMapping(&quot;&#x2F;register&#x2F;registerSuccess&quot;)\npublic String showRegister(@RequestParam(&quot;uname&quot;) String name, @RequestParam(&quot;pwd&quot;) String password) &#123;\n\n\tlogger.debug(&quot;uname：&quot; + name + &quot;，pwd:&quot; + password);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h5 id=\"第四站：返回-DispatcherServlet\"><a href=\"#第四站：返回-DispatcherServlet\" class=\"headerlink\" title=\"第四站：返回 DispatcherServlet\"></a>第四站：返回 DispatcherServlet</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>执行完要去访问的页面</p></blockquote>\n<p>当控制器在完成逻辑处理后，通常会产生一些信息，这些信息就是需要返回给用户并在浏览器上显示的信息，它们被称为<strong>模型（Model）</strong>。仅仅返回原始的信息时不够的——这些信息需要以用户友好的方式进行格式化，一般会是 HTML，所以，信息需要发送给一个<strong>视图（view）</strong>，通常会是 JSP，html。</p>\n<p>控制器所做的最后一件事就是将模型数据打包，并且表示出用于渲染输出的视图名（逻辑视图名）。它接下来会将请求连同模型和视图名发送回 DispatcherServlet。</p>\n<h5 id=\"第五站：视图解析器\"><a href=\"#第五站：视图解析器\" class=\"headerlink\" title=\"第五站：视图解析器\"></a>第五站：视图解析器</h5><p>这样以来，控制器就不会和特定的视图相耦合，传递给 DispatcherServlet 的视图名并不直接表示某个特定的html。（实际上，它甚至不能确定视图就是 html）相反，<strong>它传递的仅仅是一个逻辑名称，这个名称将会用来查找产生结果的真正视图。</strong></p>\n<p>DispatcherServlet 将会使用视图解析器（view resolver）来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是 html</p>\n<p>现在一般使用 thymeleaf视图解析（上述代码直接定位到 /WEB-INF/pages/resultSuccess.html 页面）</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-6.png\" alt=\"image-20210719210730439\"></p>\n<h5 id=\"第六站：视图\"><a href=\"#第六站：视图\" class=\"headerlink\" title=\"第六站：视图\"></a>第六站：视图</h5><p>既然 DispatcherServlet 已经知道由哪个视图渲染结果了，那请求的任务基本上也就完成了。</p>\n<p>它的最后一站是视图的实现，在这里它交付模型数据，请求的任务也就完成了。视图使用模型数据渲染出结果，这个输出结果会通过响应对象传递给客户端。</p>\n<h4 id=\"⑥-入门案例-game-die\"><a href=\"#⑥-入门案例-game-die\" class=\"headerlink\" title=\"⑥ 入门案例 :game_die:\"></a>⑥ 入门案例 :game_die:</h4><table>\n<thead>\n<tr>\n<th>准备工作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1、<a href=\"../6_Config/pom.xml.md\">导入依赖</a>           2、<a href=\"../6_Config/web.xml.md\">web.xml配置</a>           3、<a href=\"../6_Config/spring.xml.md\">spring.xml配置</a>           4、<a href=\"../6_Config/logback.xml.md\">logback.xml配置</a>           5、创建controller和html</td>\n</tr>\n</tbody></table>\n<h4 id=\"⑦-配置中的问题\"><a href=\"#⑦-配置中的问题\" class=\"headerlink\" title=\"⑦ 配置中的问题\"></a>⑦ 配置中的问题</h4><h5 id=\"point-right-​maven-传递性\"><a href=\"#point-right-​maven-传递性\" class=\"headerlink\" title=\":point_right: ​maven 传递性\"></a>:point_right: ​maven 传递性</h5><p>由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>\n<h5 id=\"point-right-​加入日志记录仪\"><a href=\"#point-right-​加入日志记录仪\" class=\"headerlink\" title=\":point_right: ​加入日志记录仪\"></a>:point_right: ​加入日志记录仪</h5><p>在 handler 类中声明一个成员变量：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());</code></pre>\n\n<ul>\n<li>Logger：org.slf4j.Logger</li>\n<li>LoggerFactory：org.slf4j.LoggerFactory</li>\n</ul>\n<p>使用日志而不是 sysout 的方式在控制台打印，好处在于：根据日志的级别可以非常方便的控制某些日志是否打印。</p>\n<p>不管 sysout 还是日志，只要是在控制台打印数据，底层都是 I/O 操作。在项目中，访问数据库和 I/O 都是典型的高消耗型的操作。</p>\n<p>在控制台打印的数据，用户看不到，打印它肯定是为了调试程序等类似需求。所以在项目上线的时候，用于调试程序的控制台打印都应该去掉。</p>\n<p>如果我们是通过 sysout 方式打印，那么它们会分散在项目中的各个地方，想要通过手动方式删除会很繁琐也可能会有遗漏。</p>\n<p>而使用日志的方式，只要在配置文件中修改一下日志级别，就能全面控制某个级别的日志打印或者不打印。</p>\n<p>而且日志框架通常都能够指定日志保存的位置，如果有需要可以将日志数据保存到数据库等位置。</p>\n<h5 id=\"point-right-DispatcherServlet\"><a href=\"#point-right-DispatcherServlet\" class=\"headerlink\" title=\":point_right: DispatcherServlet\"></a>:point_right: DispatcherServlet</h5><p>配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器，DispatcherServlet</p>\n<p>关于DispatcherServlet的<code>&lt;url-pattern&gt;</code>拦截路径配置问题</p>\n<ul>\n<li><p>第一种：*.action（或者*.do，都是从Struts延续过来的写法）。最传统的方式，最简单也最实用。只有.action结尾的请求会由DispatcherServlet进行解析。</p>\n</li>\n<li><p>第二种：/* 这种配置方式不对，使用这种配置，当我们访问到一个JSP、HTML、CSS等时，也会经过DispatcherServlet进行解析，将不能正常显示，会报错。 </p>\n</li>\n<li><p>第三种：**/ 所有访问地址**(除.jsp、.jspx之外)都由DispatcherServlet进行解析，使用这种方法可以实现越来越流行的RESTful风格。这种使用越来越多了。</p>\n</li>\n<li><p>如果采用 <strong>/</strong> 这种方式，对于静态文件解析需要配置，不让DispatcherServlet进行解析，否则将无法访问到。</p>\n<ul>\n<li><p>配置方式有多种，最简单的方式就是在springmvc.xml中添加注解：</p>\n<p>**<code>&lt;mvc:annotation-driven&gt;</code>**（springmvc 必须配置的注解驱动）</p>\n<p>**<code>&lt;mvc:default-servlet-handler/&gt;</code>**（不解析静态资源的配置）</p>\n</li>\n<li><p>作用详解：配置<code>&lt;mvc:default-servlet-handler/&gt;</code>后，会在SpringMVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler。它会像一个检查员，对进入DispatcherServlet的URL进行筛查。</p>\n<p>如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet（对应Tomcat是org.apache.catalina.servlets.DefaultServlet）处理。如果不是静态资源的请求，才由DispatcherServlet继续处理。</p>\n</li>\n<li><p>default-servlet-handler所在类：org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler</p>\n<p>关键方法：handleRequest()方法</p>\n<p>大体机制：SpringMVC 首先查找是否存在和当前请求对应的 @RequestMapping；如果没有，则调用handleRequest()方法转发到目标资源。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"point-right-POST-请求乱码问题\"><a href=\"#point-right-POST-请求乱码问题\" class=\"headerlink\" title=\":point_right: POST 请求乱码问题\"></a>:point_right: POST 请求乱码问题</h5><p>到 web.xml 中配置 CharacterEncodingFilter 即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 配置过滤器解决 POST 请求的字符乱码问题 --&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n    \n    &lt;!-- encoding参数指定要使用的字符集名称 --&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;init-param&gt;\n    \n    &lt;!-- 请求强制编码 --&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceRequestEncoding&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;init-param&gt;\n        \n    &lt;!-- 响应强制编码 --&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceResponseEncoding&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;init-param&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注1：在较低版本的 SpringMVC 中，forceRequestEncoding 属性、forceResponseEncoding 属性没有分开，它们是一个 forceEncoding 属性。这里需要注意一下。</p>\n<p>注2：由于 CharacterEncodingFilter 是通过 request.setCharacterEncoding(encoding); 来设置请求字符集，所以在此操作前不能有任何的 request.getParameter() 操作。在设置字符集之前获取过请求参数，那么设置字符集的操作将无效。</p></blockquote>\n<h4 id=\"⑧-整体流程分析图\"><a href=\"#⑧-整体流程分析图\" class=\"headerlink\" title=\"⑧ 整体流程分析图\"></a>⑧ 整体流程分析图</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/img007.png\" alt=\"./images\"></p>\n<h3 id=\"02、重要注解\"><a href=\"#02、重要注解\" class=\"headerlink\" title=\"02、重要注解\"></a>02、重要注解</h3><h4 id=\"①-RequestMapping\"><a href=\"#①-RequestMapping\" class=\"headerlink\" title=\"① @RequestMapping\"></a>① @RequestMapping</h4><h5 id=\"point-right-前言\"><a href=\"#point-right-前言\" class=\"headerlink\" title=\":point_right: 前言\"></a>:point_right: 前言</h5><p>@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式关联起来，建立映射关系。</p>\n<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p>\n<h5 id=\"point-right-配-do-不加-do\"><a href=\"#point-right-配-do-不加-do\" class=\"headerlink\" title=\":point_right: 配 *.do 不加 .do\"></a>:point_right: 配 *.do 不加 .do</h5><p>requestMapping 中可不加 .do（默认自动加 .do）<br>如果在 web.xml 中配置的 *.do，则会拦截所有的 .do 请求去匹配</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;\n\t&lt;servlet-mapping&gt;\n\t\t&lt;servlet-name&gt;springDispatcherServlet&lt;&#x2F;servlet-name&gt;\n\t\t&lt;url-pattern&gt;*.do&lt;&#x2F;url-pattern&gt;\n\t&lt;&#x2F;servlet-mapping&gt;\n但是在 Controller 中的 RequestMapping 的 Value 如果是字符串没有不是 .do 结尾，那么 Spring MVC 会默认的加上 .do，</code></pre>\n\n<p>web.xml 中配置了url-pattern后，会起到两个作用：<br>（1）是限制 url 的后缀名，只能为”.do”。<br>（2）就是在没有填写后缀时，默认在你配置的 Controller 的 RequestMapping 中添加”.do”的后缀</p>\n<h5 id=\"point-right-​匹配方式\"><a href=\"#point-right-​匹配方式\" class=\"headerlink\" title=\":point_right: ​匹配方式\"></a>:point_right: ​匹配方式</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>精确匹配：在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地方进行精确匹配。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;register&#x2F;showRegister.do&quot;)\n\n@PostMapping(&quot;&#x2F;register&#x2F;registerSuccess&quot;)\n    public String showRegister(@RequestParam(&quot;uname&quot;) String name, @RequestParam(&quot;pwd&quot;) String password) &#123;\n\n        logger.debug(&quot;uname：&quot; + name + &quot;，pwd:&quot; + password);\n\n        return &quot;resultSuccess&quot;;\n    &#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>模糊匹配：在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;fruit&#x2F;*&quot;)</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;测试@RequestMapping注解匹配方式&lt;&#x2F;h3&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;fruit&#x2F;apple&#125;&quot;&gt;@RequestMapping模糊匹配[apple]&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;fruit&#x2F;orange&#125;&quot;&gt;@RequestMapping模糊匹配[orange]&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;fruit&#x2F;banana&#125;&quot;&gt;@RequestMapping模糊匹配[banana]&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</code></pre>\n\n<h5 id=\"point-right-​抽取重复路径到类上\"><a href=\"#point-right-​抽取重复路径到类上\" class=\"headerlink\" title=\":point_right: ​抽取重复路径到类上\"></a>:point_right: ​抽取重复路径到类上</h5><p>在类级别：抽取各个方法上@RequestMapping注解地址中前面重复的部分</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;user&quot;)</code></pre>\n\n<p>在方法级别：省略被类级别抽取的部分</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;login&quot;)\n@RequestMapping(&quot;&#x2F;register&quot;)\n@RequestMapping(&quot;&#x2F;logout&quot;)</code></pre>\n\n<h5 id=\"point-right-​附加请求方式\"><a href=\"#point-right-​附加请求方式\" class=\"headerlink\" title=\":point_right: ​附加请求方式\"></a>:point_right: ​附加请求方式</h5><p>八种类型：GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>页面表单</p></blockquote>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;测试@RequestMapping注解限定请求方式&lt;&#x2F;h3&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;emp&#125;&quot;&gt;同地址GET请求&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;emp&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;button type&#x3D;&quot;submit&quot;&gt;同地址POST请求&lt;&#x2F;button&gt;\n&lt;&#x2F;form&gt;\n&lt;br&#x2F;&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>处理post请求 （参数中添加 method）</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(value &#x3D; &quot;&#x2F;emp&quot;, method &#x3D; RequestMethod.POST)\npublic String empPost() &#123;\n    \n    logger.debug(&quot;POST 请求&quot;);\n    \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进阶版（另外需要注意：进阶版的这几个注解是从 4.3 版本才开始有，低于 4.3 版本无法使用。）</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>原版</th>\n<th>进阶版</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@RequestMapping(value = “/emp”, method = RequestMethod.GET)</td>\n<td>@GetMapping(“/emp”)</td>\n</tr>\n<tr>\n<td>@RequestMapping(value = “/emp”, method = RequestMethod.POST)</td>\n<td>@PostMapping(“/emp”)</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Ambiguous mapping异常</p></blockquote>\n<p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时该找哪个 handler 方法处理。</p>\n<h4 id=\"②-RequestParam\"><a href=\"#②-RequestParam\" class=\"headerlink\" title=\"② @RequestParam\"></a>② @RequestParam</h4><h5 id=\"point-right-前言-1\"><a href=\"#point-right-前言-1\" class=\"headerlink\" title=\":point_right: 前言\"></a>:point_right: 前言</h5><p>使用@RequestParam注解标记handler方法的形参，SpringMVC 会将获取到的请求参数从形参位置给我们传进来</p>\n<p> 当请求参数名和形参名一致，可以省略@RequestParam(“userName”)注解，但是，省略后代码可读性下降而且将来在SpringCloud中不能省略，所以建议还是不要省略</p>\n<p>==如果传入的参数 我们在后端获取时直接用 <strong>对象 , map , list</strong> 进行封装，那我们就不能在对其进行 使用 @RequestParam，get 没有请求体==</p>\n<h5 id=\"point-right-RequestParam的属性\"><a href=\"#point-right-RequestParam的属性\" class=\"headerlink\" title=\":point_right: RequestParam的属性\"></a>:point_right: RequestParam的属性</h5><p><u>@RequestParam 注解的 required 属性：默认值为true，表示请求<strong>参数默认必须提供</strong></u></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; required 属性设置为 false 表示这个请求参数可有可无\n    \n@RequestParam(value &#x3D; &quot;userName&quot;, required &#x3D; false)</code></pre>\n\n<p>使用 defaultValue 属性给请求参数设置默认值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestParam(value &#x3D; &quot;userName&quot;, required &#x3D; false, defaultValue &#x3D; &quot;missing&quot;)</code></pre>\n\n<p>此时 required 属性可以继续保持默认值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestParam(value &#x3D; &quot;userName&quot;, defaultValue &#x3D; &quot;missing&quot;)</code></pre>\n\n<h5 id=\"point-right-一名一值\"><a href=\"#point-right-一名一值\" class=\"headerlink\" title=\":point_right: 一名一值\"></a>:point_right: 一名一值</h5><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;一名一值&lt;&#x2F;h4&gt;\n&lt;form action&#x3D;&quot;&#x2F;spring0.2&#x2F;register&#x2F;registerSuccess&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;uname&quot;&#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 注册成功页面\n * 参数与html上的参数名不相同\n * @param name     注册的用户名\n *&#x2F;\n@PostMapping(&quot;&#x2F;register&#x2F;registerSuccess&quot;)\npublic String showRegister(@RequestParam(&quot;uname&quot;) String name) &#123;\n\n    logger.debug(&quot;uname：&quot; + name);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<p>忽略注解</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@PostMapping(&quot;&#x2F;register&#x2F;registerSuccess&quot;)\npublic String showRegister(String uname) &#123;\n\n    logger.debug(&quot;uname：&quot; + name);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h5 id=\"point-right-一名多值\"><a href=\"#point-right-一名多值\" class=\"headerlink\" title=\":point_right: 一名多值\"></a>:point_right: 一名多值</h5><p>在服务器端 handler 方法中，使用一个能够<strong>存储多个数据的容器</strong>就能接收一个名字对应的多个值请求参数</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;一名多值&lt;&#x2F;h4&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;hobby&#x2F;toHobby&#125;&quot; method&#x3D;&quot;get&quot;&gt;\n    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;music&quot;&gt;音乐\n    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;sport&quot;&gt;运动\n    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;art&quot;&gt;艺术\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;hobby&#x2F;toHobby&quot;)\npublic String showHobby(@RequestParam(&quot;hobby&quot;) List&lt;String&gt; hobbyList) &#123;\n\n    logger.debug(&quot;hobby列表：&quot; + hobbyList);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h5 id=\"point-right-表单模型（实体类）\"><a href=\"#point-right-表单模型（实体类）\" class=\"headerlink\" title=\":point_right: 表单模型（实体类）\"></a>:point_right: 表单模型（实体类）</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Student &#123;\n    private String name;\n    private Integer age;\n    private String sex;\n    &#x2F;*private Date date;*&#x2F;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;实体类&lt;&#x2F;h4&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;student&#x2F;toStudent&#125;&quot; method&#x3D;&quot;get&quot;&gt;\n    姓名: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;\n    年龄: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot;&gt;\n    性别: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;sex&quot;&gt;\n    &lt;!--日期: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;date&quot;&gt;--&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;student&#x2F;toStudent&quot;)\npublic String showStudent(Student student) &#123;\n\n    logger.debug(&quot;学生实体：&quot; + student);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h5 id=\"point-right-复杂实体类\"><a href=\"#point-right-复杂实体类\" class=\"headerlink\" title=\":point_right: 复杂实体类\"></a>:point_right: 复杂实体类</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@AllArgsConstructor\npublic class Student2 &#123;\n    private String stuName;\n    private School school;\n    private List&lt;Subject&gt; subjectList;\n    private Subject[] subjectArray;\n    private Set&lt;Teacher&gt; teacherSet;\n    private Map&lt;String, Double&gt; scores;\n\n    public Student2()&#123;\n        teacherSet &#x3D; new HashSet&lt;&gt;();\n        teacherSet.add(new Teacher());\n        teacherSet.add(new Teacher());\n        teacherSet.add(new Teacher());\n    &#125;\n&#125;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Subject &#123;\n    private String suName;\n&#125;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Teacher &#123;\n    private Integer tId;\n    private String tName;\n\n    public Teacher(Integer tId)&#123;\n        this.tId &#x3D; tId;\n    &#125;\n\n    &#x2F;*hashCode  重写hashCode方法，会通过tid tname 的hash值进行比较两个对象是否一样，这样向set集合中添加属性为空的teacher对象，那就不行了*&#x2F;\n    @Override\n    public int hashCode() &#123;\n        return Objects.hash(new Date(),tName);\n    &#125;\n&#125;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class School &#123;\n    private String scName;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;表单对应实体类包含级联属性&lt;&#x2F;h4&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;student2&#x2F;toStudent2&#125;&quot; method&#x3D;&quot;get&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;stuName&quot; value&#x3D;&quot;黄任翔&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;school.scName&quot; value&#x3D;&quot;尚硅谷&quot;&gt;\n\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectList[0].suName&quot; value&#x3D;&quot;java&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectList[1].suName&quot; value&#x3D;&quot;c++&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectList[2].suName&quot; value&#x3D;&quot;python&quot;&gt;\n\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectArray[0].suName&quot; value&#x3D;&quot;mybatis&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectArray[1].suName&quot; value&#x3D;&quot;spring&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subjectArray[2].suName&quot; value&#x3D;&quot;sql&quot;&gt;\n\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;teacherSet[0].tName&quot; value&#x3D;&quot;张益桃&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;teacherSet[1].tName&quot; value&#x3D;&quot;刘凯丽&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;teacherSet[2].tName&quot; value&#x3D;&quot;张丽芳&quot;&gt;\n\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;scores[&#39;java&#39;]&quot; value&#x3D;&quot;100&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;scores[&#39;c++&#39;]&quot; value&#x3D;&quot;90&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;scores[&#39;python]&quot; value&#x3D;&quot;80&quot;&gt;\n\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;student2&#x2F;toStudent2&quot;)\npublic String showStudent2(Student2 student2) &#123;\n\n    logger.debug(&quot;学生实体：&quot; + student2);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h5 id=\"point-right-发送list集合\"><a href=\"#point-right-发送list集合\" class=\"headerlink\" title=\":point_right: 发送list集合\"></a>:point_right: 发送list集合</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class EmployeeParam &#123;\n    private List&lt;Student&gt; studentList;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;list&#x2F;employee&quot;)\npublic String showStudent2(EmployeeParam studentList) &#123;\n\n    List&lt;Student&gt; list &#x3D; studentList.getStudentList();\n\n    logger.debug(&quot;学生列表：&quot; + list);\n\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;要发送的数据是 List&lt;&#x2F;h4&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;list&#x2F;employee&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    1号学生姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[0].name&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    1号学生年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[0].age&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    1号学生性别：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[0].sex&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    2号学生姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[1].name&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    2号学生年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[1].age&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    2号学生性别：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;studentList[1].sex&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    &lt;button type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<h4 id=\"③-RequestHeader\"><a href=\"#③-RequestHeader\" class=\"headerlink\" title=\"③ @RequestHeader\"></a>③ @RequestHeader</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h4&gt;获取请求头&lt;&#x2F;h4&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;header&#x2F;getAccept&#125;&quot;&gt;获取请求头：Accept&lt;&#x2F;a&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;header&#x2F;getUserAgent&#125;&quot;&gt;获取请求头：User-Agent&lt;&#x2F;a&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;header&#x2F;getGET&#125;&quot;&gt;获取请求头：RequestMethod &lt;&#x2F;a&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;header&#x2F;getJSESSIONID&#125;&quot;&gt;获取请求头：JSESSIONID&lt;&#x2F;a&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;header&#x2F;getAccept&quot;)\npublic String showStudent2(@RequestHeader(name &#x3D; &quot;Accept&quot;, defaultValue &#x3D; &quot;missing&quot;) String accept) &#123;\n    logger.debug(&quot;获取到的请求头Accept是：&quot; + accept);\n    return &quot;resultSuccess&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;header&#x2F;getUserAgent&quot;)\npublic String showStudent3(@RequestHeader(name &#x3D; &quot;User-Agent&quot;, defaultValue &#x3D; &quot;missing&quot;) String UserAgent) &#123;\n    logger.debug(&quot;获取到的请求头User-Agent是：&quot; + UserAgent);\n    return &quot;resultSuccess&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;header&#x2F;getRequestMethod&quot;)\npublic String showStudent4(@RequestHeader(name &#x3D; &quot;RequestMethod&quot;, defaultValue &#x3D; &quot;missing&quot;) String RequestMethod) &#123;\n    logger.debug(&quot;获取到的请求头RequestMethod是：&quot; + RequestMethod);\n    return &quot;resultSuccess&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;header&#x2F;getJSESSIONID&quot;)\npublic String showStudent5(@RequestHeader(name &#x3D; &quot;JSESSIONID&quot;, defaultValue &#x3D; &quot;missing&quot;) String JSESSIONID, HttpSession session) &#123;\n    Object jsessionid &#x3D; session.getAttribute(&quot;JSESSIONID&quot;);\n    logger.debug(&quot;获取到的请求头JSESSIONID是：&quot; + JSESSIONID);\n    logger.debug(&quot;获取到的请求头jsessionid是：&quot; + jsessionid);\n    return &quot;resultSuccess&quot;;\n&#125;</code></pre>\n\n<h4 id=\"④-CookieValue\"><a href=\"#④-CookieValue\" class=\"headerlink\" title=\"④ @CookieValue\"></a>④ @CookieValue</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;request&#x2F;cookie&quot;)\npublic String getCookie(\n    \n        &#x2F;&#x2F; 使用 @CookieValue 注解获取指定名称的 Cookie 数据\n        &#x2F;&#x2F; name 或 value 属性：指定Cookie 名称\n        &#x2F;&#x2F; defaultValue 属性：设置默认值\n        @CookieValue(value &#x3D; &quot;JSESSIONID&quot;, defaultValue &#x3D; &quot;missing&quot;) String cookieValue,\n    \n        &#x2F;&#x2F; 形参位置声明 HttpSession 类型的参数即可获取 HttpSession 对象\n        HttpSession session\n) &#123;\n    \n    logger.debug(&quot;cookieValue &#x3D; &quot; + cookieValue);\n    \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<h4 id=\"⑤-页面跳转控制\"><a href=\"#⑤-页面跳转控制\" class=\"headerlink\" title=\"⑤ 页面跳转控制\"></a>⑤ 页面跳转控制</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;forward&#x2F;forward1&quot;)\npublic String showStudent7() &#123;\n\n    logger.debug(&quot;转发WEB-INF下&quot;);\n\n    return &quot;forward:&#x2F;WEB-INF&#x2F;templates&#x2F;resultSuccess.html&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;forward&#x2F;forward2&quot;)\npublic String showStudent8() &#123;\n\n    logger.debug(&quot;转发WEB-INF外&quot;);\n\n    return &quot;forward:&#x2F;index.html&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;redirect&#x2F;redirect1&quot;)\npublic String showStudent9() &#123;\n\n    logger.debug(&quot;重定向WEB-INF外&quot;);\n\n    return &quot;redirect:&#x2F;index.html&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;redirect&#x2F;redirect2&quot;)\npublic String showStudent10() &#123;\n\n    logger.debug(&quot;从定向外网&quot;);\n\n    return &quot;redirect:http:&#x2F;&#x2F;www.baidu.com&quot;;\n&#125;</code></pre>\n\n\n\n<h3 id=\"03、其他基础功能\"><a href=\"#03、其他基础功能\" class=\"headerlink\" title=\"03、其他基础功能\"></a>03、其他基础功能</h3><h4 id=\"①-获取原生ServletAPI\"><a href=\"#①-获取原生ServletAPI\" class=\"headerlink\" title=\"① 获取原生ServletAPI\"></a>① 获取原生ServletAPI</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;结果页面&lt;&#x2F;h3&gt;\nmsg:&lt;span th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\nrequest:&lt;span th:text&#x3D;&quot;$&#123;servletRequest&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\nrequestMsg:&lt;span th:text&#x3D;&quot;$&#123;requestMsg&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\nsession:&lt;span th:text&#x3D;&quot;$&#123;session.session&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\nusername:&lt;span th:text&#x3D;&quot;$&#123;session.username&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\n\nmsg:abc\nrequest:org.apache.catalina.connector.RequestFacade@748930b1\nrequestMsg:你好，黄任翔！！！\nsession:org.apache.catalina.session.StandardSessionFacade@412ef064\nusername:hh</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\n@Slf4j\n@RequestMapping(&quot;&#x2F;servlet&quot;)\npublic class ServletController &#123;\n\n    @RequestMapping(&quot;&#x2F;original&quot;)\n    public String getOriginalAPI(\n            HttpServletRequest servletRequest,\n            HttpServletResponse servletResponse,\n            HttpSession session,\n            Model model\n    )&#123;\n        log.debug(&quot;request&quot;+servletRequest.toString());\n        log.debug(&quot;request&quot;+servletResponse.toString());\n        log.debug(&quot;request&quot;+session.toString());\n\n        model.addAttribute(&quot;msg&quot;,&quot;abc&quot;);\n        servletRequest.setAttribute(&quot;servletRequest&quot;,servletRequest.toString());\n        servletRequest.setAttribute(&quot;requestMsg&quot;,&quot;你好，黄任翔！！！&quot;);\n\n        servletResponse.setHeader(&quot;response&quot;,servletResponse.toString());\n\n        session.setAttribute(&quot;session&quot;,session.toString());\n        session.setAttribute(&quot;username&quot;,&quot;hh&quot;);\n\n        return &quot;result&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>:point_right: 获取 ServletContext 对象</p>\n<p>方法一：通过HttpSession获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;original&#x2F;servlet&#x2F;context&#x2F;first&#x2F;way&quot;)\npublic String originalServletContextFirstWay(HttpSession session) &#123;\n    \n    &#x2F;&#x2F; 获取ServletContext对象的方法一：通过HttpSession对象获取\n    ServletContext servletContext &#x3D; session.getServletContext();\n    logger.debug(servletContext.toString());\n    \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<p>方法二：通过 IOC 容器注入 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 获取ServletContext对象的方法二：从 IOC 容器中直接注入\n@Autowired\nprivate ServletContext servletContext;\n\n@RequestMapping(&quot;&#x2F;original&#x2F;servlet&#x2F;context&#x2F;second&#x2F;way&quot;)\npublic String originalServletContextSecondWay() &#123;\n    logger.debug(this.servletContext.toString());\n\n    return &quot;target&quot;;\n&#125;</code></pre>\n<p>:point_right: 原生对象与IOC容器的关系​</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-GetServletAPI.png\" alt=\"images\"></p>\n<h4 id=\"②-属性域\"><a href=\"#②-属性域\" class=\"headerlink\" title=\"② 属性域\"></a>② 属性域</h4><h5 id=\"point-right-属性域的重要作用\"><a href=\"#point-right-属性域的重要作用\" class=\"headerlink\" title=\":point_right: 属性域的重要作用\"></a>:point_right: 属性域的重要作用</h5><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-attribute1.png\" alt=\"images\"></p>\n<h5 id=\"point-right-​请求域的操作方式\"><a href=\"#point-right-​请求域的操作方式\" class=\"headerlink\" title=\":point_right: ​请求域的操作方式\"></a>:point_right: ​请求域的操作方式</h5><p>Model 类型    ModelMap 类型    Map 类型    ModelAndView 类型    原生request对象</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;Model 类型的形参&lt;&#x2F;h3&gt;\n&lt;span th:text&#x3D;&quot;$&#123;loveModel&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\n\n&lt;h3&gt;ModelMap 类型的形参&lt;&#x2F;h3&gt;\n&lt;span th:text&#x3D;&quot;$&#123;loveModelMap&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\n\n&lt;h3&gt;Map 类型的形参&lt;&#x2F;h3&gt;\n&lt;span th:text&#x3D;&quot;$&#123;loveMap&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\n\n&lt;h3&gt;原生 request 对象&lt;&#x2F;h3&gt;\n&lt;span th:text&#x3D;&quot;$&#123;loveRequest&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;\n\n&lt;h3&gt;ModelAndView 对象&lt;&#x2F;h3&gt;\n&lt;span th:text&#x3D;&quot;$&#123;loveModelAndView&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;model&quot;)\npublic String testAttributeRequestModel(Model model)&#123;\n    model.addAttribute(&quot;loveModel&quot;,&quot;I Love You!!!&quot;);\n    return &quot;result&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;modelMap&quot;)\npublic String testAttributeRequestModelMap(ModelMap modelMap)&#123;\n    modelMap.addAttribute(&quot;loveModelMap&quot;,&quot;I love You!!!&quot;);\n    return &quot;result&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;map&quot;)\npublic String testAttributeRequestMap(Map&lt;String , String&gt; map)&#123;\n    map.put(&quot;loveMap&quot;,&quot;I Love You!!!&quot;);\n    return &quot;result&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;request&quot;)\npublic String testAttributeRequest(HttpServletRequest request)&#123;\n    request.setAttribute(&quot;loveRequest&quot;,&quot;I Love You!!!&quot;);\n    return &quot;result&quot;;\n&#125;\n\n@RequestMapping(&quot;&#x2F;modelView&quot;)\npublic ModelAndView testAttributeRequestModelView()&#123;\n\n    ModelAndView modelAndView &#x3D; new ModelAndView();\n    modelAndView.addObject(&quot;loveModelAndView&quot;,&quot;I Love You!!!&quot;);\n    modelAndView.setViewName(&quot;result&quot;);\n    return modelAndView;\n&#125;</code></pre>\n\n<h5 id=\"point-right-模型的本质\"><a href=\"#point-right-模型的本质\" class=\"headerlink\" title=\":point_right: 模型的本质\"></a>:point_right: 模型的本质</h5><p>SpringMVC 传入的 Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的。</p>\n<p>它们之间的关系如下<strong>图 1</strong>            </p>\n<p>框架底层将模型存入请求域，源码所在位置，所在类：org.thymeleaf.context.WebEngineContext    所在方法：setVariable() <strong>图 2</strong></p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-attribute2.png\" alt=\"images\" style=\"zoom: 58%;\">\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-attribute3.png\" alt=\"images\" style=\"zoom: 58%;\" />\n</div>\n\n<p>过程中值得关注的点:</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-attribute4.png\" alt=\"images\" style=\"zoom:67%;\" />\n</div>\n\n<h4 id=\"③-会话域\"><a href=\"#③-会话域\" class=\"headerlink\" title=\"③ 会话域\"></a>③ 会话域</h4><p>使用会话域最简单直接的办法就是使用原生的 HttpSession 对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;attr&#x2F;session&quot;)\npublic String attrSession(\n        &#x2F;&#x2F; 使用会话域最简单直接的办法就是使用原生的 HttpSession 对象\n        HttpSession session) &#123;\n    \n    session.setAttribute(&quot;sessionScopeMessage&quot;, &quot;i am haha ...&quot;);\n    \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<h4 id=\"④-应用域\"><a href=\"#④-应用域\" class=\"headerlink\" title=\"④ 应用域\"></a>④ 应用域</h4><p>应用域同样是使用原生对象来操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nprivate ServletContext servletContext;\n\n@RequestMapping(&quot;&#x2F;attr&#x2F;application&quot;)\npublic String attrApplication() &#123;\n    \n    servletContext.setAttribute(&quot;appScopeMsg&quot;, &quot;i am hungry...&quot;);\n    \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<h4 id=\"⑤-mvc-view-controller\"><a href=\"#⑤-mvc-view-controller\" class=\"headerlink\" title=\"⑤ mvc:view-controller\"></a>⑤ mvc:view-controller</h4><p>在一个 handler 方法中，仅仅只是完成 @RequestMapping 映射，将请求转发到目标视图，除此之外没有任何其他代码。此时可以使用 SpringMVC 配置文件中的配置代替这样的 handler 方法。（<strong>就是所谓的跳转到 WEB-INF下的主页</strong>）</p>\n<p>在springmvc配置文件中配置 此标签，同时，handler 类中就可以去掉被代替的方法。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mvc:view-controller path&#x3D;&quot;&#x2F;springmvc0.3&quot; view-name&#x3D;&quot;index&quot;&#x2F;&gt;</code></pre>\n\n<p>如果没有 mvc:annotation-driven，加入 mvc:view-controller 配置后，其他正常 @RequestMapping 将失效。此时还是需要加入 mvc:annotation-driven 来解决。</p>\n<p>同时加几个path 不一样的跳转主页的 配置，也是可以的</p>\n<h4 id=\"⑥-表单标签（回显）\"><a href=\"#⑥-表单标签（回显）\" class=\"headerlink\" title=\"⑥ 表单标签（回显）\"></a>⑥ 表单标签（回显）</h4><p>主要的目的是在页面上实现表单回显。最典型的情况是在修改数据时，把之前旧的数据重新显示出来供用户参考。</p>\n<h5 id=\"point-right-回显简单标签\"><a href=\"#point-right-回显简单标签\" class=\"headerlink\" title=\":point_right: 回显简单标签\"></a>:point_right: 回显简单标签</h5><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;tiger&#x2F;update&#125;&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerId&quot; th:value&#x3D;&quot;$&#123;tiger.tigerId&#125;&quot; readonly&gt;&lt;br&#x2F;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerName&quot; th:value&#x3D;&quot;$&#123;tiger.tigerName&#125;&quot;&gt;&lt;br&#x2F;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerSalary&quot; th:value&#x3D;&quot;$&#123;tiger.tigerSalary&#125;&quot;&gt;&lt;br&#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@Controller\n@RequestMapping(&quot;&#x2F;tiger&quot;)\npublic class UpdateTigerController &#123;\n\n    @RequestMapping(&quot;&#x2F;toUpdate&quot;)\n    public String simpleTagRedisplay(Model model) &#123;\n\n        Tiger tiger &#x3D; new Tiger();\n        tiger.setTigerId(5);\n        tiger.setTigerName(&quot;nihao&quot;);\n        tiger.setTigerSalary(888.88);\n\n        model.addAttribute(&quot;tiger&quot;, tiger);\n\n        return &quot;tiger&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;update&quot;)\n    public String update(Tiger tiger)&#123;\n        log.debug(tiger.toString());\n        return &quot;index&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h5 id=\"point-right-回显带选择功能的标签\"><a href=\"#point-right-回显带选择功能的标签\" class=\"headerlink\" title=\":point_right: 回显带选择功能的标签\"></a>:point_right: 回显带选择功能的标签</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@Controller\n@RequestMapping(&quot;&#x2F;tiger2&quot;)\npublic class UpdateTigerController2 &#123;\n    @RequestMapping(&quot;&#x2F;toUpdate&quot;)\n    public String simpleTagRedisplay(Model model) &#123;\n\n        &#x2F;&#x2F; 1.准备用来显示标签的数据\n        List&lt;Season&gt; seasonList &#x3D; new ArrayList&lt;&gt;();\n        seasonList.add(new Season(1, &quot;春天&quot;));\n        seasonList.add(new Season(2, &quot;夏天&quot;));\n        seasonList.add(new Season(3, &quot;秋天&quot;));\n        seasonList.add(new Season(4, &quot;冬天&quot;));\n\n        model.addAttribute(&quot;seasonList&quot;, seasonList);\n\n        Tiger2 tiger &#x3D; new Tiger2();\n        tiger.setTigerId(5);\n        tiger.setTigerName(&quot;nihao&quot;);\n        tiger.setTigerSalary(888.88);\n\n        tiger.setSeason(new Season(2,&quot;夏天&quot;));\n        model.addAttribute(&quot;tiger&quot;, tiger);\n\n        Tiger3 tiger3 &#x3D; new Tiger3();\n        List&lt;Season&gt; seasonList1 &#x3D; new ArrayList&lt;&gt;();\n        seasonList1.add(new Season(1,&quot;春天&quot;));\n        seasonList1.add(new Season(3,&quot;秋天&quot;));\n        seasonList1.add(new Season(4,&quot;冬天&quot;));\n\n        tiger3.setSeasonList(seasonList1);\n\n        model.addAttribute(&quot;seasonList1&quot;,seasonList1);\n\n        return &quot;tiger2&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;update&quot;)\n    public String update(Tiger2 tiger)&#123;\n        log.debug(tiger.toString());\n        return &quot;index&quot;;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;tiger2&#x2F;update&#125;&quot;&gt;\n    &lt;!--普通表单项--&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerId&quot; th:value&#x3D;&quot;$&#123;tiger.tigerId&#125;&quot; readonly&gt;&lt;br&#x2F;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerName&quot; th:value&#x3D;&quot;$&#123;tiger.tigerName&#125;&quot;&gt;&lt;br&#x2F;&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tigerSalary&quot; th:value&#x3D;&quot;$&#123;tiger.tigerSalary&#125;&quot;&gt;&lt;br&#x2F;&gt;\n\n    &lt;!--单选框--&gt;\n    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;$&#123;season.seasonId&#125;&quot;\n           th:each&#x3D;&quot;season : $&#123;seasonList&#125;&quot;\n           th:value&#x3D;&quot;$&#123;season.seasonId&#125;&quot;\n           th:text&#x3D;&quot;$&#123;season.seasonName&#125;&quot;\n           th:checked&#x3D;&quot;$&#123;tiger.season.seasonId&#x3D;&#x3D;season.seasonId&#125;&quot;&gt;\n    &lt;br&#x2F;&gt;\n\n    &lt;!--下拉列表--&gt;\n    &lt;select name&#x3D;&quot;$&#123;season.seasonId&#125;&quot;&gt;\n        &lt;option th:each&#x3D;&quot;season : $&#123;seasonList&#125;&quot;\n                th:value&#x3D;&quot;$&#123;season.seasonId&#125;&quot;\n                th:text&#x3D;&quot;$&#123;season.seasonName&#125;&quot;\n                th:selected&#x3D;&quot;$&#123;tiger.season.seasonId&#x3D;&#x3D;season.seasonId&#125;&quot;&gt;\n        &lt;&#x2F;option&gt;\n    &lt;&#x2F;select&gt;\n    &lt;br&#x2F;&gt;\n\n    &lt;!--复选框--&gt;\n    &lt;!--注意：此时需要判断一个对象是否在集合中，那就需要重写equals()和hashCode()方法。--&gt;\n    &lt;!--用包含回显数据的集合调用contains()方法判断是否应该被选中；\n    传入contains()方法的是生成具体每一个标签时遍历得到的对象--&gt;\n    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;$&#123;season.seasonId&#125;&quot;\n           th:each&#x3D;&quot;season : $&#123;seasonList&#125;&quot;\n           th:value&#x3D;&quot;$&#123;season.seasonId&#125;&quot;\n           th:text&#x3D;&quot;$&#123;season.seasonName&#125;&quot;\n           th:checked&#x3D;&quot;$&#123;seasonList1.contains(season)&#125;&quot;&gt;\n    &lt;br&#x2F;&gt;\n\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<h3 id=\"04、RESTFul-讲解\"><a href=\"#04、RESTFul-讲解\" class=\"headerlink\" title=\"04、RESTFul 讲解\"></a>04、RESTFul 讲解</h3><h4 id=\"①-RESTFul-风格概述\"><a href=\"#①-RESTFul-风格概述\" class=\"headerlink\" title=\"① RESTFul 风格概述\"></a>① RESTFul 风格概述</h4><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>\n<ul>\n<li>定位：互联网软件架构风格</li>\n<li>倡导者：Roy Thomas Fielding</li>\n<li>文献：Roy Thomas Fielding的博士论文</li>\n</ul>\n<h4 id=\"②-挑战与应对\"><a href=\"#②-挑战与应对\" class=\"headerlink\" title=\"② 挑战与应对\"></a>② 挑战与应对</h4><p>传统的软件系统仅在本地工作，但随着项目规模的扩大和复杂化，不但整个项目会拓展为分布式架构，很多功能也会通过网络访问第三方接口来实现。在通过网络访问一个功能的情况下，我们不能轻易假设网络状况文档可靠。所以当一个请求发出后没有接收到对方的回应，那我们该如何判定本次操作成功与否？</p>\n<p>下面以保存操作为例来说明一下针对功能和针对资源进行操作的区别：</p>\n<ul>\n<li><p>针对功能设计系统</p>\n<p>保存一个 Employee 对象，没有接收到返回结果，判定操作失败，再保存一次。但是其实在服务器端保存操作已经成功了，只是返回结果在网络传输过程中丢失了。而第二次的补救行为则保存了重复、冗余但 id 不同的数据，这对整个系统数据来说是一种破坏。</p>\n</li>\n<li><p>针对资源设计系统</p>\n<p>针对 id 为 3278 的资源执行操作，服务器端会判断指定 id 的资源是否存在。如果不存在，则执行保存操作新建数据；如果存在，则执行更新操作。所以这个操作不论执行几次，对系统的影响都是一样的。在网络状态不可靠的情况下可以多次重试，不会破坏系统数据。</p>\n</li>\n</ul>\n<p>==幂等性：若一个操作执行一次和执行 N 次对系统的影响相同，那么我们就说这个操作满足幂等性。而幂等性正是 REST 规范所倡导的==</p>\n<p>确立 HTTP 协议作为项目架构设计规范和统一标准后，无论系统内部的远程方法还是系统外部的第三方接口，对我们当前所在模块来说都是网络上的资源，完全可以使用相同（或类似）的方式来访问和调用。这非常有利于我们建构大型、超大型互联网项目体系。</p>\n<h4 id=\"③-RESTFul-规范的内涵\"><a href=\"#③-RESTFul-规范的内涵\" class=\"headerlink\" title=\"③ RESTFul 规范的内涵\"></a>③ RESTFul 规范的内涵</h4><h5 id=\"point-right-资源\"><a href=\"#point-right-资源\" class=\"headerlink\" title=\":point_right: 资源\"></a>:point_right: 资源</h5><p>URL：Uniform Resource Locator 统一资源定位器。意思是网络上的任何资源都可以通过 URL 来定位。但是在实际开发中，我们往往是使用 URL 来对应一个具体的功能，而不是资源本身。REST 规范则倡导使用 URL 对应网络上的各种资源，任何一个资源都可以通过一个 URL 访问到，为实现操作<strong>幂等性</strong>奠定基础。</p>\n<h5 id=\"point-right-状态转移\"><a href=\"#point-right-状态转移\" class=\"headerlink\" title=\":point_right: 状态转移\"></a>:point_right: 状态转移</h5><p>REST 倡导针对资源本身操作，所以对资源的操作如果满足幂等性，那么操作只会导致资源本身的状态发生变化而不会破坏整个系统数据。</p>\n<h4 id=\"④-RESTFul-规范具体要求\"><a href=\"#④-RESTFul-规范具体要求\" class=\"headerlink\" title=\"④ RESTFul 规范具体要求\"></a>④ RESTFul 规范具体要求</h4><h5 id=\"point-right-四种请求方式对应四种风格\"><a href=\"#point-right-四种请求方式对应四种风格\" class=\"headerlink\" title=\":point_right: 四种请求方式对应四种风格\"></a>:point_right: 四种请求方式对应四种风格</h5><p>REST 风格<strong>主张</strong>在项目设计、开发过程中，具体的操作符合 HTTP 协议定义的请求方式的<strong>语义</strong>。</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询操作</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>保存操作</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>删除操作</td>\n<td>DELETE</td>\n</tr>\n<tr>\n<td>更新操作</td>\n<td>PUT</td>\n</tr>\n</tbody></table>\n<p>另有一种说法：</p>\n<ul>\n<li>POST 操作针对功能执行，没有锁定资源 id，是非幂等性操作。</li>\n<li>PUT 操作锁定资源 id，即使操作失败仍然可以针对原 id 重新执行，对整个系统来说满足幂等性。<ul>\n<li>id 对应的资源不存在：执行保存操作</li>\n<li>id 对应的资源存在：执行更新操作</li>\n</ul>\n</li>\n</ul>\n<p>这个说法更加深刻</p>\n<h5 id=\"point-right-URL-地址风格\"><a href=\"#point-right-URL-地址风格\" class=\"headerlink\" title=\":point_right: URL 地址风格\"></a>:point_right: URL 地址风格</h5><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。还有一点是不要使用请求扩展名。</p>\n<table>\n<thead>\n<tr>\n<th>传统 URL 地址</th>\n<th>REST 风格地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/remove/emp?id=5</td>\n<td>/emp/5</td>\n</tr>\n</tbody></table>\n<h4 id=\"⑤-RESTFul-风格好处\"><a href=\"#⑤-RESTFul-风格好处\" class=\"headerlink\" title=\"⑤ RESTFul 风格好处\"></a>⑤ RESTFul 风格好处</h4><h5 id=\"point-right-含蓄，安全\"><a href=\"#point-right-含蓄，安全\" class=\"headerlink\" title=\":point_right: 含蓄，安全\"></a>:point_right: 含蓄，安全</h5><p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p>\n<h5 id=\"point-right-风格统一\"><a href=\"#point-right-风格统一\" class=\"headerlink\" title=\":point_right: 风格统一\"></a>:point_right: 风格统一</h5><p>URL 地址整体格式统一，从前到后始终都使用斜杠划分各个内容部分，用简单一致的格式表达语义。</p>\n<h5 id=\"point-right-无状态\"><a href=\"#point-right-无状态\" class=\"headerlink\" title=\":point_right: 无状态\"></a>:point_right: 无状态</h5><p>在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p>\n<h5 id=\"point-right-严谨，规范\"><a href=\"#point-right-严谨，规范\" class=\"headerlink\" title=\":point_right: 严谨，规范\"></a>:point_right: 严谨，规范</h5><p>严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p>\n<h5 id=\"point-right-简洁，优雅\"><a href=\"#point-right-简洁，优雅\" class=\"headerlink\" title=\":point_right: 简洁，优雅\"></a>:point_right: 简洁，优雅</h5><p>过去做增删改查操作需要设计4个不同的URL，现在一个就够了。</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>传统风格</th>\n<th>REST 风格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>保存</td>\n<td>/CRUD/saveEmp</td>\n<td>URL 地址：/CRUD/emp 请求方式：POST</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>/CRUD/removeEmp?empId=2</td>\n<td>URL 地址：/CRUD/emp/2 请求方式：DELETE</td>\n</tr>\n<tr>\n<td>更新</td>\n<td>/CRUD/updateEmp</td>\n<td>URL 地址：/CRUD/emp 请求方式：PUT</td>\n</tr>\n<tr>\n<td>查询（表单回显）</td>\n<td>/CRUD/editEmp?empId=2</td>\n<td>URL 地址：/CRUD/emp/2 请求方式：GET</td>\n</tr>\n</tbody></table>\n<h5 id=\"point-right-丰富的语义\"><a href=\"#point-right-丰富的语义\" class=\"headerlink\" title=\":point_right: 丰富的语义\"></a>:point_right: 丰富的语义</h5><p>通过 URL 地址就可以知道资源之间的关系。它能够把一句话中的很多单词用斜杠连起来，反过来说就是可以在 URL 地址中用一句话来充分表达语义。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://localhost:8080/shop\">http://localhost:8080/shop</a></p>\n<p><a href=\"http://localhost:8080/shop/product\">http://localhost:8080/shop/product</a></p>\n<p><a href=\"http://localhost:8080/shop/product/cellPhone\">http://localhost:8080/shop/product/cellPhone</a></p>\n<p><a href=\"http://localhost:8080/shop/product/cellPhone/iPhone\">http://localhost:8080/shop/product/cellPhone/iPhone</a></p></blockquote>\n<h4 id=\"⑥-四种请求方式映射-star\"><a href=\"#⑥-四种请求方式映射-star\" class=\"headerlink\" title=\"⑥ 四种请求方式映射 :star:\"></a>⑥ 四种请求方式映射 :star:</h4><h5 id=\"point-right-HHMF-类\"><a href=\"#point-right-HHMF-类\" class=\"headerlink\" title=\":point_right: HHMF 类\"></a>:point_right: HHMF 类</h5><p>HiddenHttpMethodFilter</p>\n<p>在 HTML 中，GET 和 POST 请求可以天然实现，但是 DELETE 和 PUT 请求无法直接做到。SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>源码要点</p>\n<p>[1]默认请求参数名常量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public static final String DEFAULT_METHOD_PARAM &#x3D; &quot;_method&quot;;</code></pre>\n\n<p>在 HiddenHttpMethodFilter 中，声明了一个常量：DEFAULT_METHOD_PARAM，常量值是”_method”。</p>\n<p>[2]和常量配套的成员变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private String methodParam &#x3D; DEFAULT_METHOD_PARAM;</code></pre>\n\n<p>之所以会提供这个成员变量和配套的 setXxx() 方法，是允许我们在配置 Filter 时，通过初始化参数来修改这个变量。如果不修改，默认就是前面常量定义的值。</p>\n<p>[3]以常量值为名称获取请求参数</p></blockquote>\n<p> <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sping-springmvc-restful.png\" alt=\"images\"></p>\n<h5 id=\"point-right-装饰者模式\"><a href=\"#point-right-装饰者模式\" class=\"headerlink\" title=\":point_right: 装饰者模式\"></a>:point_right: 装饰者模式</h5><p>装饰者模式也是二十三种设计模式之一，属于结构型模式，主要特点就是借助原始对象实现和原始对象一样的接口，同时通过重写父类方法修改被包装对象的行为。</p>\n<h5 id=\"point-right-​原始请求对象的包装\"><a href=\"#point-right-​原始请求对象的包装\" class=\"headerlink\" title=\":point_right: ​原始请求对象的包装\"></a>:point_right: ​原始请求对象的包装</h5><p>困难</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>包装对象必须和原始对象是同一个类型</li>\n<li>保证同一个类型不能通过子类继承父类实现<ul>\n<li>子类对象：希望改变行为、属性的对象</li>\n<li>父类对象：随着 Servlet 容器的不同，各个容器对 HttpServletRequest 接口给出的实现不同。如果继承了 A 容器给出的实现类，那么将来就不能再迁移到 B 容器。</li>\n</ul>\n</li>\n<li>只能让包装对象和被包装对象实现相同接口<ul>\n<li>虽然使用动态代理技术大致上应该能实现，但是一旦应用代理就必须为被包装的对象的每一个方法都进行代理，操作过于繁琐。</li>\n</ul>\n</li>\n<li>如果我们自己创建一个类实现 HttpServletRequest 接口<ul>\n<li>困难1：我们其实并不知道具体该怎么做</li>\n<li>困难2：抽象方法实在太多</li>\n</ul>\n</li>\n</ul></blockquote>\n<p>HttpServletRequestWrapper 类</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HttpServletRequestWrapper 类能够非常好的帮助我们对原始 request 对象进行包装。它为什么能帮我们解决上面的困难呢？</p>\n<ul>\n<li>HttpServletRequestWrapper  类替我们实现了HttpServletRequest 接口</li>\n<li>为了让包装得到的新对象在任何 Servlet 容器平台上都能够正常工作，HttpServletRequestWrapper  类此处的设计非常巧妙：它借助原始的 request 对象本身来实现所有的具体功能</li>\n<li>在我们想通过包装的方式来修改原始对象的行为或属性时，只需要在 HttpServletRequestWrapper  类的子类中重写对应的方法即可 </li>\n</ul></blockquote>\n<p>HttpMethodRequestWrapper 类</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HttpMethodRequestWrapper 类就是 HiddenHttpMethodFilter 的一个内部类，在 HttpMethodRequestWrapper 类中有如下行为实现了对原始对象的包装：</p>\n<ul>\n<li>继承了官方包装类：HttpServletRequestWrapper</li>\n<li>在构造器中将原始 request 对象传给了父类构造器</li>\n<li>将我们指定的新请求方式传给了成员变量</li>\n<li>重写了父类（官方包装类）的 getMethod() 方法</li>\n<li>外界想知道新包装对象的请求方式时，会来调用被重写的 getMethod() 方法，从而得到我们指定的请求方式</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Simple &#123;@link HttpServletRequest&#125; wrapper that returns the supplied method for\n * &#123;@link HttpServletRequest#getMethod()&#125;.\n *&#x2F;\nprivate static class HttpMethodRequestWrapper extends HttpServletRequestWrapper &#123;\n    \n    private final String method;\n    \n    public HttpMethodRequestWrapper(HttpServletRequest request, String method) &#123;\n        &#x2F;&#x2F; 在构造器中将原始 request 对象传给了父类构造器\n        super(request);\n        \n        &#x2F;&#x2F; 将我们指定的新请求方式传给了成员变量\n        this.method &#x3D; method;\n    &#125;\n    \n    @Override\n    public String getMethod() &#123;\n        return this.method;\n    &#125;\n&#125;</code></pre></blockquote>\n<h4 id=\"⑦-PUT请求\"><a href=\"#⑦-PUT请求\" class=\"headerlink\" title=\"⑦ PUT请求\"></a>⑦ PUT请求</h4><p>以下操作需要在已有的 SpringMVC 环境基础上执行，并配置 web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--将 POST 请求，转化为PUT DELETE 请求 （写在编码过滤器后，否则会出现乱码）--&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;&#x2F;filter-class&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;PUT 请求&lt;&#x2F;h3&gt;\n&lt;!-- 原请求方式必须是 post --&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;user&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;!-- 通过表单隐藏域携带一个请求参数 --&gt;\n    &lt;!-- 请求参数名：_method --&gt;\n    &lt;!-- 请求参数值：put --&gt;\n    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;PUT&quot;&gt;\n    &lt;input name&#x3D;&quot;userId&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;\n    &lt;input name&#x3D;&quot;userName&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;\n    &lt;input name&#x3D;&quot;userSalary&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;修改&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; PUT 请求，修改用户信息\n@PutMapping(value &#x3D; &quot;&#x2F;user&quot;)\npublic  String putUser(User user)&#123;\n    log.debug(&quot;----------putUser---&quot;+user.getUserName()+&quot;,&quot;+user.getUserSalary()+&quot;-------------&quot;);\n    return &quot;result&quot;;\n&#125;</code></pre>\n\n<h4 id=\"⑧-DELETE-请求\"><a href=\"#⑧-DELETE-请求\" class=\"headerlink\" title=\"⑧ DELETE 请求\"></a>⑧ DELETE 请求</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;DELETE 请求&lt;&#x2F;h3&gt;\n&lt;div id&#x3D;&quot;delete&quot;&gt;\n    &lt;a th:href&#x3D;&quot;@&#123;&#x2F;user&#x2F;2&#125;&quot; @click.prevent&#x3D;&quot;doConvert&quot;&gt;删除&lt;&#x2F;a&gt;\n&lt;&#x2F;div&gt;\n&lt;!-- 创建一个通用表单，在删除超链接的单击响应函数中通过这个表单把GET请求转换为POST，进而再转DELETE --&gt;\n&lt;form method&#x3D;&quot;post&quot; id&#x3D;&quot;convertForm&quot;&gt;\n    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;delete&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; th:src&#x3D;&quot;@&#123;&#x2F;js&#x2F;vue.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        new Vue(&#123;\n            el: &quot;#delete&quot;,\n            methods: &#123;\n                &quot;doConvert&quot;: function (event) &#123;\n\n                    &#x2F;&#x2F; 1.先根据id获取到表单的元素对象\n                    var formEle &#x3D; document.getElementById(&quot;convertForm&quot;);\n                    &#x2F;&#x2F; 2.将表单的action属性设置为当前超链接的href属性\n                    &#x2F;&#x2F; ①之所以要这样赋值就是为了将来提交表单的时候访问的还是原超链接要访问的地址\n                    &#x2F;&#x2F; ②event对象：当前事件对象\n                    &#x2F;&#x2F; ③event.target对象：发生事件的元素对象，现在是我们点击的超链接\n                    &#x2F;&#x2F; ④event.target.href属性：超链接的href属性值\n                    &#x2F;&#x2F; ⑤formEle.action属性：表单的action属性的值\n                    formEle.action &#x3D; event.target.href;\n                    &#x2F;&#x2F; 3.提交表单\n                    formEle.submit();\n                    &#x2F;&#x2F; 阻止超链接的默认行为（跳转页面）\n                    &#x2F;*event.preventDefault();*&#x2F;\n                &#125;\n            &#125;\n        &#125;);\n    &lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; DELETE 请求，删除用户信息\n@DeleteMapping(value &#x3D; &quot;&#x2F;user&#x2F;&#123;userId&#125;&quot;)\npublic  String deleteUser(@PathVariable(&quot;userId&quot;) Integer id)&#123;\n    log.debug(&quot;----------deleteUser---&quot;+id+&quot;-------------&quot;);\n    return &quot;result&quot;;\n&#125;</code></pre>\n\n<h4 id=\"⑨-请求方式Filter对字符集Filter影响\"><a href=\"#⑨-请求方式Filter对字符集Filter影响\" class=\"headerlink\" title=\"⑨ 请求方式Filter对字符集Filter影响\"></a>⑨ 请求方式Filter对字符集Filter影响</h4><h5 id=\"point-right-​结论\"><a href=\"#point-right-​结论\" class=\"headerlink\" title=\":point_right: ​结论\"></a>:point_right: ​结论</h5><p>当 web.xml 中两个 Filter 并存，<strong>一定要让 CharacterEncodingFilter 先执行</strong>。</p>\n<h5 id=\"point-right-​原因\"><a href=\"#point-right-​原因\" class=\"headerlink\" title=\":point_right: ​原因\"></a>:point_right: ​原因</h5><ul>\n<li>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</li>\n<li>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</li>\n<li>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">String paramValue &#x3D; request.getParameter(this.methodParam);</code></pre>\n\n<h4 id=\"⑩-PathVariable\"><a href=\"#⑩-PathVariable\" class=\"headerlink\" title=\"⑩ @PathVariable\"></a>⑩ @PathVariable</h4><h5 id=\"point-right-REST风格路径参数\"><a href=\"#point-right-REST风格路径参数\" class=\"headerlink\" title=\":point_right: REST风格路径参数\"></a>:point_right: REST风格路径参数</h5><p>请看下面链接：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>/emp/20</p>\n<p>/shop/product/iphone</p></blockquote>\n<p>如果我们想要获取链接地址中的某个部分的值，就可以使用 @PathVariable 注解，例如上面地址中的20、iphone部分。</p>\n<h5 id=\"point-right-​操作\"><a href=\"#point-right-​操作\" class=\"headerlink\" title=\":point_right: ​操作\"></a>:point_right: ​操作</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>传一个值</strong>： <code>&lt;a th:href=&quot;@&#123;/emp/20&#125;&quot;&gt;</code>传一个值<code>&lt;/a&gt;</code></p>\n<p>handler 方法：实际访问地址：/emp/20        映射地址：/emp/{empId}是把变量部分用大括号标记出来，写入变量名</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;emp&#x2F;&#123;empId&#125;&quot;)\npublic String getEmpById(@PathVariable(&quot;empId&quot;) Integer empId) &#123;\n    logger.debug(&quot;empId &#x3D; &quot; + empId);\n\n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<p><strong>传多个值</strong>：<code>&lt;a th:href=&quot;@&#123;/emp/tom/18/50&#125;&quot;&gt;</code>传多个值<code>&lt;/a&gt;</code></p>\n<p>handler 方法：实际地址：/emp/tom/18/50</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;emp&#x2F;&#123;empName&#125;&#x2F;&#123;empAge&#125;&#x2F;&#123;empSalary&#125;&quot;)\npublic String queryEmp(\n    @PathVariable(&quot;empName&quot;) String empName,\n    @PathVariable(&quot;empAge&quot;) Integer empAge,\n    @PathVariable(&quot;empSalary&quot;) Double empSalary\n) &#123;\n    logger.debug(&quot;empName &#x3D; &quot; + empName);\n    logger.debug(&quot;empAge &#x3D; &quot; + empAge);\n    logger.debug(&quot;empSalary &#x3D; &quot; + empSalary);\n\n    return &quot;target&quot;;\n&#125;</code></pre></blockquote>\n<h3 id=\"05、AJAX\"><a href=\"#05、AJAX\" class=\"headerlink\" title=\"05、AJAX\"></a>05、AJAX</h3><h4 id=\"①-实验一（普通）\"><a href=\"#①-实验一（普通）\" class=\"headerlink\" title=\"① 实验一（普通）\"></a>① 实验一（普通）</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请求：发送普通请求参数</p>\n<p>handler 方法：使用 @RequestParam 注解接收请求参数</p>\n<p>响应：服务器端返回普通文本</p></blockquote>\n<p>引入JavaScript库</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;script&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;script&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p>前台代码（普通数据用   <strong>params</strong>）</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;span id&#x3D;&quot;testSpan&quot;&gt;\n    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;实验一&quot; @click&#x3D;&quot;demo1&quot;&gt;\n&lt;&#x2F;span&gt;\n\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    new Vue(&#123;\n        el: &quot;#testSpan&quot;,\n        methods: &#123;\n            demo1() &#123;\n                axios(&#123;\n                    method: &quot;post&quot;,\n                    url: &quot;axios&#x2F;demo1&quot;,\n                    params: &#123;\n                        username: &quot;奥巴马&quot;,\n                        password: &quot;222222&quot;\n                    &#125;\n                &#125;).then(response &#x3D;&gt; &#123;\n                    console.log(response.data)\n                &#125;).catch(error &#x3D;&gt; &#123;\n                    console.log(error)\n                &#125;)\n            &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>后台代码</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：<strong>使用@ResponseBody注解告诉 SpringMVC：请你拿当前方法的返回值作为响应体，不要再找视图了</strong></p>\n<p>方法返回值类型有两种情况：</p>\n<p>​        情况一：简单类型。SpringMVC 会直接作为响应体数据。</p>\n<p>​        情况二：复杂类型。SpringMVC 会把它转换为 JSON 然后再作为响应体。此时需要 Jackson 的支持。</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ResponseBody\n@RequestMapping(&quot;&#x2F;ajax&#x2F;experiment&#x2F;one&quot;)\npublic String experimentOne(\n \n        &#x2F;&#x2F; Ajax请求发过来的请求参数，对服务器端来说没有区别，还是像以前一样正常接收\n        @RequestParam(&quot;userName&quot;) String userName,\n        @RequestParam(&quot;password&quot;) String password\n) &#123;\n \n    logger.debug(&quot;userName &#x3D; &quot; + userName);\n    logger.debug(&quot;password &#x3D; &quot; + password);\n \n    &#x2F;&#x2F; 服务器端给Ajax程序的响应数据通过handler方法的返回值提供\n    return &quot;message from handler as response[来自服务器的问候]&quot;;\n&#125;</code></pre>\n\n<h4 id=\"②-实验二（请求体是-JSON）\"><a href=\"#②-实验二（请求体是-JSON）\" class=\"headerlink\" title=\"② 实验二（请求体是  JSON）\"></a>② 实验二（请求体是  JSON）</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请求：发送普通的请求参数，请求参数整体正好对应实体类</p>\n<p>handler 方法：使用普通实体类接收请求参数</p>\n<p>响应：返回普通文本数据</p></blockquote>\n<p><strong>导入Json依赖</strong>​ :star:</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--我们自己导入时需要注意：SpringMVC 和 Jackson 配合使用有版本的要求。二者中任何一个版本太高或太低都不行。--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.12.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>前台代码 （<strong>axios中传参的部分使用 ：data，表示请求体的是 json数据</strong>）</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    new Vue(&#123;\n        el: &quot;#testSpan&quot;,\n        methods: &#123;\n            demo3() &#123;\n                axios(&#123;\n                    method: &quot;post&quot;,\n                    url: &quot;axios&#x2F;demo3&quot;,\n                    data: &#123;\n                        id: 1,\n                        name: &quot;黄任翔&quot;,\n                        pwd: &quot;2222222&quot;,\n                        bir: &quot;1999-10-14 12:13:14&quot;,\n                        subjectList: [\n                            &#123;\n                                subjectName: &quot;java&quot;,\n                                subjectScore: &quot;200.0&quot;\n                            &#125;,\n                            &#123;\n                                subjectName: &quot;c++&quot;,\n                                subjectScore: &quot;100.0&quot;\n                            &#125;,\n                            &#123;\n                                subjectName: &quot;python&quot;,\n                                subjectScore: &quot;50.0&quot;\n                            &#125;\n                        ]\n                    &#125;\n\n                &#125;).then(response &#x3D;&gt; &#123;\n                    console.log(response)\n                &#125;).catch(error &#x3D;&gt; &#123;\n                    console.log(error)\n                &#125;)\n            &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Student &#123;\n    private Integer id;\n    private String name;\n    private String pwd;\n    @JsonFormat(pattern &#x3D; &quot;yyyy:MM:dd HH:mm:ss&quot;,timezone &#x3D; &quot;GMT+8&quot;)\n    @DateTimeFormat(pattern &#x3D; &quot;yyyy:MM:dd HH:mm:ss&quot;)\n    private Date bir;\n    private List&lt;Subject&gt; subjectList;\n\n&#125;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Subject &#123;\n    private  String subjectName;\n    private String subjectScore;\n&#125;\n\n@RequestMapping(value &#x3D; &quot;&#x2F;axios&#x2F;demo3&quot;)\npublic String axiosDemo3(@RequestBody Student student) &#123;\n    log.debug(&quot;-----------&quot; + student.toString() + &quot;-----------&quot;);\n    return &quot;axiosDemo3   is   ok!!!&quot;;\n&#125;</code></pre>\n\n<p><strong>注意</strong>：如果前端程序使用 axios 的 params 属性发送请求参数，那么请求参数会附着在 URL 地址后面，此时当前请求没有请求体。同时服务器端 handler 方法使用了 @RequestBody 注解，会在日志中看到下面异常信息：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HttpMessageNotReadableException: Required request body is missing:</p></blockquote>\n<p>意思是需要请求体，但是没有找到。</p>\n<h4 id=\"③-实验三（返回数据是JSON）\"><a href=\"#③-实验三（返回数据是JSON）\" class=\"headerlink\" title=\"③ 实验三（返回数据是JSON）\"></a>③ 实验三（返回数据是JSON）</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;axios&#x2F;demo4&quot;)\npublic Student axiosDemo4() &#123;\n    log.debug(&quot;-----------&quot; + &quot;demo4&quot; + &quot;-----------&quot;);\n    List&lt;Subject&gt; subjectList &#x3D; new ArrayList&lt;&gt;();\n    subjectList.add(new Subject(&quot;java&quot;,&quot;99.0&quot;));\n    subjectList.add(new Subject(&quot;c++&quot;,&quot;89.0&quot;));\n    subjectList.add(new Subject(&quot;php&quot;,&quot;79.0&quot;));\n    return new Student(1, &quot;hh&quot;, &quot;gg&quot;,new Date(),subjectList);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    new Vue(&#123;\n        el: &quot;#testSpan&quot;,\n        methods: &#123;\n            demo4() &#123;\n                axios(&#123;\n                    method: &quot;post&quot;,\n                    url: &quot;axios&#x2F;demo4&quot;,\n                &#125;).then(response &#x3D;&gt; &#123;\n                    console.log(response.data)\n                    console.log(response.data.uName)\n                    console.log(response.data.uPwd)\n                &#125;).catch(error &#x3D;&gt; &#123;\n                    console.log(error)\n                &#125;)\n            &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"④-常见错误\"><a href=\"#④-常见错误\" class=\"headerlink\" title=\"④ 常见错误\"></a>④ 常见错误</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>415错误</p></blockquote>\n<p>表示 SpringMVC 为了将 实体类对象转换为 JSON 数据，需要转换器。但是现在找不到转换器。它想要成功完成转换需要两方面支持：</p>\n<ul>\n<li>mvc:annotation-driven</li>\n<li>引入 Jackson 依赖</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>406错误</p></blockquote>\n<p>问题出现的原因：</p>\n<ul>\n<li>请求地址扩展名：html</li>\n<li>服务器端打算返回的数据格式：JSON</li>\n</ul>\n<p>上面二者不一致。SpringMVC 要坚守一个商人的良心，不能干『挂羊头，卖狗肉』的事儿。解决办法有三种思路：</p>\n<ul>\n<li>第一种方法：不使用请求扩展名</li>\n<li>第二种方法：使用和实际返回的数据格式一致的扩展名</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;\n    &lt;url-pattern&gt;*.html&lt;&#x2F;url-pattern&gt;\n    &lt;url-pattern&gt;*.json&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;servlet-mapping&gt;</code></pre>\n\n<ul>\n<li>第三种方法：使用一个 HTTP 协议中没有被定义的扩展名，例如：*.atguigu</li>\n</ul>\n<h4 id=\"⑤-RestController\"><a href=\"#⑤-RestController\" class=\"headerlink\" title=\"⑤ @RestController\"></a>⑤ @RestController</h4><h5 id=\"point-right-提取-ResponseBody\"><a href=\"#point-right-提取-ResponseBody\" class=\"headerlink\" title=\":point_right:  提取@ResponseBody\"></a>:point_right:  提取@ResponseBody</h5><p>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。</p>\n<h5 id=\"point-right-合并\"><a href=\"#point-right-合并\" class=\"headerlink\" title=\":point_right:  合并\"></a>:point_right:  合并</h5><p>类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解。所以使用了 @RestController 注解就相当于给类中的每个方法都加了 @ResponseBody 注解。</p>\n<h5 id=\"point-right-源码\"><a href=\"#point-right-源码\" class=\"headerlink\" title=\":point_right: 源码\"></a>:point_right: 源码</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Controller\n@ResponseBody\npublic @interface RestController &#123;\n \n    &#x2F;**\n     * The value may indicate a suggestion for a logical component name,\n     * to be turned into a Spring bean in case of an autodetected component.\n     * @return the suggested component name, if any (or empty String otherwise)\n     * @since 4.0.1\n     *&#x2F;\n    @AliasFor(annotation &#x3D; Controller.class)\n    String value() default &quot;&quot;;\n \n&#125;</code></pre>\n\n<h5 id=\"point-right-SpringMVC-4-版本响应体字符集设置\"><a href=\"#point-right-SpringMVC-4-版本响应体字符集设置\" class=\"headerlink\" title=\":point_right: SpringMVC 4 版本响应体字符集设置\"></a>:point_right: SpringMVC 4 版本响应体字符集设置</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 当返回响应体数据包含乱码时，在@RequestMapping注解中设置\n&#x2F;&#x2F; produces属性给响应体设置内容类型\n@ResponseBody\n@RequestMapping(value &#x3D; &quot;&#x2F;ajax&#x2F;get&#x2F;message&quot;, produces &#x3D; &quot;text&#x2F;html;charset&#x3D;UTF-8&quot;)\npublic String getMessage() &#123;\n    return &quot;message from server:你好&quot;;\n&#125;\n\n&#x2F;&#x2F; 如果返回 JSON 数据时遇到乱码问题，那么内容类型应设置为：application&#x2F;json;charset&#x3D;UTF-8\n&#x2F;&#x2F; 这里需要注意：JSON 属于 application 这个大类，不属于 text\n@ResponseBody\n@RequestMapping(value &#x3D; &quot;&#x2F;ajax&#x2F;get&#x2F;entity&quot;, produces &#x3D; &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)\npublic Emp getEntity() &#123;\n    Emp emp &#x3D; new Emp();\n\n    emp.setEmpName(&quot;舔狗&quot;);\n\n    return emp;\n&#125;</code></pre>\n\n\n\n<h3 id=\"07、入参出参数格式化\"><a href=\"#07、入参出参数格式化\" class=\"headerlink\" title=\"07、入参出参数格式化\"></a>07、入参出参数格式化</h3><ol>\n<li>准备，定义一个pojo，它有一个 java.util.Date 类型的属性 date。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Date;\npublic class DateVo &#123;\n  private Date date;\n  public void setDate(Date date)&#123;\n    this.date &#x3D; date;\n  &#125;\n  public Date getDate()&#123;\n    return date;\n  &#125;\n&#125;</code></pre>\n\n<p>定义一个Controller</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(&quot;&#x2F;date&#x2F;&quot;)\npublic class DateController &#123;\n  @RequestMapping(&quot;test&quot;)\n  public DateVo getDate(DateVo vo)&#123;\n    System.out.println(&quot;date1:&quot;+vo.getDate());\n\n    SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n    String date &#x3D; sdf.format(vo.getDate());\n    System.out.println(&quot;date2:&quot;+date);\n\n    DateVo vo2 &#x3D; new DateVo();\n    vo2.setDate(new Date());\n    return vo2;\n  &#125;\n&#125;</code></pre>\n\n<p>访问 /date/test ，并传入参数：2018-08-02 22:05:55</p>\n<p>发现并不能访问成功，会抛出异常：因为传入的参数是 String 类型的，而用来接收参数的 DateVo 的 date 属性是 java.util.Date 类型的，类型无法转换。</p>\n<h4 id=\"2、入参格式化\"><a href=\"#2、入参格式化\" class=\"headerlink\" title=\"2、入参格式化\"></a>2、入参格式化</h4><ol>\n<li>这时，就可以使用 Spring 的 @DateTimeFormat 注解格式化参数，来解决上述问题。</li>\n</ol>\n<p>改造 DateVo：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class DateVo &#123;\n  @DateTimeFormat(pattern&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;)\n  private Date date;\n  public void setDate(Date date)&#123;\n    this.date &#x3D; date;\n  &#125;\n  public Date getDate()&#123;\n    return date;\n  &#125;&#125;</code></pre>\n<p>再像上面一样访问 /date/test ，并传入参数：2018-08-02 22:05:55，将在控制台上打印：</p>\n<p>date1:Thu Aug 02 22:05:55 CST 2018</p>\n<p>date2:2018-08-02 22:05:55</p>\n<p>可以看到，加入 @DateTimeFormat 注解后参数可以被接收到了，但日期时间的格式还是需要自己再手动转换一下。</p>\n<p>因为 @DateTimeFormat 注解的 pattern 属性值指定的日期时间格式并不是将要转换成的日期格式，这个指定的格式是和传入的参数对应的，假如注解为：</p>\n<p>@DateTimeFormat(pattern=”yyyy/MM/dd HH:mm:ss”)</p>\n<p>则传入的参数应该是这样的：2018/08/02 22:05:55，否则会抛出异常</p>\n<h4 id=\"3、出参格式化，\"><a href=\"#3、出参格式化，\" class=\"headerlink\" title=\"3、出参格式化，\"></a>3、出参格式化，</h4><p>在上述示例中，调用接口的返回结果为：”date”: “2018-08-01T14:25:31.296+0000”</p>\n<p>这个格式并不是我们想要的，那么如何将其进行格式化？这时就需要用到 jackson 的 @JsonFormat 注解。</p>\n<p>改造 DateVo：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class DateVo &#123;\n  @DateTimeFormat(pattern&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;)\n  @JsonFormat(\n    pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;\n  )\n  private Date date;\n  public void setDate(Date date)&#123;\n    this.date &#x3D; date;\n  &#125;\n  public Date getDate()&#123;\n    return date;\n  &#125;&#125;</code></pre>\n<p>继续访问 /date/test ，并传入参数：2018-08-02 22:05:55，可以看到接口返回的结果为：”date”: “2018-08-01 14:32:57”</p>\n<p>虽然时间格式正确了，但实际上当前时间是 “2018-08-01 22:32:57” ，早了8个小时。因为，jackson在序列化时间时是按照国际标准时间GMT进行格式化的，而在国内默认时区使用的是CST时区，两者相差8小时。</p>\n<p>所以，@JsonFormat 注解还要再加一个属性：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@JsonFormat(\n    pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;，\n    timezone &#x3D; &quot;GMT+8&quot;\n)\nprivate Date date;</code></pre>\n\n<p>这样，结果就正确了。</p>\n<p>因为 @JsonFormat 注解不是 Spring 自带的注解，所以使用该注解前需要添加 jackson 相关的依赖包。当然，如果是 SpringBoot 项目就不需要自己手动添加依赖了，因为在 spring-boot-start-web 下已经包含了 jackson 相关依赖</p>\n","text":"01、springMVC 入门① 传统 MVC 架构使用MVC架构（JSP/Thymeleaf+Servlet+JavaBean）进行分层开发，可以实现分工协作、可以实现组件重用、可以利于后期维护。 缺点如下 每个功能都要声明对应的Servlet，Servlet数量多。即使让一个...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#01%E3%80%81springMVC-%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">01、springMVC 入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E4%BC%A0%E7%BB%9F-MVC-%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">① 传统 MVC 架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-SpringMVC-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">② SpringMVC 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-SpringMVC-%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">③ SpringMVC 优势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-SpringMVC-%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">④ SpringMVC 代码对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E8%B7%9F%E8%B8%AA-SpringMVC-%E7%9A%84%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">⑤ 跟踪 SpringMVC 的请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%99%EF%BC%9ADispatcherServlet\"><span class=\"toc-text\">第一站：DispatcherServlet</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%99%EF%BC%9AHandlerMapping\"><span class=\"toc-text\">第二站：HandlerMapping</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%99%EF%BC%9A%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">第三站：控制器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%99%EF%BC%9A%E8%BF%94%E5%9B%9E-DispatcherServlet\"><span class=\"toc-text\">第四站：返回 DispatcherServlet</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E7%AB%99%EF%BC%9A%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">第五站：视图解析器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AD%E7%AB%99%EF%BC%9A%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">第六站：视图</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B-game-die\"><span class=\"toc-text\">⑥ 入门案例 :game_die:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A6-%E9%85%8D%E7%BD%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">⑦ 配置中的问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8Bmaven-%E4%BC%A0%E9%80%92%E6%80%A7\"><span class=\"toc-text\">:point_right: ​maven 传递性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E5%8A%A0%E5%85%A5%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E4%BB%AA\"><span class=\"toc-text\">:point_right: ​加入日志记录仪</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-DispatcherServlet\"><span class=\"toc-text\">:point_right: DispatcherServlet</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-POST-%E8%AF%B7%E6%B1%82%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">:point_right: POST 请求乱码问题</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A7-%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%9B%BE\"><span class=\"toc-text\">⑧ 整体流程分析图</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#02%E3%80%81%E9%87%8D%E8%A6%81%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">02、重要注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-RequestMapping\"><span class=\"toc-text\">① @RequestMapping</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">:point_right: 前言</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E9%85%8D-do-%E4%B8%8D%E5%8A%A0-do\"><span class=\"toc-text\">:point_right: 配 *.do 不加 .do</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E5%8C%B9%E9%85%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">:point_right: ​匹配方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E6%8A%BD%E5%8F%96%E9%87%8D%E5%A4%8D%E8%B7%AF%E5%BE%84%E5%88%B0%E7%B1%BB%E4%B8%8A\"><span class=\"toc-text\">:point_right: ​抽取重复路径到类上</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E9%99%84%E5%8A%A0%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">:point_right: ​附加请求方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-RequestParam\"><span class=\"toc-text\">② @RequestParam</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%89%8D%E8%A8%80-1\"><span class=\"toc-text\">:point_right: 前言</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-RequestParam%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">:point_right: RequestParam的属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E4%B8%80%E5%90%8D%E4%B8%80%E5%80%BC\"><span class=\"toc-text\">:point_right: 一名一值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E4%B8%80%E5%90%8D%E5%A4%9A%E5%80%BC\"><span class=\"toc-text\">:point_right: 一名多值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E8%A1%A8%E5%8D%95%E6%A8%A1%E5%9E%8B%EF%BC%88%E5%AE%9E%E4%BD%93%E7%B1%BB%EF%BC%89\"><span class=\"toc-text\">:point_right: 表单模型（实体类）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%A4%8D%E6%9D%82%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">:point_right: 复杂实体类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%8F%91%E9%80%81list%E9%9B%86%E5%90%88\"><span class=\"toc-text\">:point_right: 发送list集合</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-RequestHeader\"><span class=\"toc-text\">③ @RequestHeader</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-CookieValue\"><span class=\"toc-text\">④ @CookieValue</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">⑤ 页面跳转控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#03%E3%80%81%E5%85%B6%E4%BB%96%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">03、其他基础功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E8%8E%B7%E5%8F%96%E5%8E%9F%E7%94%9FServletAPI\"><span class=\"toc-text\">① 获取原生ServletAPI</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%B1%9E%E6%80%A7%E5%9F%9F\"><span class=\"toc-text\">② 属性域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%B1%9E%E6%80%A7%E5%9F%9F%E7%9A%84%E9%87%8D%E8%A6%81%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">:point_right: 属性域的重要作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E8%AF%B7%E6%B1%82%E5%9F%9F%E7%9A%84%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">:point_right: ​请求域的操作方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">:point_right: 模型的本质</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E4%BC%9A%E8%AF%9D%E5%9F%9F\"><span class=\"toc-text\">③ 会话域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%BA%94%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">④ 应用域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-mvc-view-controller\"><span class=\"toc-text\">⑤ mvc:view-controller</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9B%9E%E6%98%BE%EF%BC%89\"><span class=\"toc-text\">⑥ 表单标签（回显）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%9B%9E%E6%98%BE%E7%AE%80%E5%8D%95%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">:point_right: 回显简单标签</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%9B%9E%E6%98%BE%E5%B8%A6%E9%80%89%E6%8B%A9%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">:point_right: 回显带选择功能的标签</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#04%E3%80%81RESTFul-%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">04、RESTFul 讲解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-RESTFul-%E9%A3%8E%E6%A0%BC%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">① RESTFul 风格概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%8C%91%E6%88%98%E4%B8%8E%E5%BA%94%E5%AF%B9\"><span class=\"toc-text\">② 挑战与应对</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-RESTFul-%E8%A7%84%E8%8C%83%E7%9A%84%E5%86%85%E6%B6%B5\"><span class=\"toc-text\">③ RESTFul 规范的内涵</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">:point_right: 资源</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB\"><span class=\"toc-text\">:point_right: 状态转移</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-RESTFul-%E8%A7%84%E8%8C%83%E5%85%B7%E4%BD%93%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">④ RESTFul 规范具体要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%9B%9B%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%AF%B9%E5%BA%94%E5%9B%9B%E7%A7%8D%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">:point_right: 四种请求方式对应四种风格</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-URL-%E5%9C%B0%E5%9D%80%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">:point_right: URL 地址风格</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-RESTFul-%E9%A3%8E%E6%A0%BC%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">⑤ RESTFul 风格好处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%90%AB%E8%93%84%EF%BC%8C%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">:point_right: 含蓄，安全</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80\"><span class=\"toc-text\">:point_right: 风格统一</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%97%A0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">:point_right: 无状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E4%B8%A5%E8%B0%A8%EF%BC%8C%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">:point_right: 严谨，规范</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E7%AE%80%E6%B4%81%EF%BC%8C%E4%BC%98%E9%9B%85\"><span class=\"toc-text\">:point_right: 简洁，优雅</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E4%B8%B0%E5%AF%8C%E7%9A%84%E8%AF%AD%E4%B9%89\"><span class=\"toc-text\">:point_right: 丰富的语义</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E5%9B%9B%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E6%98%A0%E5%B0%84-star\"><span class=\"toc-text\">⑥ 四种请求方式映射 :star:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-HHMF-%E7%B1%BB\"><span class=\"toc-text\">:point_right: HHMF 类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">:point_right: 装饰者模式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E5%8E%9F%E5%A7%8B%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%85%E8%A3%85\"><span class=\"toc-text\">:point_right: ​原始请求对象的包装</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A6-PUT%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">⑦ PUT请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A7-DELETE-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">⑧ DELETE 请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A8-%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8FFilter%E5%AF%B9%E5%AD%97%E7%AC%A6%E9%9B%86Filter%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">⑨ 请求方式Filter对字符集Filter影响</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">:point_right: ​结论</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">:point_right: ​原因</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A9-PathVariable\"><span class=\"toc-text\">⑩ @PathVariable</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-REST%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">:point_right: REST风格路径参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">:point_right: ​操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#05%E3%80%81AJAX\"><span class=\"toc-text\">05、AJAX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89\"><span class=\"toc-text\">① 实验一（普通）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%88%E8%AF%B7%E6%B1%82%E4%BD%93%E6%98%AF-JSON%EF%BC%89\"><span class=\"toc-text\">② 实验二（请求体是  JSON）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%88%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E6%98%AFJSON%EF%BC%89\"><span class=\"toc-text\">③ 实验三（返回数据是JSON）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">④ 常见错误</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-RestController\"><span class=\"toc-text\">⑤ @RestController</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%8F%90%E5%8F%96-ResponseBody\"><span class=\"toc-text\">:point_right:  提取@ResponseBody</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">:point_right:  合并</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">:point_right: 源码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-SpringMVC-4-%E7%89%88%E6%9C%AC%E5%93%8D%E5%BA%94%E4%BD%93%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">:point_right: SpringMVC 4 版本响应体字符集设置</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#07%E3%80%81%E5%85%A5%E5%8F%82%E5%87%BA%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">07、入参出参数格式化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">2、入参格式化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%87%BA%E5%8F%82%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%8C\"><span class=\"toc-text\">3、出参格式化，</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SpringMVC 特定功能","uid":"a17a011b39e721d63806f9eabda18a53","slug":"53-SpringMVC-特定功能","date":"2021-09-13T15:30:32.000Z","updated":"2021-09-15T10:50:28.643Z","comments":true,"path":"api/articles/53-SpringMVC-特定功能.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","text":":cactus: 拦截器① 拦截器前言 SpringMVC提供的拦截器类似于JavaWeb中的过滤器，只不过SpringMVC拦截器只拦截被前端控制器拦截的请求，而过滤器拦截从前端发送的任意请求。 熟练掌握SpringMVC拦截器对于我们开发非常有帮助，在没使用权限框架(shir...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Spring 声明式事务","uid":"a69a9b95a293fad60680e3e8965ab8da","slug":"51-Spirng-声明式事务","date":"2021-09-13T15:28:32.000Z","updated":"2021-09-15T10:50:45.764Z","comments":true,"path":"api/articles/51-Spirng-声明式事务.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1、JdbcTemplate Spring提供了整合JDBC的JDBCTemplate，先有Spring，再出现MyBatis，所以整合包不是Spring提供的，而是第三方提供的。 JDBCTemplate和MyBatis共同点：都是对JDBC进行了封装 不同点：肯定是MyBat...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"Spring","slug":"Spring","count":6,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":6,"path":"api/tags/Spring.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}