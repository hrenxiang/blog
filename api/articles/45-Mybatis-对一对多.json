{"title":"Mybatis 对一对多","uid":"b4fe850bfca7fffe4256d22b623aea94","slug":"45-Mybatis-对一对多","date":"2021-09-13T15:22:32.000Z","updated":"2021-09-15T10:51:50.014Z","comments":true,"path":"api/articles/45-Mybatis-对一对多.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","content":"<h3 id=\"1-一对一\"><a href=\"#1-一对一\" class=\"headerlink\" title=\"1. 一对一\"></a>1. 一对一</h3><h4 id=\"1-1-resultType实现\"><a href=\"#1-1-resultType实现\" class=\"headerlink\" title=\"1.1. resultType实现\"></a>1.1. resultType实现</h4><ul>\n<li>sql语句</li>\n</ul>\n<p>确定查询的主表：订单表</p>\n<p>确定查询的关联表：用户表</p>\n<p>关联查询使用内连接？还是外连接？</p>\n<p>由于orders表中有一个外键（user_id），通过外键关联查询用户表只能查询出一条记录，可以使用内连接。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n  orders.*,\n  USER.username,\n  USER.sex,\n  USER.address \nFROM\n  orders,\n  USER \nWHERE orders.user_id &#x3D; user.id</code></pre>\n\n<ul>\n<li>创建pojo</li>\n</ul>\n<p>将上边sql查询的结果映射到pojo中，pojo中必须包括所有查询列名。</p>\n<p>原始的Orders.java不能映射全部字段，需要新创建的pojo。</p>\n<p>创建一个pojo继承包括查询字段较多的po类。</p>\n<p>对应数据表的几个pojo类(Items,Orderdetail,Orders)就是把该类的属性名设为和数据表列字段名相同，并为这些属性添加getter和setter，在这里就不贴代码了，只贴出对应于关联查询的自定义pojo类<code>OrdersCustom</code>的代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package cn.edu.wtu.po;\n\n&#x2F;**\n * @Package cn.edu.wtu.po\n * @ClassName OrdersCustom\n * @Description 通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类\n * @Date 19&#x2F;11&#x2F;10 11:17\n * @Author LIM\n * @Version V1.0\n *&#x2F;\npublic class OrdersCustom extends Orders&#123;\n    private String username;\n    private String sex;\n    private String address;\n\n    public String getUsername() &#123;\n        return username;\n    &#125;\n\n    public void setUsername(String username) &#123;\n        this.username &#x3D; username;\n    &#125;\n\n    public String getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(String sex) &#123;\n        this.sex &#x3D; sex;\n    &#125;\n\n    public String getAddress() &#123;\n        return address;\n    &#125;\n\n    public void setAddress(String address) &#123;\n        this.address &#x3D; address;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;OrdersCustom&#123;&quot; +\n                &quot;username&#x3D;&#39;&quot; + username + &#39;\\&#39;&#39; +\n                &quot;, sex&#x3D;&#39;&quot; + sex + &#39;\\&#39;&#39; +\n                &quot;, address&#x3D;&#39;&quot; + address + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<ul>\n<li>OrderMapper.xml</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"> &lt;!-- 查询订单关联查询用户信息 --&gt;\n&lt;select id&#x3D;&quot;findOrdersUser&quot;  resultType&#x3D;&quot;com.iot.mybatis.po.OrdersCustom&quot;&gt;\n  SELECT\n      orders.*,\n      user.username,\n      user.sex,\n      user.address\n    FROM\n      orders,\n      user\n    WHERE orders.user_id &#x3D; user.id\n&lt;&#x2F;select&gt;</code></pre>\n\n\n<ul>\n<li>OrdeMapper.java</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;查询订单关联查询用户信息\npublic List&lt;OrdersCustom&gt; findOrdersUser()throws Exception;\n&#125;</code></pre>\n\n\n\n<h4 id=\"1-2-resultMap实现\"><a href=\"#1-2-resultMap实现\" class=\"headerlink\" title=\"1.2 resultMap实现\"></a>1.2 resultMap实现</h4><p>使用resultMap将查询结果中的订单信息映射到Orders对象中，在orders类中添加User属性，将关联查询出来的用户信息映射到orders对象中的user属性中。</p>\n<ul>\n<li>定义resultMap</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 订单查询关联用户的resultMap\n 将整个查询的结果映射到cn.edu.wtu.po.Orders中\n --&gt;\n &lt;resultMap id&#x3D;&quot;OrdersUsersResultMap&quot; type&#x3D;&quot;cn.edu.wtu.po.Orders&quot;&gt;\n     &lt;!-- 配置映射的订单信息 --&gt;\n     &lt;!-- id：指定查询列中的唯一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id\n         column：订单信息的唯一标识列\n         property：订单信息的唯一标识列所映射到Orders中哪个属性\n       --&gt;\n     &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n     &lt;result column&#x3D;&quot;user_id&quot; property&#x3D;&quot;userId&quot;&#x2F;&gt;\n     &lt;result column&#x3D;&quot;createtime&quot; property&#x3D;&quot;createtime&quot;&#x2F;&gt;\n     &lt;result column&#x3D;&quot;number&quot; property&#x3D;&quot;number&quot;&#x2F;&gt;\n     &lt;result column&#x3D;&quot;note&quot; property&#x3D;&quot;note&quot;&#x2F;&gt;\n     &lt;!-- 配置映射的关联的用户信息 --&gt;\n     &lt;!-- association：用于映射关联查询单个对象的信息\n     property：要将关联查询的用户信息映射到Orders中哪个属性\n      --&gt;\n     &lt;association property&#x3D;&quot;user&quot; javaType&#x3D;&quot;cn.edu.wtu.po.User&quot;&gt;\n         &lt;!-- id：关联查询用户的唯一标识\n         column：指定唯 一标识用户信息的列\n         javaType：映射到user的哪个属性\n          --&gt;\n         &lt;id column&#x3D;&quot;user_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n         &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;username&quot;&#x2F;&gt;\n         &lt;result column&#x3D;&quot;sex&quot; property&#x3D;&quot;sex&quot;&#x2F;&gt;\n         &lt;result column&#x3D;&quot;address&quot; property&#x3D;&quot;address&quot;&#x2F;&gt;\n     &lt;&#x2F;association&gt;\n &lt;&#x2F;resultMap&gt;</code></pre>\n\n\n<ul>\n<li>statement定义</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 查询订单关联查询用户信息 --&gt;\n&lt;select id&#x3D;&quot;findOrdersUserResultMap&quot; resultMap&#x3D;&quot;OrdersUserResultMap&quot;&gt;\n    SELECT\n    orders.*,\n    user.username,\n    user.sex,\n    user.address\n    FROM\n    orders,\n    user\n    WHERE orders.user_id &#x3D; user.id\n&lt;&#x2F;select&gt;</code></pre>\n\n<ul>\n<li>OrderMapper.java</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;查询订单关联查询用户使用resultMap\npublic List&lt;Orders&gt; findOrdersUserResultMap()throws Exception;</code></pre>\n\n<ul>\n<li>测试代码</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void testFindOrdersUserResultMap() throws Exception &#123;\n\n\tSqlSession sqlSession &#x3D; sqlSessionFactory.openSession();\n\t&#x2F;&#x2F; 创建代理对象\n\tOrdersMapperCustom ordersMapperCustom &#x3D; sqlSession\n\t\t\t.getMapper(OrdersMapperCustom.class);\n\n\t&#x2F;&#x2F; 调用maper的方法\n\tList&lt;Orders&gt; list &#x3D; ordersMapperCustom.findOrdersUserResultMap();\n\n\tSystem.out.println(list);\n\n\tsqlSession.close();\n&#125;</code></pre>\n\n<h4 id=\"1-3-resultType和resultMap实现一对一查询小结\"><a href=\"#1-3-resultType和resultMap实现一对一查询小结\" class=\"headerlink\" title=\"1.3 resultType和resultMap实现一对一查询小结\"></a>1.3 resultType和resultMap实现一对一查询小结</h4><p>实现一对一查询：</p>\n<ul>\n<li>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</li>\n<li>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。</li>\n<li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li>\n</ul>\n<h3 id=\"2-一对多\"><a href=\"#2-一对多\" class=\"headerlink\" title=\"2. 一对多\"></a>2. 一对多</h3><h4 id=\"2-1-需求\"><a href=\"#2-1-需求\" class=\"headerlink\" title=\"2.1 需求\"></a>2.1 需求</h4><p>查询订单及订单明细的信息。(根据数据库模型分析的结果来查询)<br>使用resultMap<br><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/moreAndnore.png\"></p>\n<h4 id=\"2-2-要求\"><a href=\"#2-2-要求\" class=\"headerlink\" title=\"2.2 要求\"></a>2.2 要求</h4><p>对orders映射不能出现重复记录。</p>\n<h4 id=\"2-3-解决思路\"><a href=\"#2-3-解决思路\" class=\"headerlink\" title=\"2.3 解决思路\"></a>2.3 解决思路</h4><ol>\n<li>在orders.java类中添加List&lt;&gt;, orderDetails属性。</li>\n<li>最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的orderDetails属性中。</li>\n<li>映射成的orders记录数为两条（orders信息不重复）</li>\n<li>每个orders中的orderDetails属性存储了该订单所对应的订单明细</li>\n</ol>\n<h4 id=\"2-4-resultMap\"><a href=\"#2-4-resultMap\" class=\"headerlink\" title=\"2.4 resultMap\"></a>2.4 resultMap</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 订单及订单明细的resultMap\n    使用extends继承，不用在中配置订单信息和用户信息的映射\n--&gt;\n&lt;resultMap id&#x3D;&quot;OrdersAndOrderDetailResultMap&quot; type&#x3D;&quot;cn.edu.wtu.po.Orders&quot; extends&#x3D;&quot;OrdersUsersResultMap&quot;&gt;\n        &lt;!-- 订单信息 --&gt;\n        &lt;!-- 用户信息 --&gt;\n        &lt;!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 --&gt;\n        &lt;!-- 订单明细信息\n        一个订单关联查询出了多条明细，要使用collection进行映射\n        collection：对关联查询到多条记录映射到集合对象中\n        property：将关联查询到多条记录映射到cn.edu.wtu.po.Orders哪个属性\n        ofType：指定映射到list集合属性中pojo的类型\n         --&gt;\n        &lt;collection property&#x3D;&quot;orderDetails&quot; ofType&#x3D;&quot;cn.edu.wtu.po.OrderDetail&quot;&gt;\n            &lt;!-- id：订单明细唯 一标识\n            property:要将订单明细的唯 一标识 映射到cn.edu.wtu.po.OrderDetail的哪个属性\n              --&gt;\n            &lt;id column&#x3D;&quot;orderDetail_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;items_id&quot; property&#x3D;&quot;itemsId&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;order_id&quot; property&#x3D;&quot;ordersId&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;items_num&quot; property&#x3D;&quot;itemsNum&quot;&#x2F;&gt;\n        &lt;&#x2F;collection&gt;\n&lt;&#x2F;resultMap&gt;</code></pre>\n\n<h4 id=\"2-5-OrderMapper-xml\"><a href=\"#2-5-OrderMapper-xml\" class=\"headerlink\" title=\"2.5 OrderMapper.xml\"></a>2.5 OrderMapper.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 查询订单关联查询用户及订单明细，使用resultMap --&gt;\n    &lt;select id&#x3D;&quot;findOrdersAndOrderDetailResultMap&quot; resultMap&#x3D;&quot;OrdersAndOrderDetailResultMap&quot;&gt;\n        SELECT\n          orders.*,\n          user.username,\n          user.sex,\n          user.address,\n          orderdetail.id orderdetail_id,\n          orderdetail.items_id,\n          orderdetail.items_num,\n          orderdetail.orders_id\n        FROM\n          orders,\n          user,\n          orderdetail\n        WHERE orders.user_id &#x3D; user.id AND orderdetail.orders_id&#x3D;orders.id;\n    &lt;&#x2F;select&gt;</code></pre>\n\n<h4 id=\"2-6-OrderMapper-java\"><a href=\"#2-6-OrderMapper-java\" class=\"headerlink\" title=\"2.6 OrderMapper.java\"></a>2.6 OrderMapper.java</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n     * 查询订单关联查询用户及订单明细，使用resultMap\n     * @return Orders的列表\n     * @throws Exception\n     *&#x2F;\n    public List&lt;Orders&gt; findOrdersAndOrderDetailResultMap() throws Exception;</code></pre>\n\n<h4 id=\"2-7-测试\"><a href=\"#2-7-测试\" class=\"headerlink\" title=\"2.7 测试\"></a>2.7 测试</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n    public void testFindOrdersAndOrderDetailResultMap() throws Exception&#123;\n        &#x2F;&#x2F; 创建会话\n        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();\n        &#x2F;&#x2F; 创建代理对象\n        OrderMapper orderMapper &#x3D; sqlSession.getMapper(OrderMapper.class);\n\n        List&lt;Orders&gt; lists &#x3D; orderMapper.findOrdersAndOrderDetailResultMap();\n\n        for (Orders list:lists)&#123;\n            System.out.println(list.toString());\n        &#125;\n    &#125;</code></pre>\n\n<h4 id=\"2-8-小结\"><a href=\"#2-8-小结\" class=\"headerlink\" title=\"2.8 小结\"></a>2.8 小结</h4><p>mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。</p>\n<p>使用resultType实现：将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。</p>\n<p>另外，下面这篇文章对一对多的resultMap机制解释的很清楚：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://blog.csdn.net/xzm_rainbow/article/details/15336933\">MyBatis：一对多表关系详解(从案例中解析)</a></p></blockquote>\n<h3 id=\"3-多对多\"><a href=\"#3-多对多\" class=\"headerlink\" title=\"3. 多对多\"></a>3. 多对多</h3><h4 id=\"3-1-需求\"><a href=\"#3-1-需求\" class=\"headerlink\" title=\"3.1 需求\"></a>3.1 需求</h4><p>查询用户及用户购买商品信息。</p>\n<p>查询主表是：用户表</p>\n<p>关联表：由于用户和商品没有直接关联，通过订单和订单明细进行关联，所以关联表：orders、orderdetail、items</p>\n<h4 id=\"3-2-sql\"><a href=\"#3-2-sql\" class=\"headerlink\" title=\"3.2 sql\"></a>3.2 sql</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n  orders.*,\n  user.username,\n  user.sex,\n  user.address,\n  orderdetail.id orderdetail_id,\n  orderdetail.items_id,\n  orderdetail.items_num,\n  orderdetail.orders_id,\n  items.name items_name,\n  items.detail items_detail,\n  items.price items_price\nFROM\n  orders,\n  user,\n  orderdetail,\n  items\nWHERE orders.user_id &#x3D; user.id AND orderdetail.orders_id&#x3D;orders.id AND orderdetail.items_id &#x3D; items.id</code></pre>\n\n<h4 id=\"3-3-映射思路\"><a href=\"#3-3-映射思路\" class=\"headerlink\" title=\"3.3 映射思路\"></a>3.3 映射思路</h4><ol>\n<li><p>将用户信息映射到user中。</p>\n</li>\n<li><p>在user类中添加订单列表属性<code>List&lt;Orders&gt; orderslist</code>，将用户创建的订单映射到orderslist</p>\n</li>\n<li><p>在Orders中添加订单明细列表属性<code>List&lt;OrderDetail&gt;orderdetials</code>，将订单的明细映射到orderdetials</p>\n</li>\n<li><p>在OrderDetail中添加<code>Items</code>属性，将订单明细所对应的商品映射到Items</p>\n</li>\n</ol>\n<h4 id=\"3-4-resultMap\"><a href=\"#3-4-resultMap\" class=\"headerlink\" title=\"3.4 resultMap\"></a>3.4 resultMap</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 查询用户及购买的商品 --&gt;\n    &lt;resultMap id&#x3D;&quot;UserAndItemsResultMap&quot; type&#x3D;&quot;cn.edu.wtu.po.User&quot;&gt;\n        &lt;!-- 用户信息 --&gt;\n        &lt;id column&#x3D;&quot;user_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n        &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;username&quot;&#x2F;&gt;\n        &lt;result column&#x3D;&quot;sex&quot; property&#x3D;&quot;sex&quot;&#x2F;&gt;\n        &lt;result column&#x3D;&quot;address&quot; property&#x3D;&quot;address&quot;&#x2F;&gt;\n        &lt;!-- 订单信息\n        一个用户对应多个订单，使用collection映射\n         --&gt;\n        &lt;collection property&#x3D;&quot;ordersList&quot; ofType&#x3D;&quot;cn.edu.wtu.po.Orders&quot;&gt;\n            &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;user_id&quot; property&#x3D;&quot;userId&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;number&quot; property&#x3D;&quot;number&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;createtime&quot; property&#x3D;&quot;createtime&quot;&#x2F;&gt;\n            &lt;result column&#x3D;&quot;note&quot; property&#x3D;&quot;note&quot;&#x2F;&gt;\n            &lt;!-- 订单明细\n             一个订单包括 多个明细\n             --&gt;\n            &lt;collection property&#x3D;&quot;orderDetails&quot; ofType&#x3D;&quot;cn.edu.wtu.po.OrderDetail&quot;&gt;\n                &lt;id column&#x3D;&quot;orderDetail_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n                &lt;result column&#x3D;&quot;items_id&quot; property&#x3D;&quot;itemsId&quot;&#x2F;&gt;\n                &lt;result column&#x3D;&quot;items_num&quot; property&#x3D;&quot;itemsNum&quot;&#x2F;&gt;\n                &lt;result column&#x3D;&quot;orders_id&quot; property&#x3D;&quot;ordersId&quot;&#x2F;&gt;\n                &lt;!-- 商品信息\n                 一个订单明细对应一个商品\n                 --&gt;\n                &lt;association property&#x3D;&quot;items&quot; javaType&#x3D;&quot;cn.edu.wtu.po.Items&quot;&gt;\n                    &lt;id column&#x3D;&quot;items_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;\n                    &lt;result column&#x3D;&quot;items_name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;\n                    &lt;result column&#x3D;&quot;items_detail&quot; property&#x3D;&quot;detail&quot;&#x2F;&gt;\n                    &lt;result column&#x3D;&quot;items_price&quot; property&#x3D;&quot;price&quot;&#x2F;&gt;\n                &lt;&#x2F;association&gt;\n            &lt;&#x2F;collection&gt;\n        &lt;&#x2F;collection&gt;\n    &lt;&#x2F;resultMap&gt;</code></pre>\n\n<h4 id=\"3-5-OrderMapper-xml\"><a href=\"#3-5-OrderMapper-xml\" class=\"headerlink\" title=\"3.5 OrderMapper.xml\"></a>3.5 OrderMapper.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 查询用户及购买的商品信息，使用resultMap --&gt;\n    &lt;select id&#x3D;&quot;findUserAndItemsResultMap&quot; resultMap&#x3D;&quot;UserAndItemsResultMap&quot;&gt;\n        SELECT\n        orders.*,\n        USER.username,\n        USER.sex,\n        USER.address,\n        orderdetail.id orderdetail_id,\n        orderdetail.items_id,\n        orderdetail.items_num,\n        orderdetail.orders_id,\n        items.name items_name,\n        items.detail items_detail,\n        items.price items_price\n        FROM\n        orders,\n        USER,\n        orderdetail,\n        items\n        WHERE orders.user_id &#x3D; user.id AND orderdetail.orders_id&#x3D;orders.id AND orderdetail.items_id &#x3D; items.id\n    &lt;&#x2F;select&gt;</code></pre>\n\n<h4 id=\"3-6-OrderMapper-java\"><a href=\"#3-6-OrderMapper-java\" class=\"headerlink\" title=\"3.6 OrderMapper.java\"></a>3.6 OrderMapper.java</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n     * 查询用户购买商品信息\n     * @return User的列表\n     * @throws Exception\n     *&#x2F;\n    public List&lt;User&gt;  findUserAndItemsResultMap()throws Exception;</code></pre>\n\n<h4 id=\"3-7-测试\"><a href=\"#3-7-测试\" class=\"headerlink\" title=\"3.7 测试\"></a>3.7 测试</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n    public void testFindUserAndItemsResultMap() throws Exception&#123;\n        &#x2F;&#x2F; 创建会话\n        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();\n        &#x2F;&#x2F; 创建代理对象\n        OrderMapper orderMapper &#x3D; sqlSession.getMapper(OrderMapper.class);\n\n        List&lt;User&gt; lists &#x3D; orderMapper.findUserAndItemsResultMap();\n\n        for (User list:lists)&#123;\n            System.out.println(list.toString());\n        &#125;\n    &#125;</code></pre>\n\n<h4 id=\"3-8-多对多查询总结\"><a href=\"#3-8-多对多查询总结\" class=\"headerlink\" title=\"3.8 多对多查询总结\"></a>3.8 多对多查询总结</h4><p>将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）</p>\n<p>针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。</p>\n<p>一对多是多对多的特例，如下需求：</p>\n<p>查询用户购买的商品信息，用户和商品的关系是多对多关系。</p>\n<ul>\n<li>需求1：</li>\n</ul>\n<p>查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)</p>\n<p>企业开发中常见明细列表，用户购买商品明细列表，</p>\n<p>使用resultType将上边查询列映射到pojo输出。</p>\n<ul>\n<li>需求2：</li>\n</ul>\n<p>查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）</p>\n<p>使用resultMap将用户购买的商品明细列表映射到user对象中。</p>\n<p>总结：</p>\n<p>使用resultMap是针对那些对查询结果映射有特殊要求的功能，比如特殊要求映射成list中包括多个list。</p>\n<h3 id=\"4-总结1\"><a href=\"#4-总结1\" class=\"headerlink\" title=\"4. 总结1\"></a>4. 总结1</h3><h4 id=\"4-1-resultType\"><a href=\"#4-1-resultType\" class=\"headerlink\" title=\"4.1 resultType\"></a>4.1 resultType</h4><ul>\n<li>作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中。</li>\n<li>场合：常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</li>\n</ul>\n<h4 id=\"4-2-resultMap\"><a href=\"#4-2-resultMap\" class=\"headerlink\" title=\"4.2 resultMap\"></a>4.2 resultMap</h4><p>使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。</p>\n<h4 id=\"4-2-1-association-一对一\"><a href=\"#4-2-1-association-一对一\" class=\"headerlink\" title=\"4.2.1 association(一对一)\"></a>4.2.1 association(一对一)</h4><ul>\n<li>作用：将关联查询信息映射到一个pojo对象中。</li>\n<li>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li>\n</ul>\n<p>使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。</p>\n<h4 id=\"4-2-2-collection-一对多\"><a href=\"#4-2-2-collection-一对多\" class=\"headerlink\" title=\"4.2.2 collection(一对多)\"></a>4.2.2 collection(一对多)</h4><ul>\n<li>作用：将关联查询信息映射到一个list集合中。</li>\n<li>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。</li>\n</ul>\n<h4 id=\"4-2-3-关键标签\"><a href=\"#4-2-3-关键标签\" class=\"headerlink\" title=\"4.2.3 关键标签\"></a>4.2.3 关键标签</h4><table>\n<thead>\n<tr>\n<th>关联关系</th>\n<th>配置项关键词</th>\n<th>所在配置文件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>对一</td>\n<td>association标签/javaType属性</td>\n<td>Mapper配置文件中的resultMap</td>\n</tr>\n<tr>\n<td>对多</td>\n<td>collection标签/ofType属性</td>\n<td>Mapper配置文件中的resultMap</td>\n</tr>\n<tr>\n<td>对一分步</td>\n<td>association标签/select属性</td>\n<td>Mapper配置文件中的resultMap</td>\n</tr>\n<tr>\n<td>对多分步</td>\n<td>collection标签/select属性</td>\n<td>Mapper配置文件中的resultMap</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-总结2\"><a href=\"#5-总结2\" class=\"headerlink\" title=\"5. 总结2\"></a>5. 总结2</h3><h4 id=\"1-多表连接查询和分步查询的优缺点\"><a href=\"#1-多表连接查询和分步查询的优缺点\" class=\"headerlink\" title=\"1. 多表连接查询和分步查询的优缺点\"></a>1. 多表连接查询和分步查询的优缺点</h4><ul>\n<li>多表连接查询<ul>\n<li>好处：是一条SQL语句获取多个表的数据，效率高</li>\n<li>缺点：不存在延迟加载，有可能<strong>获取非常多不必要的数据</strong></li>\n</ul>\n</li>\n<li>分步查询<ul>\n<li>优点：可以配置延迟加载，<strong>需要数据时再获取</strong>，不需要就不加载</li>\n<li>多条SQL语句获取多个表的数据，效率低</li>\n</ul>\n</li>\n<li>建议<ul>\n<li>如果确定是获取多表数据，就使用多表连接查询。</li>\n<li>如果不能确定是否加载多表数据，就使用分步查询（多个单表查询组合而成）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-一对一、一对多、多对多的数据库实现、Java实体类实现、MyBatis映射文件实现\"><a href=\"#2-一对一、一对多、多对多的数据库实现、Java实体类实现、MyBatis映射文件实现\" class=\"headerlink\" title=\"2. 一对一、一对多、多对多的数据库实现、Java实体类实现、MyBatis映射文件实现\"></a>2. 一对一、一对多、多对多的数据库实现、Java实体类实现、MyBatis映射文件实现</h4><ul>\n<li><p>一对一</p>\n<ul>\n<li>数据库：进行外键关联，并设置外键唯一；进行主键关联，一个表中作为另外一个的主键，也是外键</li>\n<li>java实体类：添加对应的实体类对象参数</li>\n<li>mybatis映射：通过<strong>association</strong>进行对一的相关配置，使用<strong>javaType</strong>指定对一的类的全路径名</li>\n</ul>\n</li>\n<li><p>一对多</p>\n<ul>\n<li><p>数据库：一对多，在多的一方的表中<strong>添加一的主键为外键</strong>进行对应</p>\n</li>\n<li><p>java实体类：在一的一方添加多的<strong>实体对象的集合</strong></p>\n</li>\n<li><p>mybatis映射：使用<strong>collection</strong>标签，属性property指向 实体类中多的实体对象集合，oftype指明集合中对象的实体类的全路径名</p>\n<p>若没有使用多表连接语句查询，也可以定义各自单独的查询方法，collection标签中，使用select属性，调用需要查询对象集合的相关方法，使其映射到property指向的属性中</p>\n</li>\n</ul>\n</li>\n<li><p>多对多</p>\n<ul>\n<li>数据库：使用一个中间表，保存两个表的主键做外键，并在设置一个自身的主键，使其变为两个一对多的关系</li>\n<li>java实体类：分别在两方添加对应的实体对象集合</li>\n<li>mybatis映射：一对多是一种特殊的多对多，所以根据需求，我们可以将多对多转化为一对多，将查询的结果映射到实体参数中对应的集合中</li>\n</ul>\n</li>\n</ul>\n","text":"1. 一对一1.1. resultType实现 sql语句 确定查询的主表：订单表 确定查询的关联表：用户表 关联查询使用内连接？还是外连接？ 由于orders表中有一个外键（user_id），通过外键关联查询用户表只能查询出一条记录，可以使用内连接。 SELECT orders...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">1. 一对一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-resultType%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.1. resultType实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-resultMap%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.2 resultMap实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-resultType%E5%92%8CresultMap%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">1.3 resultType和resultMap实现一对一查询小结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%80%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">2. 一对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">2.1 需求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">2.2 要求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">2.3 解决思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-resultMap\"><span class=\"toc-text\">2.4 resultMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-OrderMapper-xml\"><span class=\"toc-text\">2.5 OrderMapper.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-OrderMapper-java\"><span class=\"toc-text\">2.6 OrderMapper.java</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-7-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">2.7 测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-8-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">2.8 小结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%A4%9A%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">3. 多对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">3.1 需求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-sql\"><span class=\"toc-text\">3.2 sql</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%98%A0%E5%B0%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">3.3 映射思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-resultMap\"><span class=\"toc-text\">3.4 resultMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-OrderMapper-xml\"><span class=\"toc-text\">3.5 OrderMapper.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-OrderMapper-java\"><span class=\"toc-text\">3.6 OrderMapper.java</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">3.7 测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.8 多对多查询总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%931\"><span class=\"toc-text\">4. 总结1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-resultType\"><span class=\"toc-text\">4.1 resultType</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-resultMap\"><span class=\"toc-text\">4.2 resultMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-association-%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">4.2.1 association(一对一)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-collection-%E4%B8%80%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">4.2.2 collection(一对多)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-%E5%85%B3%E9%94%AE%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">4.2.3 关键标签</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%932\"><span class=\"toc-text\">5. 总结2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">1. 多表连接查询和分步查询的优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%B8%80%E5%AF%B9%E4%B8%80%E3%80%81%E4%B8%80%E5%AF%B9%E5%A4%9A%E3%80%81%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E3%80%81Java%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AE%9E%E7%8E%B0%E3%80%81MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2. 一对一、一对多、多对多的数据库实现、Java实体类实现、MyBatis映射文件实现</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Mybatis 延迟缓存","uid":"381bed42b31a39fe0a5eda0244c8a085","slug":"46-Mybatis-延迟缓存","date":"2021-09-13T15:23:32.000Z","updated":"2021-09-15T10:51:42.422Z","comments":true,"path":"api/articles/46-Mybatis-延迟缓存.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. 延迟加载延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。也叫懒加载。 resultMap可以实现高级映射（使用&#96;association&#96;、&#96;collection&#96;实现一对一及一对...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Mybatis 动态SQL","uid":"650dc14f73504516668e17ca7e793b09","slug":"44-Mybatis-动态SQL","date":"2021-09-13T15:21:32.000Z","updated":"2021-09-15T10:51:57.620Z","comments":true,"path":"api/articles/44-Mybatis-动态SQL.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"1. 什么是动态SQL动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}