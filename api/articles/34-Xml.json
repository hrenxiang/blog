{"title":"XML","uid":"1158d9e6c37bc3dd9f057cb155218f0c","slug":"34-Xml","date":"2021-09-13T15:10:32.000Z","updated":"2021-09-15T10:26:43.050Z","comments":true,"path":"api/articles/34-Xml.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"1-XML概述\"><a href=\"#1-XML概述\" class=\"headerlink\" title=\"1. XML概述\"></a>1. XML概述</h3><h4 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">Extensible Markup Language   可扩展标记语言\n\n可扩展：标签是自定义的  &lt;user&gt;   &lt;学习&gt;</code></pre>\n\n<h4 id=\"1-2-功能\"><a href=\"#1-2-功能\" class=\"headerlink\" title=\"1.2 功能\"></a>1.2 功能</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">作为配置文件，存储数据\n\n存储数据后也可以在网络中传输数据</code></pre>\n\n<h4 id=\"1-3-XML与HTML的区别\"><a href=\"#1-3-XML与HTML的区别\" class=\"headerlink\" title=\"1.3 XML与HTML的区别\"></a>1.3 XML与HTML的区别</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">XML标签都是自定义的，HTML标签是预定义的\n\nXML语法严格，HTML语法松散\n\nXML是存储数据，HTML是展示数据的</code></pre>\n\n<h3 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2. 语法\"></a>2. 语法</h3><h4 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1 基本语法\"></a>2.1 基本语法</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">xml文档的后缀名是  .xml\n\nxml第一行必须是文档声明\n\nxml文档中有且仅有一个根标签\n\n属性值必须使用引号引起来\n\n标签必须正确关闭\n\nxml标签名称区分大小写</code></pre>\n\n<h4 id=\"2-2-快速入门\"><a href=\"#2-2-快速入门\" class=\"headerlink\" title=\"2.2 快速入门\"></a>2.2 快速入门</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;users&gt;\n\n    &lt;user id&#x3D;&quot;1&quot;&gt;\n        &lt;name&gt;黄任翔&lt;&#x2F;name&gt;\n        &lt;sex&gt;男&lt;&#x2F;sex&gt;\n        &lt;age&gt;21&lt;&#x2F;age&gt;\n    &lt;&#x2F;user&gt;\n\n    &lt;user id&#x3D;&quot;2&quot;&gt;\n        &lt;name&gt;想想&lt;&#x2F;name&gt;\n        &lt;sex&gt;女&lt;&#x2F;sex&gt;\n        &lt;age&gt;21&lt;&#x2F;age&gt;\n    &lt;&#x2F;user&gt;\n&lt;&#x2F;users&gt;</code></pre>\n\n<h4 id=\"2-3-组成部分\"><a href=\"#2-3-组成部分\" class=\"headerlink\" title=\"2.3 组成部分\"></a>2.3 组成部分</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.文档声明\n\t* 格式：&lt;?xml 属性?&gt;\n\t* 属性之 version：版本号\n\t* 属性之 encoding：编码方式（当前文档使用的字符集）\n\t* 属性之 standalone：是否独立（值是yes或no）\n2.指令（了解就可，早期结合css使用）\n3.标签\n\t* 标签名称自定义，命名规则如下：\n\t\t名称可以包含字母、数字以及其他的字符\n\t\t名称不能以数字或者标点符号开始\n\t\t名称不能以字母 xml（或者 XML、Xml 等等）开始\n\t\t名称不能包含空格\n4.属性\n\t* 必须加引号\n\t* 属性难以阅读和维护。请尽量使用元素来描述数据\n5.文本\n\t* CDATA区：在该区域被原样展示\n\t* 格式：&lt;![CDATA[if(a&lt;b &amp;&amp; a&gt;c)&#123;&#125;]]&gt;</code></pre>\n\n<h4 id=\"2-4-约束\"><a href=\"#2-4-约束\" class=\"headerlink\" title=\"2.4 约束\"></a><span style=\"color:red;font-size:20px;\"><strong>2.4 约束</strong></span></h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.约束\n\t*规定xml文档的书写规则\n\n2.作为框架的使用者（程序员）\n\t*能够在xml中引入约束文档\n\t*能够简单地读懂约束文档\n\n3.约束分类\n\t*DTD（简单）\n\t\t引入dtd文档到xml文档中\n\t\t\t*内部dtd：直接将约束规则定义在xml文档中(示例在下个框)\n\t\t\t*外部dtd：将约束的规则定义在外部的dtd文件中\n\t\t\t\t-本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件路径名&quot;&gt;\n\t\t\t\t-网络：&lt;!DOCTYPE 根标签名 PUBLIC “dtd文件名字” &quot;dtd文件的网络位置（url）&quot;&gt;\n\t*DTD约束缺点：不能限定内容，所以有了Schema\n\n\t*Schema（复杂）\n\t\t引入方式（内部引入）\n\t\t1.填写xml文档根元素\n\t\t2.引入xsi前缀. xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n\t\t3.引入xsd文件命名空间.xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.student.cn&#x2F;xml student.xsd&quot;\n\t\t4.为每一个xsd约束声明一个前缀，作为标识.xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.student.cn&#x2F;xml&quot;\n\t*代码\n\t\t&lt;students xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.student.cn&#x2F;xml student.xsd&quot;\n          xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.student.cn&#x2F;xml&quot;&gt;\n</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">* DTD(内部直接添加)\n&lt;!DOCTYPE NEWSPAPER [\n\n&lt;!ELEMENT NEWSPAPER (ARTICLE+)&gt;\n&lt;!ELEMENT ARTICLE (HEADLINE,BYLINE,LEAD,BODY,NOTES)&gt;\n&lt;!ELEMENT HEADLINE (#PCDATA)&gt;\n&lt;!ELEMENT BYLINE (#PCDATA)&gt;\n&lt;!ELEMENT LEAD (#PCDATA)&gt;\n&lt;!ELEMENT BODY (#PCDATA)&gt;\n&lt;!ELEMENT NOTES (#PCDATA)&gt; \n\n&lt;!ATTLIST ARTICLE AUTHOR CDATA #REQUIRED&gt;\n&lt;!ATTLIST ARTICLE EDITOR CDATA #IMPLIED&gt;\n&lt;!ATTLIST ARTICLE DATE CDATA #IMPLIED&gt;\n&lt;!ATTLIST ARTICLE EDITION CDATA #IMPLIED&gt;\n\n]&gt;</code></pre>\n\n<h4 id=\"2-5-命名空间\"><a href=\"#2-5-命名空间\" class=\"headerlink\" title=\"2.5 命名空间\"></a>2.5 命名空间</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>xmlns</td>\n<td>指出当前XML文档约束规则的名称空间在哪里<br />我们就是通过这个属性来引用一个具体的名称空间</td>\n</tr>\n<tr>\n<td>xmlns:xsi</td>\n<td>指出xmlns这个属性是在哪个约束文档中被定义的</td>\n</tr>\n<tr>\n<td>xsi:schemaLocation</td>\n<td>语法格式：在xsi名称空间下引用schemaLocation属性<br />配置含义：指定当前XML文档中所用到的约束文档本身的文件的地址</td>\n</tr>\n</tbody></table>\n<p>xmlns和xsi:schemaLocation对应关系如下图：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/xml-1.png\" alt=\"img004\"></p>\n<h3 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3. 解析\"></a>3. 解析</h3><h4 id=\"3-1-概念\"><a href=\"#3-1-概念\" class=\"headerlink\" title=\"3.1 概念\"></a>3.1 概念</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">操作xml文档，将文档中的数据，读取到内存中</code></pre>\n\n<h4 id=\"3-2-操作xml文档\"><a href=\"#3-2-操作xml文档\" class=\"headerlink\" title=\"3.2 操作xml文档\"></a>3.2 操作xml文档</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">解析（读取）：将文档中的数据读取到内存中\n\n写入：将内存中的数据保存到xml文档中，持久化储存</code></pre>\n\n<h4 id=\"3-3-解析xml的方式（三中解析方式，解析方式是解析方式，解析器是解析器）\"><a href=\"#3-3-解析xml的方式（三中解析方式，解析方式是解析方式，解析器是解析器）\" class=\"headerlink\" title=\"3.3 解析xml的方式（三中解析方式，解析方式是解析方式，解析器是解析器）\"></a>3.3 解析xml的方式（三中解析方式，解析方式是解析方式，解析器是解析器）</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">DOM：将标记语言文档一次性加载进内存，在内存中形成dom树\n\n​\t优点：操作简单，可以对文档进行CRUD的所有操作\n\n​\t缺点：占内存\n\nSAX：逐行读取，基于事件驱动的\n\n​\t优点：不占内存，永远只有一行\n\n​\t缺点：只能读取，不能增删改\n\npull：android操作系统的内置解析器，支持sax</code></pre>\n\n<h4 id=\"3-4-xml常见的解析器\"><a href=\"#3-4-xml常见的解析器\" class=\"headerlink\" title=\"3.4 xml常见的解析器\"></a>3.4 xml常见的解析器</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">JAXP：sun公司提供，支持dom和sax两种思想（基本不用）\n\nJDOM：上面的兄弟\n\nDOM4J：一款非常优秀的解析器\n\nJsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</code></pre>\n\n<h4 id=\"3-5-jsoup使用步骤\"><a href=\"#3-5-jsoup使用步骤\" class=\"headerlink\" title=\" 3.5 jsoup使用步骤\"></a><span style=\"color:red;font-size:20px;\"> 3.5 jsoup使用步骤</span></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.导入jar包\n\n2.获取Document对象\n\n3.获取对应的标签element对象\n\n4.获取数据（如果路径中有空格，会被程序编译为%20，所以用   toURI()方法转译）</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class JsoupTest_01 &#123;\n\n    public static void main(String[] args) throws IOException, URISyntaxException &#123;\n\n        &#x2F;**\n         * getClassLoader():获取父类加载器\n         * getReSource（）：获取指定文件名的文件\n         * getPath（）：获取文件的路径\n         * parse(new File(),charsetName):jsoup获取document对象\n         * 路径如果有空格，程序会把空格编译为%20，这样路径就不对了，用toURI()方法去除空格\n         *&#x2F;\n        URI uri &#x3D; JsoupTest_01.class.getClassLoader().getResource(&quot;student.xml&quot;).toURI();\n\n        &#x2F;&#x2F;file:&#x2F;D:&#x2F;my%20idea&#x2F;work&#x2F;HrxDemo&#x2F;out&#x2F;production&#x2F;XML&#x2F;student.xml\n        System.out.println(uri);\n\n        String path &#x3D; uri.getPath();\n\n        &#x2F;&#x2F;&#x2F;D:&#x2F;my idea&#x2F;work&#x2F;HrxDemo&#x2F;out&#x2F;production&#x2F;XML&#x2F;student.xml\n        System.out.println(path);\n\n        Document parse &#x3D; Jsoup.parse(new File(path), &quot;utf-8&quot;);\n\n        Elements elements &#x3D; parse.getElementsByTag(&quot;name&quot;);\n\n        System.out.println(elements.size());\n\n        Element ele &#x3D; elements.get(0);\n\n        String text &#x3D; ele.text();\n\n        System.out.println(text);\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"3-6-对象的使用\"><a href=\"#3-6-对象的使用\" class=\"headerlink\" title=\"3.6 对象的使用\"></a>3.6 对象的使用</h4><p><strong>jsoup：工具类，可以解析html或xml文档，返回document对象</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 1.parse(File in,charsetName):解析xml或者html文件\n\tDocument document &#x3D; Jsoup.parse(new File(path), &quot;utf-8&quot;);\n\tSystem.out.println(document);\n\n&#x2F;&#x2F; 2.parse(String html);[基本不用，了解]\n\n&#x2F;&#x2F; 3.parse(URL url,int timeoutMillis):通过网络路径获取指定的html或者xml的文档对象.\n\tURL url &#x3D; new URL(&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;xml&#x2F;xml-parser.html&quot;);\n\tDocument document &#x3D; Jsoup.parse(url,10000);\n\tSystem.out.println(document);</code></pre>\n\n<p><strong>Document：文档对象，代表内存中的dom树（可以用来获取Element元素对象或Element元素集合对象）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 1.getElementById(String id):根据id值获取唯一的Element对象\nElement hh &#x3D; document.getElementById(&quot;hh&quot;);\nSystem.out.println(hh);\nSystem.out.println(&quot;--------------&quot;);\n\n&#x2F;&#x2F; 2.getElementsByTag(string TagName):根据标签名称，获取Element对象集合\nElements name &#x3D; document.getElementsByTag(&quot;name&quot;);\nSystem.out.println(name);\nSystem.out.println(&quot;--------------&quot;);\n\n&#x2F;&#x2F; 3.getElementsByAttribute(String key):根据属性名称获取元素对象集合\nElements name1 &#x3D; document.getElementsByAttribute(&quot;number&quot;);\nSystem.out.println(name1);\nSystem.out.println(&quot;--------------&quot;);\n\n&#x2F;&#x2F; 4.getElementsByAttribyteValue(String key,String value)：根据对应的属性名和属性值获取元素对象集合\nElements Value &#x3D; document.getElementsByAttributeValue(&quot;number&quot;, &quot;ID3&quot;);\nSystem.out.println(Value);\nSystem.out.println(&quot;--------------&quot;);</code></pre>\n\n<p><strong>Elements：元素对象集合，相当于ArrayList<Element></strong></p>\n<p><strong>Element：元素对象</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1.获取元素内容\n    * 就是上面document获取的Element元素\n    * 或者通过document获取的Element元素集合对象的 get(索引)方法，得到具体的元素值\n    \n2.获取属性对象\n\t* String attr(String key):根据属性名获取属性值\n    \n3.获取文本内容\n    * String text() 只获取文本内容\n\t* String html() 获取标签所有内容，包括标签和文本内容</code></pre>\n\n<p><strong>node：节点对象</strong></p>\n<p><strong>是Document和Element的父类，里面大多方法关于标签的查找，添加删除等（xml中不常用增删改查）</strong></p>\n<h4 id=\"3-7-快捷查询方式\"><a href=\"#3-7-快捷查询方式\" class=\"headerlink\" title=\"3.7 快捷查询方式\"></a>3.7 快捷查询方式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1. selector:选择器\n   * 使用的方法：Elements    select(String cssQuery)\n   cssQuery按照以前css选择器名字来做\n   * 语法：参考Selector类中定义的语法\n       \n2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言\n   * 使用Jsoup的Xpath需要额外导入jar包。\n   * 查询w3cshool参考手册，使用xpath的语法完成查询</code></pre>\n\n<h3 id=\"4-dom4j解析器\"><a href=\"#4-dom4j解析器\" class=\"headerlink\" title=\"4. dom4j解析器\"></a>4. dom4j解析器</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1. 导入jar包 dom4j.jar\n2. 创建解析器对象(SAXReader)\n3. 解析xml 获得Document对象\n4. 获取根节点RootElement\n5. 获取根节点下的子节点\n\n获取解析器 ----&gt; 获取document对象 ----&gt; 依步获取所需子元素\n    \n常用（common）API（那个对象里的方法，由哪个元素对象调用）\n *   -- SAXReader对象\n *      read():加载执行的xml文档\n *   -- Document对象\n *      getRootElement():获取根元素\n *   -- Element对象\n *      elements():获取指定名称的全部子元素，可以不指定名称\n *      elements （可以用 get(index)跟索引得到具体元素，或者用 字段.equals(元素.getName)）\n *      element():获取指定元素第一个子元素，可以不指定名称\n *      getName():获取当前元素的元素名\n *      attributeValue():获取指定属性名的属性值\n *      elementText():获得指定子元素名称的文本\n *      getText():获得当前元素的文本内容</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author Charon\n * @date 2020&#x2F;6&#x2F;18\n * 1.学习dom4j，了解使用步骤\n * 2.学会元素的选取\n * 3.常用（common）API（那个对象里的方法，由哪个元素对象调用）\n *   -- SAXReader对象\n *      read():加载执行的xml文档\n *   -- Document对象\n *      getRootElement():获取根元素\n *   -- Element对象\n *      elements():获取指定名称的全部子元素，可以不指定名称\n *      elements （可以用 get(index)跟索引得到具体元素，或者用 字段.equals(元素.getName)）\n *      element():获取指定元素第一个子元素，可以不指定名称\n *      getName():获取当前元素的元素名\n *      attributeValue():获取指定属性名的属性值\n *      elementText():获得指定子元素名称的文本\n *      getText():获得当前元素的文本内容\n **&#x2F;\npublic class test_01_dom4j &#123;\n\n    @Test\n    public void testReadXml() throws DocumentException &#123;\n\n        &#x2F;&#x2F;1.获取解析器\n        SAXReader saxReader&#x3D;new SAXReader();\n\n        &#x2F;&#x2F;2.获取document对象\n        String path &#x3D; test_01_dom4j.class.getClassLoader().getResource(&quot;Util.xml&quot;).getPath();\n        Document document &#x3D; saxReader.read(path);\n\n        &#x2F;&#x2F;3.获取根元素\n        Element rootElement &#x3D; document.getRootElement();\n        System.out.println(rootElement);&#x2F;&#x2F;org.dom4j.tree.DefaultElement@2d363fb3 [Element: &lt;students attributes: []&#x2F;&gt;]\n        System.out.println(rootElement.getName());&#x2F;&#x2F;students\n        System.out.println(&quot;--------------------------------------------------------&quot;);\n\n        &#x2F;&#x2F;3.1.获取根元素的子元素\n        List&lt;Element&gt; elements &#x3D; rootElement.elements();\n        for (Element ele : elements)&#123;\n            System.out.println(ele);\n            String name &#x3D; ele.getName();\n            System.out.println(name);\n        &#125;\n        System.out.println(&quot;--------------------------------------------------------&quot;);\n\n        &#x2F;&#x2F;3.2.获取根元素的第一个子元素\n        Element element &#x3D; rootElement.element(&quot;student&quot;);\n        System.out.println(element);\n        System.out.println(element.getName());\n        System.out.println(&quot;--------------------------------------------------------&quot;);\n\n        &#x2F;&#x2F;3.3.获得指定属性的属性值(属性是元素标签括号内的，别记混了)\n        String id &#x3D; element.attributeValue(&quot;id&quot;);\n        System.out.println(id);\n        String number &#x3D; elements.get(1).attributeValue(&quot;number&quot;);\n        System.out.println(number);\n        System.out.println(&quot;--------------------------------------------------------&quot;);\n\n        &#x2F;&#x2F;3.4.获取当前元素的文本值\n        String name &#x3D; element.element(&quot;name&quot;).getText();\n        System.out.println(name);\n        System.out.println(&quot;--------------------------------------------------------&quot;);\n\n        &#x2F;&#x2F;3.5.获取指定名称子元素的文本值\n        String ageText &#x3D; element.elementText(&quot;age&quot;);\n        System.out.println(ageText);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-重要\"><a href=\"#5-重要\" class=\"headerlink\" title=\"5. 重要\"></a>5. 重要</h3><p><strong>dom4j 可以与反射连用获取xml文件中的配置信息，然后调用其他实现类的功能</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">* 使用反射获取类的字节码文件，将其装载到jvm虚拟机中\n  A a &#x3D; (A)Class.forName(name).newInstance()；\n  等同于\n  A a &#x3D; new A();</code></pre>\n\n","text":"1. XML概述1.1 概念Extensible Markup Language 可扩展标记语言 可扩展：标签是自定义的 &lt;user&gt; &lt;学习&gt; 1.2 功能作为配置文件，存储数据 存储数据后也可以在网络中传输数据 1.3 XML与HTML的区别XML标签...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-XML%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. XML概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.1 概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1.2 功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-XML%E4%B8%8EHTML%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.3 XML与HTML的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2. 语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2.1 基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">2.2 快速入门</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">2.3 组成部分</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">2.4 约束</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">2.5 命名空间</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">3. 解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.1 概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E6%93%8D%E4%BD%9Cxml%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">3.2 操作xml文档</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E8%A7%A3%E6%9E%90xml%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%89%E4%B8%AD%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F%EF%BC%8C%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F%E6%98%AF%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F%EF%BC%8C%E8%A7%A3%E6%9E%90%E5%99%A8%E6%98%AF%E8%A7%A3%E6%9E%90%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">3.3 解析xml的方式（三中解析方式，解析方式是解析方式，解析器是解析器）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-xml%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">3.4 xml常见的解析器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-jsoup%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\"> 3.5 jsoup使用步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.6 对象的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.7 快捷查询方式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-dom4j%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">4. dom4j解析器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">5. 重要</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Servlet（上）","uid":"e273b80f255b91b744fcbcd9e45a6bf0","slug":"35-Servlet（上）","date":"2021-09-13T15:11:32.000Z","updated":"2021-09-15T10:27:04.368Z","comments":true,"path":"api/articles/35-Servlet（上）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. JavaEE概述1.1 什么是API？ 包括什么？* API：应用程序编程接口（这里所描述的接口不是interface） * API包括：源码，字节码，帮助文档（使用的时候要注意版本一致） 1.2 什么是JavaSE？* Java 标准版本 * SUN公司为程序员提供的一套...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Vue","uid":"5f258f833478a2a0e21ce42d19305683","slug":"32-Vue","date":"2021-09-13T15:09:32.000Z","updated":"2021-09-15T11:00:55.535Z","comments":true,"path":"api/articles/32-Vue.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":":beginner: ​Vue 基础要点① 什么是框架任何编程语言在最初的时候都是没有框架的，后来随着在实际开发过程中不断总结『经验』，积累『最佳实践』，慢慢的人们发现很多『特定场景』下的『特定问题』总是可以『套用固定解决方案』。 于是有人把成熟的『固定解决方案』收集起来，整合在...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}