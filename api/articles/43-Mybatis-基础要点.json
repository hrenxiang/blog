{"title":"Mybatis 基础要点","uid":"a439be0041fedf424a1ac2607c12651d","slug":"43-Mybatis-基础要点","date":"2021-09-13T15:20:32.000Z","updated":"2021-09-15T10:52:04.327Z","comments":true,"path":"api/articles/43-Mybatis-基础要点.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog9.jpg","content":"<h4 id=\"hatching-chick-回忆JDBC\"><a href=\"#hatching-chick-回忆JDBC\" class=\"headerlink\" title=\":hatching_chick: 回忆JDBC\"></a>:hatching_chick: 回忆JDBC</h4><h4 id=\"①-JDBC-编程步骤\"><a href=\"#①-JDBC-编程步骤\" class=\"headerlink\" title=\"① JDBC 编程步骤\"></a>① JDBC 编程步骤</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 加载驱动\t2. 获取连接 3. 获取数据库操作对象 4. 编写sql，赋值 5. 执行sql 6. 处理查询结果集 7. 释放资源</code></pre>\n\n<h4 id=\"②-遗留问题\"><a href=\"#②-遗留问题\" class=\"headerlink\" title=\"② 遗留问题\"></a>② 遗留问题</h4><p>1.数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p>\n<p>设想：使用数据库连接池管理数据库连接。</p>\n<p>2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，==不利于系统维护==。</p>\n<p>设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。</p>\n<p>3.向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。</p>\n<p>设想：将sql语句及占位符号和参数全部配置在xml中。</p>\n<p>4.从resultSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。</p>\n<p>设想：==将查询的结果集，自动映射成java对象==。</p>\n<h4 id=\"hatching-chick-总体技术\"><a href=\"#hatching-chick-总体技术\" class=\"headerlink\" title=\":hatching_chick: 总体技术\"></a>:hatching_chick: 总体技术</h4><h4 id=\"①-单一架构\"><a href=\"#①-单一架构\" class=\"headerlink\" title=\"① 单一架构\"></a>① 单一架构</h4><p>一个项目，一个工程，导出为一个war包，在一个Tomcat上运行。也叫all in one。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-all.in.one.png\" alt=\"./images\"></p>\n<h4 id=\"②-分布式架构\"><a href=\"#②-分布式架构\" class=\"headerlink\" title=\"② 分布式架构\"></a>② 分布式架构</h4><p>一个项目，拆分成很多个模块，每个模块是一个工程。每一个工程都是运行在自己的Tomcat上。模块之间可以互相调用。每一个模块内部可以看成是一个单一架构的应用。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-distributed.png\" alt=\"./images\"></p>\n<h4 id=\"hatching-chick-框架、MyBatis、ORM介绍\"><a href=\"#hatching-chick-框架、MyBatis、ORM介绍\" class=\"headerlink\" title=\":hatching_chick: 框架、MyBatis、ORM介绍\"></a>:hatching_chick: 框架、MyBatis、ORM介绍</h4><h4 id=\"①-框架\"><a href=\"#①-框架\" class=\"headerlink\" title=\"① 框架\"></a>① 框架</h4><ul>\n<li>什么是框架<ul>\n<li>框架（Framework）是<strong>整个或部分系统的可重用设计</strong>，表现为一组抽象构件及构件实例间交互的方法;</li>\n<li>另一种定义认为，框架是可被应用开发者定制的应用骨架。</li>\n<li>前者是从应用方面而后者是从目的方面给出的定义。</li>\n</ul>\n</li>\n<li>框架的优势<ul>\n<li>框架技术是一个应用程序的半成品，提供可重用的公共结构，按一定规则组织的一组组件，不用再考虑公共问题，专心在业务实现上结构统一，易于学习、维护新手也可写出好程序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"②-mybatis介绍\"><a href=\"#②-mybatis介绍\" class=\"headerlink\" title=\"② mybatis介绍\"></a>② mybatis介绍</h4><ul>\n<li><p>mybatis是一个持久层的框架，是apache下的顶级项目。</p>\n<p>mybatis托管到goolecode下，再后来托管到github下(<a href=\"https://github.com/mybatis/mybatis-3/releases)%E3%80%82\">https://github.com/mybatis/mybatis-3/releases)。</a></p>\n</li>\n<li><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL（可以优化sql）、存储过程以及高级映射，自由灵活生成（半自动化ORM框架，大部分需要程序员编写sql）满足需要sql语句。。</p>\n</li>\n<li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>\n</li>\n<li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。（向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射））</p>\n</li>\n<li><p><a href=\"https://mybatis.org/mybatis-3/zh/getting-started.html\">mybatis中文学习网址</a></p>\n</li>\n</ul>\n<h4 id=\"③-ORM介绍\"><a href=\"#③-ORM介绍\" class=\"headerlink\" title=\"③ ORM介绍\"></a>③ ORM介绍</h4><p>关于面向对象的Java语言、面向关系的数据库之间数据的转换必须要做，问题在于这个转换是否可以不由开发者来做。可以的。ORM框架就是专门来做这个问题的，相当于在面向对象语言和关系数据库之间搭建一个桥梁。</p>\n<p>即Object-Relationl Mapping，它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了 </p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-orm.png\" alt=\"image-20210708143926207\"></p>\n<h4 id=\"hatching-chick-持久化层技术的对比\"><a href=\"#hatching-chick-持久化层技术的对比\" class=\"headerlink\" title=\":hatching_chick: 持久化层技术的对比\"></a>:hatching_chick: 持久化层技术的对比</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">* JDBC\n    * SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\n    * 维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\n    * 代码冗长，开发效率低</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* Hibernate 和 JPA\n    * 操作简便，开发效率高\n    * 程序中的长难复杂 SQL 需要绕过框架\n    * 内部自动生产的 SQL，不容易做特殊优化\n    * 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。\n    * 反射操作太多，导致数据库性能下降</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* MyBatis\n    * 轻量级，性能出色\n    * SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\n    * 开发效率稍逊于HIbernate，但是完全能够接收</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么半自动化的<strong>Mybatis比自动化的Hibernate受欢迎</strong>?</p>\n<p> MyBatis需要手写SQL语句，所以工作量要大于Hibernate。但是由于自定义SQL语句，所以灵活性、可优化性就超过了Hibernate。</p>\n<p>Hibernate封装了SQL语句，由开发者对对象操作，Hibernate来生成SQL语句。虽然也可以通过映射配置来控制生成的SQL语句，但是对于要生成复杂的SQL语句，很难实现，或者实现后导致性能的丢失。</p>\n<p>MyBatis对存储过程可提供很好的支持。另外MyBatis的开发工作量大不意味着学习成本大。对于新手，学习Hibernate时间成本比Mybatis大很多，Mybatis很快就上手了。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* 应用场景\n\t* MyBatis具有封装少、映射多样化、支持存储过程、可以进行SQL语句优化等特点，符合互联网高并发、大数据、高性能、高响应的要求\n\n\t* 而对于对性能要求不高的比如内部管理系统、ERP等可以使用Hibernate。</code></pre>\n\n\n\n<h4 id=\"hatching-chick-mybatis的创建执行\"><a href=\"#hatching-chick-mybatis的创建执行\" class=\"headerlink\" title=\":hatching_chick: mybatis的创建执行\"></a>:hatching_chick: mybatis的创建执行</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">* 物理建模\t\t\t-----&gt; \t\t\t创建数据库\n* 逻辑建模\t\t\t-----&gt;\t\t\t创建maven项目，创建实体类\n* 搭建环境\t\t\t-----&gt; \t\t\t导入mybatis，mysql依赖，准备mybatis全局配置文件，mybatis映射配置文件\n* 测试代码\t\t\t-----&gt;\t\t\t导入junit依赖，进行相关测试</code></pre>\n\n<h4 id=\"①-创建实体类\"><a href=\"#①-创建实体类\" class=\"headerlink\" title=\"① 创建实体类\"></a>① 创建实体类</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">* 和数据库表t_emp对应的实体类\n* emp_id INT AUTO_INCREMENT\n* emp_name CHAR(100)\n* emp_salary DOUBLE(10,5)\n*\n* Java的实体类中，属性的类型不要使用基本数据类型，要使用包装类型。因为包装类型可以赋值为null，表示空，而基本数据类型不可以。</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>最好遵循驼峰命名法，数据库中使用   emp(前缀) _(下划线) id(后缀)，而实体类中用  empId</p></blockquote>\n<h4 id=\"②-全局配置文件\"><a href=\"#②-全局配置文件\" class=\"headerlink\" title=\"② 全局配置文件\"></a>② 全局配置文件</h4><pre class=\"line-numbers language-xml-dtd\" data-language=\"xml-dtd\"><code class=\"language-xml-dtd\">&lt;!--mybatis-config.xml--&gt;\n\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n\n    &lt;!--采用软编码，使用读取配置得方式引入数据库地址，用户名等，方便后期维护--&gt;\n    &lt;properties resource&#x3D;&quot;jdbc.properties&quot;&#x2F;&gt;\n\n    &lt;!-- 具体配置 --&gt;\n    &lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;\n    &lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;\n    &lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;\n    &lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;\n    &lt;settings&gt;\n        &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n    &lt;&#x2F;settings&gt;\n    \n    &lt;!--和spring整合后 environments配置将废除--&gt;\n    &lt;!--指定默认使用哪个环境，内部可以指定多个环境--&gt;\n    &lt;environments default&#x3D;&quot;development&quot;&gt;\n        &lt;!--environment 一个数据库的信息配置，环境--&gt;\n        &lt;environment id&#x3D;&quot;development&quot;&gt;\n            &lt;!--使用JDBC事务--&gt;\n            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;\n            &lt;!--数据库连接池--&gt;\n            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;\n                &lt;!--指定驱动，数据库地址，用户名，密码--&gt;\n                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;\n            &lt;&#x2F;dataSource&gt;\n        &lt;&#x2F;environment&gt;\n    &lt;&#x2F;environments&gt;\n    &lt;!--加载映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;!--Mapper注册：指定Mybatis映射文件的具体位置--&gt;\n        &lt;!--mapper标签：配置一个具体的Mapper映射文件--&gt;\n        &lt;!--resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径--&gt;\n        &lt;!--对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准--&gt;\n        &lt;mapper resource&#x3D;&quot;mappers&#x2F;EmployeeMapper.xml&quot;&#x2F;&gt;\n        &lt;mapper resource&#x3D;&quot;mappers&#x2F;EmployeeMapper2.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;mappers&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<h4 id=\"③-映射配置文件\"><a href=\"#③-映射配置文件\" class=\"headerlink\" title=\"③ 映射配置文件\"></a>③ 映射配置文件</h4><pre class=\"line-numbers language-xml-dtd\" data-language=\"xml-dtd\"><code class=\"language-xml-dtd\">&lt;!--EmployeeMapper.xml--&gt;\n\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n\n&lt;!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 --&gt;\n&lt;!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 --&gt;\n&lt;mapper namespace&#x3D;&quot;com.atguigu.mybatis.dao.EmployeeMapper&quot;&gt;\n\n    &lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;\n    &lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;\n    &lt;select id&#x3D;&quot;selectEmployee&quot; resultType&#x3D;&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;\n        &lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符，在#&#123;&#125;内部还是要声明一个见名知意的名称 --&gt;\n        select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id&#x3D;#&#123;empId&#125;\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：配置文件存放的位置是src/main/resources目录下。</p></blockquote>\n<p><strong>4.测试文件编写</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void testSelectEmployee() throws IOException &#123;\n    \n    &#x2F;&#x2F; 1.创建SqlSessionFactory对象\n    &#x2F;&#x2F; ①声明Mybatis全局配置文件的路径\n    String mybatisConfigFilePath &#x3D; &quot;mybatis-config.xml&quot;;\n    \n    &#x2F;&#x2F; ②以输入流的形式加载Mybatis配置文件\n    InputStream inputStream &#x3D; Resources.getResourceAsStream(mybatisConfigFilePath);\n    \n    &#x2F;&#x2F; ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象\n    SqlSessionFactory sessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);\n    \n    &#x2F;&#x2F; 2.使用SqlSessionFactory对象开启一个会话\n    SqlSession session &#x3D; sessionFactory.openSession();\n    \n    &#x2F;&#x2F; 3.根据Mapper配置文件的名称空间+SQL语句的id找到具体的SQL语句\n    &#x2F;&#x2F; 格式是：名称空间.SQL语句的id\n    String statement &#x3D; &quot;com.atguigu.mybatis.dao.EmployeeMapper.selectEmployee&quot;;\n    \n    &#x2F;&#x2F; 要传入SQL语句的参数\n    Integer empId &#x3D; 1;\n    \n    &#x2F;&#x2F; 执行SQL语句\n    Object result &#x3D; session.selectOne(statement, empId);\n    \n    System.out.println(&quot;o &#x3D; &quot; + result);\n    \n    &#x2F;&#x2F; 4.关闭SqlSession\n    session.close();\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>说明：</p>\n<ul>\n<li>SqlSession：代表Java程序和<strong>数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的会话）</li>\n<li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li>\n<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>==如果是修改删除操作，若没有调用 SqlSession 的 commit 的方法，数据是不会提交到数据库的==</li>\n</ul></blockquote>\n<h4 id=\"hatching-chick-mybatis执行过程\"><a href=\"#hatching-chick-mybatis执行过程\" class=\"headerlink\" title=\":hatching_chick: mybatis执行过程\"></a>:hatching_chick: mybatis执行过程</h4><h4 id=\"①-执行流程误区\"><a href=\"#①-执行流程误区\" class=\"headerlink\" title=\"① 执行流程误区\"></a>① 执行流程误区</h4><p>初始化xml配置文件时，就把数据封装到对象中了，都在Java代码中执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">刚开始接触框架，我们会认为Java程序会转入XML配置文件中执行，但其实框架会在初始化时将XML文件读取进来，封装到对象中，再然后就都是Java代码的执行了，XML中的配置是没法执行的。</code></pre>\n\n<h4 id=\"②-执行流程\"><a href=\"#②-执行流程\" class=\"headerlink\" title=\"② 执行流程\"></a>② 执行流程</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-execute.png\" alt=\"images\"></p>\n<h4 id=\"hatching-chick-日志\"><a href=\"#hatching-chick-日志\" class=\"headerlink\" title=\":hatching_chick: 日志\"></a>:hatching_chick: 日志</h4><h4 id=\"①-概述\"><a href=\"#①-概述\" class=\"headerlink\" title=\"① 概述\"></a>① 概述</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">日志就是记录程序的运行轨迹，方便查找关键信息，也方便快速定位解决问题。\n\n常用的日志框架：Log4j 、Slf4j 、Logback 。</code></pre>\n\n<h4 id=\"②-日志框架介绍\"><a href=\"#②-日志框架介绍\" class=\"headerlink\" title=\"② 日志框架介绍\"></a>② 日志框架介绍</h4><p>门面（相当于接口）：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JCL（Jakarta Commons Logging）</td>\n<td>陈旧</td>\n</tr>\n<tr>\n<td>SLF4J（Simple Logging Facade for Java）★</td>\n<td>适合</td>\n</tr>\n<tr>\n<td>jboss-logging</td>\n<td>特殊专业领域使用</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>log4j★</td>\n<td>最初版</td>\n</tr>\n<tr>\n<td>JUL（java.util.logging）</td>\n<td>JDK自带</td>\n</tr>\n<tr>\n<td>log4j2</td>\n<td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td>\n</tr>\n<tr>\n<td>logback★</td>\n<td>优雅、强大</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：标记★的技术是同一作者。</p></blockquote>\n<h4 id=\"③-log4j相关依赖\"><a href=\"#③-log4j相关依赖\" class=\"headerlink\" title=\"③ log4j相关依赖\"></a>③ log4j相关依赖</h4><pre class=\"line-numbers language-xml-dtd\" data-language=\"xml-dtd\"><code class=\"language-xml-dtd\">&lt;!-- log4j日志 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"④-配置文件\"><a href=\"#④-配置文件\" class=\"headerlink\" title=\"④ 配置文件\"></a>④ 配置文件</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>支持XML和properties属性文件两种形式。无论使用哪种形式，文件名是固定的  log4j.xml  /  log4j.properties</p>\n<p>在 maven项目的 <strong>main/resource/log4j.xml</strong></p>\n<p>STDOUT是standard output的缩写，意思是标准输出。对于Java程序来说，打印到标准输出就是打印到控制台</p></blockquote>\n<pre class=\"line-numbers language-xml-dtd\" data-language=\"xml-dtd\"><code class=\"language-xml-dtd\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;\n    \n&lt;log4j:configuration xmlns:log4j&#x3D;&quot;http:&#x2F;&#x2F;jakarta.apache.org&#x2F;log4j&#x2F;&quot;&gt;\n    \n    &lt;appender name&#x3D;&quot;STDOUT&quot; class&#x3D;&quot;org.apache.log4j.ConsoleAppender&quot;&gt;\n        &lt;param name&#x3D;&quot;Encoding&quot; value&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n        &lt;layout class&#x3D;&quot;org.apache.log4j.PatternLayout&quot;&gt;\n            &lt;param name&#x3D;&quot;ConversionPattern&quot; value&#x3D;&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \\n&quot; &#x2F;&gt;\n        &lt;&#x2F;layout&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;logger name&#x3D;&quot;java.sql&quot;&gt;\n        &lt;level value&#x3D;&quot;debug&quot; &#x2F;&gt;\n    &lt;&#x2F;logger&gt;\n    &lt;logger name&#x3D;&quot;org.apache.ibatis&quot;&gt;\n        &lt;level value&#x3D;&quot;info&quot; &#x2F;&gt;\n    &lt;&#x2F;logger&gt;\n    &lt;root&gt;\n        &lt;level value&#x3D;&quot;debug&quot; &#x2F;&gt;\n        &lt;appender-ref ref&#x3D;&quot;STDOUT&quot; &#x2F;&gt;\n    &lt;&#x2F;root&gt;\n&lt;&#x2F;log4j:configuration&gt;</code></pre>\n\n<h4 id=\"⑤-日志的级别\"><a href=\"#⑤-日志的级别\" class=\"headerlink\" title=\"⑤ 日志的级别\"></a>⑤ 日志的级别</h4><table>\n<thead>\n<tr>\n<th>日志级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OFF</td>\n<td>关闭：最高级别，不输出日志。</td>\n</tr>\n<tr>\n<td>FATAL</td>\n<td>致命：输出非常严重的可能会导致应用程序终止的错误。</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>错误：输出错误，但应用还能继续运行。</td>\n</tr>\n<tr>\n<td>WARN</td>\n<td>警告：输出可能潜在的危险状况。</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>信息：输出应用运行过程的详细信息。</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>调试：输出更细致的对调试应用有用的信息。</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>跟踪：输出更细致的程序运行轨迹。</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>所有：输出所有级别信息。</td>\n</tr>\n</tbody></table>\n<p>日志优先级别标准顺序为：ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</p>\n<h4 id=\"⑥-打印效果\"><a href=\"#⑥-打印效果\" class=\"headerlink\" title=\"⑥ 打印效果\"></a>⑥ 打印效果</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">DEBUG 05-24 18:51:13,331 &#x3D;&#x3D;&gt;  Preparing: select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id&#x3D;?  (BaseJdbcLogger.java:137) \nDEBUG 05-24 18:51:13,371 &#x3D;&#x3D;&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:137) \nDEBUG 05-24 18:51:13,391 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:137) \no &#x3D; Employee&#123;empId&#x3D;1, empName&#x3D;&#39;tom&#39;, empSalary&#x3D;200.33&#125;</code></pre>\n\n\n\n<h4 id=\"hatching-chick-和\"><a href=\"#hatching-chick-和\" class=\"headerlink\" title=\":hatching_chick: #{} 和 ${}\"></a>:hatching_chick: #{} 和 ${}</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">* 使用  #&#123; &#125; \n\n  底层使用的是PreparedStatement，使用占位符（MyBatis 会将 sql 中的&#96;#&#123;&#125;&#96;替换为?号，在 sql 执行前会使用 PreparedStatement 的参数设置方法，按序给 sql 的?号占位符设置参数值），安全性高，可以避免SQL注入。不需要进行SQL拼接\n\n* 使用  $&#123; &#125;\n\n  底层使用的Statement，使用的是字符串的拼接，容易出错，并且不安全，无法有效的避免SQL注入。一般不使用。\n  \n  是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于静态文本替换，比如\\$&#123;driver&#125;会被静态替换为&#96;com.mysql.jdbc.Driver&#96;。</code></pre>\n\n<pre class=\"line-numbers language-xml-dtd\" data-language=\"xml-dtd\"><code class=\"language-xml-dtd\">&lt;insert id&#x3D;&quot;insertEmployee&quot;&gt;\n    &lt;!-- 现在在这条SQL语句中，#&#123;&#125;中的表达式需要被用来从Emp emp实体类中获取emp_name的值、emp_salary的值 --&gt;\n    &lt;!-- 而我们从实体类中获取值通常都是调用getXxx()方法 --&gt;\n    &lt;!-- 而getXxx()方法、setXxx()方法定义了实体类的属性 --&gt;\n    &lt;!-- 定义属性的规则是：把get、set去掉，剩下部分首字母小写 --&gt;\n    &lt;!-- 所以我们在#&#123;&#125;中使用getXxx()方法、setXxx()方法定义的属性名即可 --&gt;\n    insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)\n&lt;&#x2F;insert&gt;</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-%7B%7D.png\" alt=\"image-20210708153411393\"></p>\n<p><strong>应用场景</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在SQL语句中，数据库表的表名不确定，需要外部动态传入，此时不能使用#&#123;&#125;，因为数据库不允许表名位置使用问号占位符，此时只能使用$&#123;&#125;。\n\n其他情况，只要能用#&#123;&#125;肯定不用$&#123;&#125;，避免SQL注入。</code></pre>\n\n\n\n<h4 id=\"hatching-chick-使用接口改进案例\"><a href=\"#hatching-chick-使用接口改进案例\" class=\"headerlink\" title=\":hatching_chick: 使用接口改进案例\"></a>:hatching_chick: 使用接口改进案例</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-mapper-interface.png\" alt=\"./images\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface EmployeeMapper &#123;\n    \n    Employee selectEmployee(Integer empId);\n        \n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<p><strong>方法名和SQL的id一致</strong><br><strong>方法返回值和resultType一致</strong><br><strong>方法的参数和SQL的参数一致</strong><br><strong>接口的全类名和映射配置文件的名称空间一致</strong></p>\n<p>由于Mapper接口中方法名是作为SQL语句标签的id，不能重复，所以<strong>Mapper接口中不能出现重名的方法</strong>，<strong>不允许重载</strong>！</p></blockquote>\n<h4 id=\"hatching-chick-数据输入\"><a href=\"#hatching-chick-数据输入\" class=\"headerlink\" title=\":hatching_chick: 数据输入\"></a>:hatching_chick: 数据输入</h4><h4 id=\"①-mybatis机制\"><a href=\"#①-mybatis机制\" class=\"headerlink\" title=\"① mybatis机制\"></a>① mybatis机制</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">sql语句 + 参数   -----&gt;    mybatis处理   -------&gt;    读写数据库或返回相关参数</code></pre>\n\n<h4 id=\"②-输入的概念\"><a href=\"#②-输入的概念\" class=\"headerlink\" title=\"② 输入的概念\"></a>② 输入的概念</h4><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* 简单类型： 只包含一个值的类型\n    * 基本数据类型\n    * 基本包装类型\n    * 字符串类型\n* 复杂类型： 包含多个值的数据类型\n    * 实体类型\n    * 集合类型\n    * 数组类型\n    * 复合类型 List&lt;User&gt; 集合中是实体</code></pre>\n\n<h4 id=\"③-单个参数类型\"><a href=\"#③-单个参数类型\" class=\"headerlink\" title=\"③ 单个参数类型\"></a>③ 单个参数类型</h4><p><strong>1.接口</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Employee selectEmployee(Integer empId);  </code></pre>\n\n<p><strong>2.sql</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;select id&#x3D;&quot;selectEmployee&quot; resultType&#x3D;&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;\n    select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id&#x3D;#&#123;empId&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h4 id=\"④-实体参数类型\"><a href=\"#④-实体参数类型\" class=\"headerlink\" title=\"④ 实体参数类型\"></a>④ 实体参数类型</h4><p><strong>1.接口</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int insertEmployee(Employee employee);</code></pre>\n\n<p><strong>2.sql</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;insert id&#x3D;&quot;insertEmployee&quot;&gt;\n    insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)\n&lt;&#x2F;insert&gt;</code></pre>\n\n<p><strong>3.结论</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Mybatis会根据#&#123;&#125;中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#&#123;&#125;这个位置。</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-entity.png\" alt=\"images\"></p>\n<h4 id=\"⑤-零散简单数据类型\"><a href=\"#⑤-零散简单数据类型\" class=\"headerlink\" title=\"⑤ 零散简单数据类型\"></a>⑤ 零散简单数据类型</h4><p><strong>1.接口</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int updateEmployee(@Param(&quot;empId&quot;) Integer empId,@Param(&quot;empSalary&quot;) Double empSalary);</code></pre>\n\n<p><strong>2.sql</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;update id&#x3D;&quot;updateEmployee&quot;&gt;\n    update t_emp set emp_salary&#x3D;#&#123;empSalary&#125; where emp_id&#x3D;#&#123;empId&#125;\n&lt;&#x2F;update&gt;</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-@Param.png\" alt=\"images\"></p>\n<h4 id=\"⑥-Map参数类型\"><a href=\"#⑥-Map参数类型\" class=\"headerlink\" title=\"⑥ Map参数类型\"></a>⑥ Map参数类型</h4><p><strong>1.接口</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int updateEmployeeByMap(Map&lt;String, Object&gt; paramMap);</code></pre>\n\n<p><strong>2.sql</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;update id&#x3D;&quot;updateEmployeeByMap&quot;&gt;\n     update t_emp set emp_salary&#x3D;#&#123;empSalaryKey&#125; where emp_id&#x3D;#&#123;empIdKey&#125;\n&lt;&#x2F;update&gt;</code></pre>\n\n<p><strong>3.测试代码</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void testUpdateEmpNameByMap() &#123;\n    \n    EmployeeMapper mapper &#x3D; session.getMapper(EmployeeMapper.class);\n    \n    Map&lt;String, Object&gt; paramMap &#x3D; new HashMap&lt;&gt;();\n    \n    paramMap.put(&quot;empSalaryKey&quot;, 999.99);\n    paramMap.put(&quot;empIdKey&quot;, 5);\n    \n    int result &#x3D; mapper.updateEmployeeByMap(paramMap);\n    \n    System.out.println(&quot;result &#x3D; &quot; + result);\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>#{}中写Map中的key</p>\n<p>有很多零散的参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了。所以都封装到Map中。</p></blockquote>\n<h4 id=\"hatching-chick-数据输出\"><a href=\"#hatching-chick-数据输出\" class=\"headerlink\" title=\":hatching_chick: 数据输出\"></a>:hatching_chick: 数据输出</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">返回单个简单类型数据\n\n返回实体类对象\n通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。\n\n返回Map类型\n适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。\n\n返回List类型\n查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-resultType-map.png\" alt=\"image-20210708155728257\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mybatis-resultType-map2.png\" alt=\"image-20210708155927048\"></p>\n<h4 id=\"hatching-chick-返回自增主键\"><a href=\"#hatching-chick-返回自增主键\" class=\"headerlink\" title=\":hatching_chick: 返回自增主键\"></a>:hatching_chick: 返回自增主键</h4><p><strong>1.接口</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int insertEmployee(Employee employee);</code></pre>\n\n<p><strong>2.sql</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- int insertEmployee(Employee employee); --&gt;\n&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;\n&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;\n&lt;insert id&#x3D;&quot;insertEmployee&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;empId&quot;&gt;\n    insert into t_emp(emp_name,emp_salary)\n    values(#&#123;empName&#125;,#&#123;empSalary&#125;)\n&lt;&#x2F;insert&gt;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在 mapper 接口中入参时使用了 @Param 注解\n\n当使用了 @Param 注解后，想把 insert 插入操作成功后的自增 id 返回出来，需要在\n\nkeyProperty 设置值时，添加 @Param(&quot;xxx&quot;) 括号中定义的别名  比如别名是emp，这keyProperty&#x3D;&quot;emp.empId&quot;;</code></pre>\n\n<p><strong>3.注意</strong></p>\n<p>Mybatis是将自增主键的值设置到实体类对象中，而<strong>不是以Mapper接口方法返回值</strong>的形式返回。</p>\n<p>而对于不支持自增型主键的数据库（例如 Oracle），则可以使用 selectKey 子元素：selectKey  元素将会首先运行，id  会被设置，然后插入语句会被调用</p>\n<h4 id=\"hatching-chick-表字段和实体属性\"><a href=\"#hatching-chick-表字段和实体属性\" class=\"headerlink\" title=\":hatching_chick: 表字段和实体属性\"></a>:hatching_chick: 表字段和实体属性</h4><p><strong>1.别名</strong></p>\n<p>将字段的别名设置成和实体类属性一致。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;\n&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;\n&lt;select id&#x3D;&quot;selectEmployee&quot; resultType&#x3D;&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;\n    &lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;\n    &lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;\n    select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id&#x3D;#&#123;maomi&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于实体类属性的约定：</p>\n<p>getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。</p></blockquote>\n<p><strong>2.全局配置自动识别驼峰式命名规则</strong></p>\n<p>在Mybatis全局配置文件加入如下配置</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;\n&lt;settings&gt;\n    &lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;\n    &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n&lt;&#x2F;settings&gt;</code></pre>\n\n<p>SQL语句中可以不使用别名</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- Employee selectEmployee(Integer empId); --&gt;\n&lt;select id&#x3D;&quot;selectEmployee&quot; resultType&#x3D;&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;\n    select emp_id,emp_name,emp_salary from t_emp where emp_id&#x3D;#&#123;empId&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<p><strong>3.使用resultMap</strong></p>\n<p>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;\n&lt;resultMap id&#x3D;&quot;selectEmployeeByRMResultMap&quot; type&#x3D;&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;\n    \n    &lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;\n    &lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;\n    &lt;id column&#x3D;&quot;emp_id&quot; property&#x3D;&quot;empId&quot;&#x2F;&gt;\n    \n    &lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;\n    &lt;result column&#x3D;&quot;emp_name&quot; property&#x3D;&quot;empName&quot;&#x2F;&gt;\n    &lt;result column&#x3D;&quot;emp_salary&quot; property&#x3D;&quot;empSalary&quot;&#x2F;&gt;\n&lt;&#x2F;resultMap&gt;\n    \n&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;\n&lt;select id&#x3D;&quot;selectEmployeeByRM&quot; resultMap&#x3D;&quot;selectEmployeeByRMResultMap&quot;&gt;\n    select emp_id,emp_name,emp_salary from t_emp where emp_id&#x3D;#&#123;empId&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n\n\n<h4 id=\"hatching-chick-相关标签\"><a href=\"#hatching-chick-相关标签\" class=\"headerlink\" title=\":hatching_chick: 相关标签\"></a>:hatching_chick: 相关标签</h4><h4 id=\"①-properties\"><a href=\"#①-properties\" class=\"headerlink\" title=\"① properties\"></a>① properties</h4><p>在Mybatis全局配置文件中指定外部jdbc.properties文件的位置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;properties resource&#x3D;&quot;jdbc.properties&quot;&#x2F;&gt;\n\n而mybatis中用 $&#123;driver&#125;,$&#123;username&#125;等进行引用</code></pre>\n\n<h4 id=\"②-Mapper\"><a href=\"#②-Mapper\" class=\"headerlink\" title=\"② Mapper\"></a>② Mapper</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Mybatis真正的核心在映射文件中，比直接使用jdbc节省了许多代码，而且将sql代码独立在java代码之外，可以惊醒更加细致的sql优化</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Mapper映射文件中的顶级元素\n1. select 映射查询语句\n2. insert 插入\n3. update 更新\n4. delete 删除\n5. sql 可以重用的书签栏代码块\n6. resultMap （不是select标签内的那个）最复杂，最有力量的元素，用来面熟如何从数据库结果集中加载你的对象\n7. cache 配置给定命名空间的缓存\n8. cache-ref 从其他命名空间引用缓存配置 </code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Mapper文件中的 &lt;mapper&gt;标签属性信息\n\nnamespace：namespace是一个命名空间，一个命名空间对应着一个dao接口（唯一值）\n\n\t\t  要求使用 dao接口的 全限定名称，也就是全类名</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Mapper文件中的 select标签内的属性信息\n\n必须配置：\n\n\tid: id是命名空间的唯一标识符，可以用来代替这条sql语句\n\t\t\n\t\t这个id也应该对应着所属命名空间间对应的道接口中的某个方法\n\t\t\n\t\tsql语句相当于方法的实现，因此，id应该与方法名一致\n\n可选配置：\n\n\tresultType：用来指定返回类型，指定类型可以是基本类型，也可以是java容器，也可以是javaBean\n\t\n\t            resultType 与 resultMap 二选一配置\n\t            \n\tresultMap：用于引用我们通过 resultMap标签定义的映射类型，这也是 mybatis组件的高级复杂映射关键\n\t\n\tparameterType：主要指定将要传入语句的参数的类型，可以是int，sort，long等，也可以是java对象\n\t\n\tstatementType：STATEMENT, PREPARED或CALLABLE的一种，默认值：PREPARED\n\t\n\t\t\t\t  这会让MyBatis使用选择Statement, PrearedStatement或CallableStatement，</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Mapper文件中的 resultMap标签属性信息\n\n1. type 对应的返回类型，可以是javabean, 也可以是其它\n\n2. id 必须唯一， 用于标示这个resultMap的唯一性，在使用resultMap的时候，就是通过id引用\n\n3. extends 继承其他resultMap标签</code></pre>\n\n<h4 id=\"③-sql\"><a href=\"#③-sql\" class=\"headerlink\" title=\"③ sql\"></a>③ sql</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">Mapper文件中的 sql标签（重用sql代码块）\n\n例：&lt;sql id&#x3D;&quot;userColumns&quot;&gt;id,username,password&lt;&#x2F;sql&gt;\n\n   &lt;select id&#x3D;&quot;selectList&quot; paramertType&#x3D;&quot;int&quot; resultType&#x3D;&quot;hashmap&quot;&gt;\n　\t　SELECT \n    \t　　&lt;include refid&#x3D;&quot;userColumns&quot;&#x2F;&gt;\n　　\t FROM \n    \t　　user\n   &lt;&#x2F;select&gt;</code></pre>\n\n<h4 id=\"④-typeAliases\"><a href=\"#④-typeAliases\" class=\"headerlink\" title=\"④ typeAliases\"></a>④ typeAliases</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">完全限定名使用别名替代\n\n在 mybatis 配置文件中，如下配置\n\n&lt;typeAliases&gt;\n\t&lt;!--这里是导入一个实体类，而package是导入包下所有的--&gt;\n    &lt;typeAlias type&#x3D;&quot;com.charon.dao.StudentDao&quot; alias&#x3D;&quot;StudentDao&quot;&#x2F;&gt;\n    \n    &lt;!-- 声明了实体类所在的包之后，在Mapper配置文件中，只需要指定这个包下的实体类名首字母小写即可 --&gt;\n    &lt;package name&#x3D;&quot;com.atguigu.mybatis.entity&quot;&#x2F;&gt;\n&lt;&#x2F;typeAliases&gt;</code></pre>\n\n<h4 id=\"⑤-mappers\"><a href=\"#⑤-mappers\" class=\"headerlink\" title=\"⑤ mappers\"></a>⑤ mappers</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">mybatis 的 mappers标签中 mapper映射器引入映射文件\n\nmybatis的主配置文件中需要引入映射文件，有四种方法（后两种很少用）\n\n1、 &lt;mapper resource&#x3D;&quot; &quot; &#x2F;&gt;\n    使用相对于类路径的资源\n    \n2、&lt;mapper class&#x3D;&quot; &quot; &#x2F;&gt;\n   使用mapper接口类路径\n   如：&lt;mapper class&#x3D;&quot;com.iss.mybatis.mapper.UserMapper&quot;&#x2F;&gt;\n   注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</code></pre>\n\n<p>Mybatis允许在指定Mapper映射文件时，只指定其所在的包：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mappers&gt;\n        &lt;package name&#x3D;&quot;com.atguigu.mybatis.dao&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n\n\n<p>此时这个包下的所有Mapper配置文件将被自动加载、注册，比较方便。</p>\n<p>但是，要求是：</p>\n<p>Mapper接口和Mapper配置文件名称一致<br>==Mapper配置文件放在Mapper接口所在的包内==</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/mappers.png\" alt=\"images\"></p>\n","text":":hatching_chick: 回忆JDBC① JDBC 编程步骤1. 加载驱动 2. 获取连接 3. 获取数据库操作对象 4. 编写sql，赋值 5. 执行sql 6. 处理查询结果集 7. 释放资源 ② 遗留问题1.数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E5%9B%9E%E5%BF%86JDBC\"><span class=\"toc-text\">:hatching_chick: 回忆JDBC</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-JDBC-%E7%BC%96%E7%A8%8B%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">① JDBC 编程步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">② 遗留问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%80%BB%E4%BD%93%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">:hatching_chick: 总体技术</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%8D%95%E4%B8%80%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">① 单一架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">② 分布式架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%A1%86%E6%9E%B6%E3%80%81MyBatis%E3%80%81ORM%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">:hatching_chick: 框架、MyBatis、ORM介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">① 框架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-mybatis%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">② mybatis介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-ORM%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">③ ORM介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%8C%81%E4%B9%85%E5%8C%96%E5%B1%82%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">:hatching_chick: 持久化层技术的对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-mybatis%E7%9A%84%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">:hatching_chick: mybatis的创建执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">① 创建实体类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">② 全局配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%98%A0%E5%B0%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">③ 映射配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-mybatis%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">:hatching_chick: mybatis执行过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%AF%E5%8C%BA\"><span class=\"toc-text\">① 执行流程误区</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">② 执行流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">:hatching_chick: 日志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">① 概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">② 日志框架介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-log4j%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">③ log4j相关依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">④ 配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E6%97%A5%E5%BF%97%E7%9A%84%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">⑤ 日志的级别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E6%89%93%E5%8D%B0%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">⑥ 打印效果</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E5%92%8C\"><span class=\"toc-text\">:hatching_chick: #{} 和 ${}</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%94%B9%E8%BF%9B%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">:hatching_chick: 使用接口改进案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">:hatching_chick: 数据输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-mybatis%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">① mybatis机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E8%BE%93%E5%85%A5%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">② 输入的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%8D%95%E4%B8%AA%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">③ 单个参数类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%AE%9E%E4%BD%93%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">④ 实体参数类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E9%9B%B6%E6%95%A3%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">⑤ 零散简单数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-Map%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">⑥ Map参数类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">:hatching_chick: 数据输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E8%BF%94%E5%9B%9E%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE\"><span class=\"toc-text\">:hatching_chick: 返回自增主键</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E8%A1%A8%E5%AD%97%E6%AE%B5%E5%92%8C%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">:hatching_chick: 表字段和实体属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hatching-chick-%E7%9B%B8%E5%85%B3%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">:hatching_chick: 相关标签</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-properties\"><span class=\"toc-text\">① properties</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-Mapper\"><span class=\"toc-text\">② Mapper</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-sql\"><span class=\"toc-text\">③ sql</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-typeAliases\"><span class=\"toc-text\">④ typeAliases</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-mappers\"><span class=\"toc-text\">⑤ mappers</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Mybatis 动态SQL","uid":"650dc14f73504516668e17ca7e793b09","slug":"44-Mybatis-动态SQL","date":"2021-09-13T15:21:32.000Z","updated":"2021-09-15T10:51:57.620Z","comments":true,"path":"api/articles/44-Mybatis-动态SQL.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"1. 什么是动态SQL动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/categories/Mybatis.json"}],"tags":[{"name":"Mybatis","slug":"Mybatis","count":6,"path":"api/tags/Mybatis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Redis","uid":"a978a5e93d8e6628e9f4ee713be55be8","slug":"42-Redis","date":"2021-09-13T15:19:32.000Z","updated":"2021-09-15T10:52:16.306Z","comments":true,"path":"api/articles/42-Redis.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. NoSQL数据库1.1 技术发展技术的分类 1、解决功能性的问题：Java、JSP、RDBMS、Tomcat、HTML、Linux、JDBC、SVN 2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis 3、解决性能的问题...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"Redis","slug":"Redis","count":1,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}