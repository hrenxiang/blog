{"title":"Maven","uid":"6f4f974e39a23a6637b9ccfa82544a76","slug":"40_Maven","date":"2021-09-13T15:16:32.000Z","updated":"2021-09-15T10:53:25.585Z","comments":true,"path":"api/articles/40_Maven.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog9.jpg","content":"<h3 id=\"1-Maven简介\"><a href=\"#1-Maven简介\" class=\"headerlink\" title=\"1. Maven简介\"></a>1. Maven简介</h3><h4 id=\"1-1-完成一个java项目\"><a href=\"#1-1-完成一个java项目\" class=\"headerlink\" title=\"1.1 完成一个java项目\"></a>1.1 完成一个java项目</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 分析项目要做什么，知道项目有哪些组成部分\n\n2. 设计项目（步骤，技术，多少人，多长时间）\n\n3. 组建团队，招人，购置设备，服务器，软件，笔记本\n\n4. 开发人员写代码，测试代码，重复多次工作\n\n5. 测试人员，测试项目功能  ------  测试如有问题，开发人员修改  ------  再提交给测试人员  ------  再次测试，直到没有问题</code></pre>\n\n<h4 id=\"1-2-传统开发问题\"><a href=\"#1-2-传统开发问题\" class=\"headerlink\" title=\"1.2 传统开发问题\"></a>1.2 传统开发问题</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">项目的构建过程复杂繁琐\n    1. 将项目分为多个模块\n\n    2. 实现分布式部署\n\njar包的依赖管理复杂繁琐\n    3. 需要很多第三方功能,需手工获取（很多的jar文件，需要手工从网络中获取各个jar文件）\n\n    4. 需要管理jar的版本，因为版本之间要进行适配\n\n    5. 管理jar文件间的依赖（a.jar 需要 b.jar 中的类（这个关系叫做依赖），那么需要先获取b.jar然后才能使用a.jar）\n\n    6. 处理jar包间的冲突，当有多个jar时，到底使用哪一个</code></pre>\n\n<h4 id=\"1-3-Maven进行管理改进\"><a href=\"#1-3-Maven进行管理改进\" class=\"headerlink\" title=\"1.3 Maven进行管理改进\"></a>1.3 Maven进行管理改进</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">maven能够完成的任务</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. maven可以 【管理 jar文件】\n\n2. 自动 【下载 jar和他的文档，源代码】\n\n3. 管理 【jar文件间的依赖】（如果a.jar 需要 b.jar，会直接 自动下载 b.jar）\n\n4. 管理 【jar文件间的版本】\n\n5. 【编译程序】，把java文件编译为class文件\n\n6. 帮助我们 【测试代码是否正确】\n\n7. 帮我们 【打包文件】，形成 jar文件 或者 war文件\n\n8. 帮我们 【部署项目】</code></pre>\n\n<h4 id=\"1-4-Maven-中项目的构建\"><a href=\"#1-4-Maven-中项目的构建\" class=\"headerlink\" title=\"1.4 Maven 中项目的构建\"></a>1.4 Maven 中项目的构建</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">maven的七个构建过程</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">构建是面向过程的（就是一些步骤），完成项目的编译，测试，运行，打包，部署等等\n\nmaven的【构建过程】有：\n\n1. 清理，把之前项目编译的东西删除，为新的编译代码做准备\n\n2. 编译：把程序源代码编译为执行代码，java --- class文件\n\n   批量的：maven 可以同时把成千上百的文件编译为class，而 javac一次只编译一个文件\n\n3. 测试：maven可以执行测试程序代码，验证功能是否正确\n\n   测试也是批量的，可以同时执行多个测试代码，同时测试很多功能\n\n4. 报告：生成测试结果文件\n\n5. 打包：把项目文件中的所有class文件，配置文件等所有资源放到一个压缩文件中\n\n   这个压缩文件就是 项目的结果文件，通常Java程序，压缩文件是jar扩展名结尾的Web应用，是以 war文件名结尾的\n\n6. 安装：把 5中生成的文件 jar，war安装到本机仓库\n\n7. 部署：把程序安装好可以执行。</code></pre>\n\n<h4 id=\"1-5-Maven的核心概念\"><a href=\"#1-5-Maven的核心概念\" class=\"headerlink\" title=\"1.5 Maven的核心概念\"></a>1.5 <font color=\"ff6473\">Maven的核心概念</font></h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Maven的 九个核心概念：<font color=\"ff6473\">pom，约定的目录结构，坐标，依赖管理，仓库管理，生命周期，插件和命令，继承，聚合</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. POM\n   指的是 pom.xml 文件，pom翻译过来叫做 项目对象模型\t\n\t    \n   Maven把一个项目当做一个模型使用，控制maven构建项目的过程，管理jar依赖\n\n2. 约定的目录结构\n\n   maven 项目的目录和文件位置都是规定的\n\n3. 坐标\n\n   是一个唯一字符串，用来表示资源\n   \n4. 依赖管理\n\n   管理项目可以使用的jar文件\n\n5. 仓库管理（了解）\n\n   资源存放的位置\n\n6. 生命周期（了解）\n\n   maven工具构建项目的过程，就叫生命周期 \n\n7. 插件和命令（了解）\n\n   执行maven构建的时候使用的工具是插件\n\n8. 继承\n\n9. 聚合</code></pre>\n\n\n\n<h3 id=\"2-Maven的核心概念\"><a href=\"#2-Maven的核心概念\" class=\"headerlink\" title=\"2. Maven的核心概念\"></a>2. Maven的核心概念</h3><h4 id=\"2-1-约定的目录结构\"><a href=\"#2-1-约定的目录结构\" class=\"headerlink\" title=\"2.1 约定的目录结构\"></a>2.1 约定的目录结构</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">约定就是大家需要共同遵守的规则</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 约定指的是大家需要遵循的一个规则\n\n2. 每一个Maven项目在磁盘中都是一个文件夹（例如：我的项目Hellow）\n   Hello&#x2F;\n     ---&#x2F;src\n     \n     ------&#x2F;main           #放你主程序java代码和配置文件\n     ----------&#x2F;java       #你的程序包和包中的java文件\n     ----------&#x2F;resources  #你的java程序中要使用的配置文件\t\n     \n     ------&#x2F;test  #放测试程序代码和文件的（可以没有）\n     ----------&#x2F;java       #测试程序包和包中的java文件\n     ---------&#x2F;resources  #测试java程序中要使用的配置文件\n     \n     ---&#x2F;pom.xml  #maven的核心文件（maven项目必须有）</code></pre>\n\n<h4 id=\"2-2-compile-第一次编译\"><a href=\"#2-2-compile-第一次编译\" class=\"headerlink\" title=\"2.2 compile 第一次编译\"></a>2.2 compile 第一次编译</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">默认本机仓库、中央仓库的地址，执行编译命令后项目编译后的文件存储在  target  目录中</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 第一次执行为什么要下载？\n\n   maven工具执行的时候，需要很多插件，jar文件完成\n\n2. 下载了什么东西？\n\n   当然是jar文件。\n\n3. 下载的东西存放在哪了？\n\n   默认的本机仓库：C:\\Users\\（登录操作系统的用户名）Administrator\\.m2\\repository\n\n4. 从哪下载插件 - jar文件\n\n   中央仓库的地址： https:&#x2F;&#x2F;repo.maven.apache.org \n\n5. 执行完mvn compile后\n\n   结果是在项目的根目录下生成 target目录（结果目录）\n\n   编译好的java程序，最后的class文件都在target目录中</code></pre>\n\n<h4 id=\"2-3-仓库\"><a href=\"#2-3-仓库\" class=\"headerlink\" title=\"2.3 仓库\"></a>2.3 仓库</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">仓库的概念，分类，使用  |  修改本地仓库的位置</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1. 仓库是什么：存放东西的地方，存放maven使用的 jar文件和我们项目中使用的 jar文件\n\n   ​\t\t\t\t\t  maven使用的插件（各种jar）\n\n   ​\t\t\t\t\t  我们项目使用的jar（第三方工具）\n\n2. 仓库的分类\n\n   本地仓库：个人计算机上的文件夹\n\n   远程仓库：在互联网上，使用网络才能使用的仓库\n\n   ​\t    1.中央仓库：最权威的， 所有的开发人员共享使用的仓库， https:&#x2F;&#x2F;repo.maven.apache.org\n\n   ​\t\t2.中央仓库的镜像：http:&#x2F;&#x2F;maven.aliyun.com\n\n   ​\t\t3.私服：在公司内部，在局域网中使用的， 不是对外使用的。\n\n3. 仓库的使用：maven仓库的使用不需要人为参与\n\n   开发人员使用某个驱动 ---&gt; maven首先检查本地仓库 ---&gt; 私服 ---&gt; 镜像 ---&gt; 中央仓库\n   \n4. 修改本地仓库位置\n\n   1. 修改maven的配置文件， maven安装目录&#x2F;conf&#x2F;settings.xml，先备份 settings.xml\n   \n   2. 修改 &lt;localRepository&gt;  指定你的目录（不要使用中文目录）</code></pre>\n\n<h4 id=\"2-4-POM\"><a href=\"#2-4-POM\" class=\"headerlink\" title=\"2.4  POM\"></a>2.4 <font color=\"ff6473\"> POM</font></h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">坐标（gav），依赖（dependency），属性（properties）</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">1. pom释义为 Project Object Model 项目对象模型，是一个pom.xml文件\n\n2. 坐标（gav）\n\n   唯一值，在互联网中唯一标识一个项目的\n   \n   &lt;groupId&gt;公司域名的倒写&lt;&#x2F;groupId&gt;\n   &lt;artifactId&gt;自定义项目名称&lt;&#x2F;artifactId&gt;\n   &lt;version&gt;自定版本号&lt;&#x2F;version&gt;\n\n   groupId、artifactId、version生成了一个Maven项目的基本坐标，在众多的maven项目中可以唯一定位到某一个项目。坐标也决定着将来项目在仓库中的路径及名称。\n\n3. 依赖（dependency）\n\n   dependencies 和dependency ，相当于是 java代码中import\n\n   你的项目中要使用的各种资源说明， 比我的项目要使用mysql驱动\n   \n   &lt;dependencies&gt;\n   \t&lt;!--依赖  java代码中 import --&gt;\n   \t&lt;dependency&gt;\n           &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n           &lt;version&gt;5.1.9&lt;&#x2F;version&gt;\n       &lt;&#x2F;dependency&gt;\n   &lt;&#x2F;dependencies&gt;\n\n4. packaging：打包后压缩文件扩展名，默认是jar，web是war（默认是jar 可以不写）\n\n5. properties：设置属性\n   &lt;properties&gt;\n     &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt; 源码编译 jdk 版本\n     &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt; 运行代码的 jdk 版本\n     &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;项目构建用的编码，避免中文乱码\n     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt; 生成报告的编码\n   &lt;&#x2F;properties&gt; \n\n6. build：maven在进行项目构建时，配置信息，例如指定编译 java代码使用的 jdk版本等</code></pre>\n\n<h4 id=\"2-5-生命周期，命令及插件\"><a href=\"#2-5-生命周期，命令及插件\" class=\"headerlink\" title=\"2.5 生命周期，命令及插件\"></a>2.5 生命周期，命令及插件</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">生命周期，命令及插件的概念  |  常用的 maven命令</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. maven的 生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署\n\n2. maven的 命令：maven独立使用，通过命令，完成maven的生命周期的执行。\n\n           \t    maven可以使用命令，完成项目的清理，编译，测试等等 \n\n3. maven的 插件： maven命令执行时，真正完成功能的是插件，插件就是一些jar文件， 一些类</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 常用命令：\n\n    mvn -version         查看maven的版本及配置信息\n\n    mvn archetype:generate  \t创建你的maven项目\n\n    mvn archetype:create  -DgroupId&#x3D;   DartifactId&#x3D;   构建java项目\n\n    mvn archetype:create  -DgroupId&#x3D;   DartifactId&#x3D;   -DarchetypeArtifactId&#x3D;maven-archetype-webapp 创建web项目\n\n    mvn clean           清除编译产生的target文件夹内容，可以配合相应命令一起使用，如mvn clean package， mvn clean test\n\n    mvn compile         编译项目代码\n\n    mvn test            运行单元测试\n\n    mvn package        打包项目\n\n    mvn package -Dmaven.test.skip&#x3D;true  打包项目时跳过单元测试\n\n    mvn install          打包后将其安装在本地仓库\n\n    mvn deploy          打包后将其安装到pom文件中配置的远程仓库\n\n2. 补充命令：\n\n    mvn jar:jar  \t只打jar包\n\n    mvn -e       显示详细错误 信息.\n    mvn validate    验证工程是否正确，所有需要的资源是否可用\n\n    mvn idea:idea \t生成idea项目\n\n    mvn eclipse:eclipse    将maven生成eclipse项目结构\n\n    mvn eclipse:clean     清除maven项目中eclipse的项目结构\n\n    mvn site            生成站点目录\n\n    mvn dependency:list    显示所有已经解析的所有依赖\n\n    mvn dependency:tree   以树的结构展示项目中的依赖\n\n    mvn dependency:analyze  对项目中的依赖进行分析，依赖未使用，使用单未引入\n\n    mvn tomcat:run        启动tomcat</code></pre>\n\n<h3 id=\"3-Maven-中的依赖范围\"><a href=\"#3-Maven-中的依赖范围\" class=\"headerlink\" title=\"3. Maven 中的依赖范围\"></a>3. Maven 中的依赖范围</h3><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">依赖范围的含义，compile、test、provide表示的范围</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 依赖范围：表示依赖的作用范围，也就是maven在构建项目时，这些依赖在哪些阶段起作用。\n\n2. 范围标签使用scope表示，scope的值有 compile，test，provide，默认采用的是compile\n\n3. compile表示依赖中使用的jar包也会随着编译打包等操作，保存到文件中。test表示依赖只会在测试阶段参与，其他过程均不参与。\n\n4. provide表示依赖参与编译和测试，但是不会参与打包和部署，打包后放到tomcat中运行时，会使用tomcat中体积功的jar文件。\n\n5. maven构建项目的阶段：清除，编译，测试，报告，打包，安装，部署</code></pre>\n\n<h3 id=\"4-Maven-中的资源配置\"><a href=\"#4-Maven-中的资源配置\" class=\"headerlink\" title=\"4. Maven 中的资源配置\"></a>4. Maven 中的资源配置</h3><h4 id=\"4-1-指定资源位置\"><a href=\"#4-1-指定资源位置\" class=\"headerlink\" title=\"4.1 指定资源位置\"></a>4.1 指定资源位置</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">编译时，会把编译好的class文件以及resources目录下的资源拷贝到 target目录中，但是Java目录下的非java文件，并不会拷贝到target目录中，所以我们需要在pom文件中指定这些文件的位置，类型，然后使系统识别到并且拷贝这些文件</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">1. maven执行编译代码时，会把src&#x2F;main&#x2F;resources目录中的文件拷贝到target&#x2F;classes中\n\n   但是src&#x2F;main&#x2F;java目录下的非java文件，并不会拷贝到target&#x2F;classes中，此时就需要资源插件\n\n2. 在&lt;build&gt;标签内的&lt;includes&gt;下的&lt;include&gt;标签内，写下需要拷贝的文件类型，那么目录中的此类文件就会被扫描到，并拷贝到结果目录中&lt;build&gt;\n    \n3. 指定资源位置的模板\n    &lt;resources&gt;\n          &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;&lt;!--所在的目录--&gt;\n            &lt;includes&gt;&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;\n            &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n            &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;!-- filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;\n            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n          &lt;&#x2F;resource&gt;\n        \n          &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*.*&lt;&#x2F;include&gt;&lt;!--此目录下的全部内容--&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n          &lt;&#x2F;resource&gt;\n        &lt;&#x2F;resources&gt;\n  &lt;&#x2F;build&gt;</code></pre>\n\n<h4 id=\"4-2-全局变量\"><a href=\"#4-2-全局变量\" class=\"headerlink\" title=\"4.2 全局变量\"></a>4.2 全局变量</h4><table>\n<thead>\n<tr>\n<th>重要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">在pom文件中通过属性定义全局变量，通过 ${property_name} 来调用，以提高扩展性以及维护性</font></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">1. 在 Maven 的 pom.xml 文件中，&lt;properties&gt;用于定义全局变量（可以 &#123;自定义全局变量&#125; ）\n\n2. POM 中通过  $&#123;property_name&#125;  的形式引用变量的值。\n\n3. 定义全局变量：\n\n   &lt;properties&gt;\n    \t&lt;spring.version&gt;4.3.10.RELEASE&lt;&#x2F;spring.version&gt;\n   &lt;&#x2F;properties&gt;\n\n   引用全局变量：\n\n   &lt;dependency&gt;\n       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;     $&#123;spring.version&#125;          &lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n\n4. maven 系统采用的变量\n\n   &lt;properties&gt;\n        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt; 源码编译 jdk 版本\n        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt; 运行代码的 jdk 版本\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;项目构建用的编码，避免中文乱码\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt; 生成报告的编码\n   &lt;&#x2F;properties&gt;\n   </code></pre>\n\n\n\n<h3 id=\"打包方式\"><a href=\"#打包方式\" class=\"headerlink\" title=\"打包方式\"></a>打包方式</h3><p>pom：用在聚合工程或父工程中，并无实际意义</p>\n<p>jar：默认打为jar包</p>\n<p>war：打包后发布到服务器上</p>\n","text":"1. Maven简介1.1 完成一个java项目1. 分析项目要做什么，知道项目有哪些组成部分 2. 设计项目（步骤，技术，多少人，多长时间） 3. 组建团队，招人，购置设备，服务器，软件，笔记本 4. 开发人员写代码，测试代码，重复多次工作 5. 测试人员，测试项目功能 ---...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/categories/Project-Manager.json"}],"tags":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/tags/Project-Manager.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Maven%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1. Maven简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AAjava%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1.1 完成一个java项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.2 传统开发问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-Maven%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">1.3 Maven进行管理改进</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-Maven-%E4%B8%AD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">1.4 Maven 中项目的构建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-Maven%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.5 Maven的核心概念</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Maven%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2. Maven的核心概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E7%BA%A6%E5%AE%9A%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.1 约定的目录结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-compile-%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">2.2 compile 第一次编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">2.3 仓库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-POM\"><span class=\"toc-text\">2.4  POM</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%8C%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">2.5 生命周期，命令及插件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Maven-%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">3. Maven 中的依赖范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Maven-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4. Maven 中的资源配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E6%8C%87%E5%AE%9A%E8%B5%84%E6%BA%90%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">4.1 指定资源位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.2 全局变量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">打包方式</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Linux","uid":"3fe1ee3f3830128bf539e5f4ed9fbbe9","slug":"41-Linux","date":"2021-09-13T15:17:32.000Z","updated":"2021-09-15T10:52:47.068Z","comments":true,"path":"api/articles/41-Linux.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"1. 为什么学习Linux开源、稳定、漏洞少、主要定位在服务器端操作系统（个人操作系统Windows还是具有很大优势的，操作方便，应用软件多，生态完善）。 比如：可在Windows下使用idea进行软件开发，开发完毕后发布到Linux服务器上。 2. Linux目录及结构2.1 ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"工具类，上传下载，验证码","uid":"cfe3c6b5bac26dbfd06dd74550839a48","slug":"39-utils kaptcher up down","date":"2021-09-13T15:15:32.000Z","updated":"2021-09-15T10:29:16.262Z","comments":true,"path":"api/articles/39-utils kaptcher up down.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. BeanUtils使用及方法分析1.1 概论1. BeanUtils被广泛的使用与三大框架。 在整个J2EE的编程过程中，我们经常会从各种配置文件中读取相应的数据，需要明白的一点是从配置文件中读取到的数据都是String，但是很显然我们的应用程序中不仅仅有String一种数...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}