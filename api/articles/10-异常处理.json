{"title":"异常处理","uid":"5a74204f11299c4fc6660b81cabe549b","slug":"10-异常处理","date":"2021-09-13T14:45:32.000Z","updated":"2021-09-14T16:00:17.234Z","comments":true,"path":"api/articles/10-异常处理.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.png","content":"<h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。</p>\n<p>异常的出现就是为了记录程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止的情况。在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。</p>\n<p>异常出现的目的是为了<strong>保证程序的健壮性</strong>。代码出现问题时，曝出异常，程序员解决这些异常以后再继续向下执行。如果不抛出异常，程序就会在错误的基础上继续执行，这样更加危险。</p>\n<h3 id=\"二、异常体系\"><a href=\"#二、异常体系\" class=\"headerlink\" title=\"二、异常体系\"></a>二、异常体系</h3><p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/Throwable.png\" alt=\"img\"></p>\n<ul>\n<li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，例如常见的<code>StackOverFlowError</code>和<code>OutOfMemoryError</code>。</li>\n<li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是需要处理的。</li>\n</ul>\n<p><strong>Throwable中的常用方法：</strong></p>\n<ul>\n<li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p>\n<p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p>\n</li>\n<li><p><code>public String getMessage()</code>:获取发生异常的原因。</p>\n<p><em>提示给用户的时候,就提示错误原因。</em></p>\n</li>\n<li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p>\n</li>\n</ul>\n<h3 id=\"三、异常分类\"><a href=\"#三、异常分类\" class=\"headerlink\" title=\"三、异常分类\"></a>三、异常分类</h3><p>根据在编译时期还是运行时期去检查异常?</p>\n<ul>\n<li><strong>编译时期异常</strong>:  checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li>\n<li><strong>运行时期异常</strong>:  runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数组索引越界异常)</li>\n</ul>\n<h3 id=\"四、异常处理\"><a href=\"#四、异常处理\" class=\"headerlink\" title=\"四、异常处理\"></a>四、异常处理</h3><p>1、规避：只适用于RuntimeException，通过大量的条件判断语句，避免出现异常。</p>\n<p>2、try …  catch …</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try...catch：\ntry&#123;\n   &#x2F;&#x2F; 有可能出现异常的代码\n&#125;catch(异常类型 异常变量名) &#123;\n  &#x2F;&#x2F; 发生异常以后执行的代码\n&#125;</code></pre>\n\n<ul>\n<li>一个try可以有多个catch语句</li>\n<li>如果多个catch语句它的代码一样，可以使用 | 连接</li>\n<li>如果多个catch语句的异常类型有父子类继承关系，父类的异常捕获要在子类的后面</li>\n<li>在catch语句里，通常会调用异常对象printStackTrace()方法，打印异常调用堆栈</li>\n<li>在catch语句里，还可以再抛出一个新的异常(原因之前的错误类型可能不能很好的描述异常的情况，此时可以考虑定义一个新的异常类来描述错误)</li>\n</ul>\n<p>3、使用  throw  关键字抛出一个异常</p>\n<ul>\n<li><p>throw 后面的对象，必须要继承自 Throwable</p>\n</li>\n<li><p>一般情况下，如果使用了 throw 抛出了一个异常，就需要在方法的声明使用 throws 声明这个异常。</p>\n</li>\n<li><p>如果代码里抛出的是 <strong>RuntimeException</strong>类型的异常，方法声明里<strong>可以不使用 throws</strong> 来声明异常</p>\n</li>\n<li><p>父类的方法如果抛出了异常，子类在重写这个方法的时候</p>\n<ul>\n<li><p>如果没有使用super调用父类的方法，子类可以不用管父类抛出异常</p>\n</li>\n<li><p>如果使用super调用了父类的方法，子类必须要处理父类的异常</p>\n<p>可以直接使用throws抛出一个和父类方法相同的异常</p>\n<p>也可以使用try…catch语句，解决父类的异常</p>\n</li>\n</ul>\n</li>\n<li><p>父类的方法里没有抛出异常，子类在重写父类方法时，也不能抛出编译时异常</p>\n</li>\n</ul>\n<h3 id=\"五、finally代码块\"><a href=\"#五、finally代码块\" class=\"headerlink\" title=\"五、finally代码块\"></a>五、finally代码块</h3><h4 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><p>因为异常会引发程序跳转，导致有些语句执行不到。</p>\n<p>但是如果有一些特定的代码无论异常是否发生，都需要执行，就可以讲这些代码写入到finally代码块里。（<strong>保证这段代码一定会被执行</strong>）</p>\n<h4 id=\"2、finally-语法\"><a href=\"#2、finally-语法\" class=\"headerlink\" title=\"2、finally 语法\"></a>2、finally 语法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型1 异常的变量名1)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;catch(异常类型2 异常的变量名2)&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;finally&#123;\n  &#x2F;&#x2F; 程序代码\n&#125;</code></pre>\n\n<h4 id=\"3、注意\"><a href=\"#3、注意\" class=\"headerlink\" title=\"3、注意\"></a>3、注意</h4><ul>\n<li><p>finally不能单独使用。</p>\n</li>\n<li><p>一个方法可以有多个return语句，但是通常情况都只会执行一个return语句。</p>\n<p>return语句表示一个方法的结束，但是当方法里有finally语句时，finally语句里的return一定会执行，可能<strong>会覆盖之前的return语句结果</strong></p>\n</li>\n</ul>\n<h3 id=\"六、自定义异常\"><a href=\"#六、自定义异常\" class=\"headerlink\" title=\"六、自定义异常\"></a>六、自定义异常</h3><h4 id=\"1、概述-1\"><a href=\"#1、概述-1\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><p>在有些情况下，Java内置的错误类型可能不能够很精确的描述我们的遇到的异常类型，此时就可以考虑自定义异常。</p>\n<h4 id=\"2、如何自定义\"><a href=\"#2、如何自定义\" class=\"headerlink\" title=\"2、如何自定义\"></a>2、如何自定义</h4><p>异常分为两大类，编译时异常和运行时异常。我们在开发中，也可以根据我们的业务逻辑，选择继承的异常类型。</p>\n<ul>\n<li>自定义编译时异常：自定义异常类需要<strong>继承</strong>自<code>Exception</code>类。</li>\n<li>自定义运行时异常：自定义异常类需要<strong>继承</strong>自<code>RuntimeException</code>类。</li>\n<li>根据自己的业务需求，还可以继承<code>Exception</code>或者<code>RuntimeException</code>的<strong>子类</strong>。</li>\n</ul>\n","text":"一、概述在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。 异常的出现就是为了记录程序在执行过程中，出现的非正常的情况，...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一、概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB\"><span class=\"toc-text\">二、异常体系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">三、异常分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">四、异常处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81finally%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">五、finally代码块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81finally-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2、finally 语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">3、注意</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">六、自定义异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0-1\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2、如何自定义</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"集合（上）","uid":"42c17c71eb42c16b2fd355c959a76eb9","slug":"11-集合（上）","date":"2021-09-13T14:46:32.000Z","updated":"2021-09-14T15:54:50.726Z","comments":true,"path":"api/articles/11-集合（上）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","text":"一、为什么使用集合为什么我们不采用数组存对象呢？ 因为数组长度是固定，而我们很多时候对对象的个数是 不确定的。 所以，我们产生了集合框架，它是用于存储对象的。 二、集合和数组的区别 集合长度是可变的，集合中不能存储基本数据类型值，只能存储对象(引用数据类型)。 数组的长度是固定的...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"常用的类（下）","uid":"2d669717a3bf1c4b448259cbc4c2654a","slug":"09-常用的类（下）","date":"2021-09-13T14:43:32.000Z","updated":"2021-09-14T16:11:01.000Z","comments":true,"path":"api/articles/09-常用的类（下）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/img/sky7.jpg","text":"一、Arrays类1、概述Arrays类包含用于操作数组的各种方法，是操作属猪的工具类 2、常用方法toString():将数组变成字符串 int[] arr &#x3D; &#123;1, 2, 3&#125;; String x &#x3D; java.util.Arrays...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":12,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}