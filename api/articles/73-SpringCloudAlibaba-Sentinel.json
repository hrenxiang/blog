{"title":"SpringCloudALibaba Sentinel","uid":"2b44c6e424a6331818e54e65d2f7d5d8","slug":"73-SpringCloudAlibaba-Sentinel","date":"2021-09-13T15:49:32.000Z","updated":"2021-09-15T10:46:10.931Z","comments":true,"path":"api/articles/73-SpringCloudAlibaba-Sentinel.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog3.jpg","content":"<h4 id=\"01、Sentinel-简介\"><a href=\"#01、Sentinel-简介\" class=\"headerlink\" title=\"01、Sentinel 简介\"></a>01、Sentinel 简介</h4><hr/>\n\n<h5 id=\"1-1、官方文档\"><a href=\"#1-1、官方文档\" class=\"headerlink\" title=\"1.1、官方文档\"></a>1.1、官方文档</h5><p>GitHub：<a href=\"https://github.com/alibaba/Sentinel\">https://github.com/alibaba/Sentinel</a></p>\n<p>中文：<a href=\"https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D\">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p>\n<h5 id=\"1-2、Sentinel-是什么\"><a href=\"#1-2、Sentinel-是什么\" class=\"headerlink\" title=\"1.2、Sentinel 是什么\"></a>1.2、Sentinel 是什么</h5><p>Sentinel: 分布式系统的流量防卫兵</p>\n<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>\n<h5 id=\"1-3、Sentinel-的特征\"><a href=\"#1-3、Sentinel-的特征\" class=\"headerlink\" title=\"1.3、Sentinel 的特征\"></a>1.3、Sentinel 的特征</h5><p>1、<strong>丰富的应用场景</strong></p>\n<p>Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p>\n<p>2、<strong>完备的实时监控</strong></p>\n<p>Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p>\n<p>3、<strong>广泛的开源生态</strong></p>\n<p>Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。</p>\n<p>4、<strong>完善的 SPI 扩展机制</strong></p>\n<p>Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>\n<h5 id=\"1-3、Sentinel-的主要特性\"><a href=\"#1-3、Sentinel-的主要特性\" class=\"headerlink\" title=\"1.3、Sentinel 的主要特性\"></a>1.3、Sentinel 的主要特性</h5><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-1.png\" alt=\"Sentinel-features-overview\" style=\"zoom: 67%;\" />\n\n\n\n<h5 id=\"1-4、Sentinel-的开源生态\"><a href=\"#1-4、Sentinel-的开源生态\" class=\"headerlink\" title=\"1.4、Sentinel 的开源生态\"></a>1.4、Sentinel 的开源生态</h5><p>Sentinel 分为两个部分:</p>\n<ul>\n<li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li>\n<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>\n</ul>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-3.png\" alt=\"image-20210817084707409\" style=\"zoom:80%;\" />\n</div>\n\n\n\n<h5 id=\"1-5、下载及使用地址\"><a href=\"#1-5、下载及使用地址\" class=\"headerlink\" title=\"1.5、下载及使用地址\"></a>1.5、下载及使用地址</h5><p>下载地址：<a href=\"https://github.com/alibaba/Sentinel/releases\">https://github.com/alibaba/Sentinel/releases</a></p>\n<p>使用地址：<a href=\"https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel\">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel</a></p>\n<h5 id=\"1-6、服务使用中的各种问题\"><a href=\"#1-6、服务使用中的各种问题\" class=\"headerlink\" title=\"1.6、服务使用中的各种问题\"></a>1.6、服务使用中的各种问题</h5><p>服务雪崩</p>\n<p>服务降级</p>\n<p>服务熔断</p>\n<p>服务限流</p>\n<h4 id=\"02、安装控制台\"><a href=\"#02、安装控制台\" class=\"headerlink\" title=\"02、安装控制台\"></a>02、安装控制台</h4><hr/>\n\n<p>Sentinel 分为两个部分:</p>\n<p>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</p>\n<p>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p>\n<ul>\n<li>后台</li>\n<li>前台8080</li>\n</ul>\n<h5 id=\"1-1、下载\"><a href=\"#1-1、下载\" class=\"headerlink\" title=\"1.1、下载\"></a>1.1、下载</h5><p><a href=\"https://github.com/alibaba/Sentinel/releases\">https://github.com/alibaba/Sentinel/releases</a></p>\n<p>下载到本地sentinel-dashboard-1.7.0.jar</p>\n<h5 id=\"1-2、运行\"><a href=\"#1-2、运行\" class=\"headerlink\" title=\"1.2、运行\"></a>1.2、运行</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">java -jar sentinel-dashboard-1.7.0.jar</code></pre>\n\n\n\n<h5 id=\"1-3、访问\"><a href=\"#1-3、访问\" class=\"headerlink\" title=\"1.3、访问\"></a>1.3、访问</h5><p><a href=\"http://localhost:8080/\">http://localhost:8080</a>        登录账号密码均为sentinel</p>\n<h4 id=\"03、初始化演示过程\"><a href=\"#03、初始化演示过程\" class=\"headerlink\" title=\"03、初始化演示过程\"></a>03、初始化演示过程</h4><hr/>\n\n<h5 id=\"1-1、启动-Nacos\"><a href=\"#1-1、启动-Nacos\" class=\"headerlink\" title=\"1.1、启动 Nacos\"></a>1.1、启动 Nacos</h5><p><a href=\"http://localhost:8848/nacos/#/login\">http://localhost:8848/nacos/#/login</a></p>\n<h5 id=\"1-2、创建-Module\"><a href=\"#1-2、创建-Module\" class=\"headerlink\" title=\"1.2、创建 Module\"></a>1.2、创建 Module</h5><p>cloudalibaba-sentinel-service8401</p>\n<p>添加POM</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;cloud2020&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;com.atguigu.springcloud&lt;&#x2F;groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;artifactId&gt;cloudalibaba-sentinel-service8401&lt;&#x2F;artifactId&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.atguigu.springcloud&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;sentinel-datasource-nacos&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;4.6.3&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>YML</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8401\n\nspring:\n  application:\n    name: cloudalibaba-sentinel-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    sentinel:\n      transport:\n        dashboard: localhost:8080\n        port: 8719  #默认8719，应用与Sentinel控制台交互的端口，应用本地会起一个该端口占用HttpServer\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &#39;*&#39;</code></pre>\n\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints\">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints</a></p>\n<p><code>*</code>可用于选择所有端点。例如，要通过 HTTP 公开除<code>env</code>和<code>beans</code>端点之外的所有内容，请使用以下属性：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">management.endpoints.web.exposure.include&#x3D;*\nmanagement.endpoints.web.exposure.exclude&#x3D;env,beans</code></pre>\n\n<p>主启动</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.springcloud.alibaba;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class MainApp8401&#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(MainApp8401.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>业务类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.springcloud.alibaba.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@Slf4j\npublic class FlowLimitController&#123;\n    @GetMapping(&quot;&#x2F;testA&quot;)\n    public String testA() &#123;\n        return &quot;------testA&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;testB&quot;)\n    public String testB() &#123;\n        return &quot;------testB&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h5 id=\"1-3、启动-Sentinel-8080\"><a href=\"#1-3、启动-Sentinel-8080\" class=\"headerlink\" title=\"1.3、启动 Sentinel 8080\"></a>1.3、启动 Sentinel 8080</h5><p>java -jar sentinel-dashboard-1.7.0</p>\n<h5 id=\"1-4、启动-服务提供者-8401\"><a href=\"#1-4、启动-服务提供者-8401\" class=\"headerlink\" title=\"1.4、启动 服务提供者 8401\"></a>1.4、启动 服务提供者 8401</h5><h5 id=\"1-5、查看控制台\"><a href=\"#1-5、查看控制台\" class=\"headerlink\" title=\"1.5、查看控制台\"></a>1.5、查看控制台</h5><p>空空如也，啥都没有</p>\n<p>==Sentinel采用的懒加载说明==</p>\n<p>执行一次访问即可</p>\n<p><a href=\"http://localhost:8401/testA\">http://localhost:8401/testA</a></p>\n<p><a href=\"http://localhost:8401/testB\">http://localhost:8401/testB</a></p>\n<p>效果</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-5.png\" alt=\"image-20210817090917165\"></p>\n<h4 id=\"04、流控规则\"><a href=\"#04、流控规则\" class=\"headerlink\" title=\"04、流控规则\"></a>04、流控规则</h4><hr/>\n\n<h5 id=\"1-1、基本介绍\"><a href=\"#1-1、基本介绍\" class=\"headerlink\" title=\"1.1、基本介绍\"></a>1.1、基本介绍</h5><div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-4.png\" alt=\"image-20210817091515981\" style=\"zoom:80%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-6.png\" alt=\"image-20210817091529587\" style=\"zoom:80%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-7.png\" alt=\"image-20210817091539410\" style=\"zoom:80%;\" />\n</div>\n\n\n\n<h5 id=\"1-2、流控模式-–-直接\"><a href=\"#1-2、流控模式-–-直接\" class=\"headerlink\" title=\"1.2、流控模式 – 直接\"></a>1.2、流控模式 – 直接</h5><p>默认的流控模式是直接，流控效果是快速失败。直接就是直接访问限定规则的资源，快速失败就是效果是访问失败直接出现限流的文字。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-9.png\" alt=\"image-20210817092234060\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-8.png\" alt=\"image-20210817092016228\"></p>\n<p>==设置线程数为2，快熟点击不会出现Blocked by Sentinel (flow limiting)（线程处理请求很快），但是，在映射方法里添加sleep后，同样也会出现Blocked by Sentinel (flow limiting)默认提示信息。==</p>\n<h5 id=\"1-3、流控模式-–-关联\"><a href=\"#1-3、流控模式-–-关联\" class=\"headerlink\" title=\"1.3、流控模式 – 关联\"></a>1.3、流控模式 – 关联</h5><p>微服务的系统资源一般都有关联关系，比如：订单接口会调用支付接口，如果支付接口出现流量激增的情况，会导致调用订单接口出现问题，这时我们除了直接对支付接口限流外，也可以对订单接口限流。</p>\n<p>为验证效果，我们编写控制器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RestController\npublic class OrderController &#123;\n\n    @GetMapping(&quot;&#x2F;order&quot;)\n    public String order()&#123;\n        return &quot;这是订单接口!&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;payment&quot;)\n    public String payment()&#123;\n        return &quot;这是支付接口!&quot;;\n    &#125;\n&#125;\n复制代码</code></pre>\n\n<p>先访问一下/order接口，然后给它添加流控规则，流控模式选择关联，关联资源设置为/payment，也就是：payment接口每秒访问超过1次后，将对order接口进行限流。</p>\n<p>总结一下，关联就是：关联资源超过了阈值，限流当前的资源。</p>\n<h5 id=\"1-4、流控模式-–-链路\"><a href=\"#1-4、流控模式-–-链路\" class=\"headerlink\" title=\"1.4、流控模式 – 链路\"></a>1.4、流控模式 – 链路</h5><p>链路是资源的调用可能出现上下级的层次结构，如下图：</p>\n<p>A是根节点，以A为入口，可以访问B和C，B和C又可以访问D和E，那么我们如果对A进行限流，就可以对A下面的所有资源进行限流了。</p>\n<p>做下测试：查看簇点链路，选择树状视图，就可以看到上下级的关系了。</p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-11.png\" alt=\"image-20210817102821463\" style=\"zoom:80%;\" />\n\n<p>我们看到上层的资源是/sentinel_web_servlet_context，下层资源也/testA，给下面的/testA添加流控</p>\n<h4 id=\"05、流控效果\"><a href=\"#05、流控效果\" class=\"headerlink\" title=\"05、流控效果\"></a>05、流控效果</h4><hr/>\n\n<h5 id=\"1-1、快速失败\"><a href=\"#1-1、快速失败\" class=\"headerlink\" title=\"1.1、快速失败\"></a>1.1、快速失败</h5><p>快速失败是默认效果，既当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。</p>\n<p>直接失败，抛出异常：Blocked by Sentinel (flow limiting)</p>\n<p>源码：com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</p>\n<h5 id=\"1-2、Warm-Up\"><a href=\"#1-2、Warm-Up\" class=\"headerlink\" title=\"1.2、Warm Up\"></a>1.2、Warm Up</h5><p>即预热/冷启动方式。</p>\n<p>当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。<br> 比如：在春节抢热点地区火车票的时候，如果直接把流量放进来，可能会一下直接把12306的服务器打死，那么我们可以设定一个预热时间，给服务器一个缓冲期，慢慢的把流量放进来，直到达到最大的阈值。</p>\n<p>修改一下前面的流控规则，这里阈值是10，预热时间是5秒，前面讲过流量是逐步加到阈值上限的，那么就有一个初始的阈值： 初始阈值 = 阈值上限 / coldFactor， coldFactor 是冷加载因子，默认为3，则初始阈值为 10 / 3 = 3<br> 下面配置的效果就是：一开始限流的阈值是3，然后5秒后上升到10.</p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-12.png\" alt=\"image-20210817103426999\" style=\"zoom:80%;\" />\n\n<p>应用场景，如：秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是为了保护系统，可慢慢的把流量放进来，慢慢的把阈值增长到设置的阈值。</p>\n<h5 id=\"1-3、排队等待\"><a href=\"#1-3、排队等待\" class=\"headerlink\" title=\"1.3、排队等待\"></a>1.3、排队等待</h5><p>排队等待方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。也比较好理解，就是不管流量再多，进来访问资源时都必须排队，一个个的访问。</p>\n<p> 这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p>\n<ul>\n<li>匀速排队，让请求以均匀的速度通过，阈值类型必须设置成QPS，否则无效。</li>\n<li>设置含义：/testB每秒1次请求，超过的话就排队等待，等待的超时时间为20000毫秒。</li>\n</ul>\n<h4 id=\"06、降级规则\"><a href=\"#06、降级规则\" class=\"headerlink\" title=\"06、降级规则\"></a>06、降级规则</h4><hr/>\n\n<h5 id=\"1-1、官网概述\"><a href=\"#1-1、官网概述\" class=\"headerlink\" title=\"1.1、官网概述\"></a>1.1、官网概述</h5><p>官网：<a href=\"https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7\">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p>\n<p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-21.png\" alt=\"chain\" style=\"zoom: 33%;\" />\n</div>\n\n<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：此文档针对 Sentinel 1.8.0 及以上版本。1.8.0 版本对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。==但是本文 采用的是 1.7.x 的版本请注意==</p></blockquote>\n<h5 id=\"1-2、熔断策略\"><a href=\"#1-2、熔断策略\" class=\"headerlink\" title=\"1.2、熔断策略\"></a>1.2、熔断策略</h5><p>Sentinel 提供以下几种熔断策略：</p>\n<ul>\n<li><p>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.7.x 中叫平均响应时间，当1S内持续进入N个请求，如果平均响应时间超过阈值，那么在接下来的时间窗口内，按降级逻辑进行处理（报一个DegradeException错误）。</p></blockquote>\n</li>\n<li><p>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>普通来说，可以输入一个0.0~1.0的数字，表示出现异常的比例。如果一秒内超过这个比例，那么在接下来的时间窗口内，按降级逻辑进行处理。</p></blockquote>\n</li>\n<li><p>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>普通来说，指当资源近一分钟的异常数超过阈值之后会，那么在接下来的时间窗口内，按降级逻辑进行处理。</p></blockquote>\n</li>\n</ul>\n<p>注意异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-22.png\" alt=\"image-20210819145753845\" style=\"zoom:80%;\" />\n</div>\n\n\n\n\n\n<h4 id=\"07、热点规则\"><a href=\"#07、热点规则\" class=\"headerlink\" title=\"07、热点规则\"></a>07、热点规则</h4><hr/>\n\n<p>所谓热点规则，就是对某些经常访问的数据（热点数据），对其访问进行限制，</p>\n<p>比如以商品ID为参数，限制这个商品的访问次数。在代码中需要对要限制的请求进行埋点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@GetMapping(&quot;&#x2F;test3&quot;)\n@SentinelResource(value &#x3D; &quot;test3&quot;,blockHandler &#x3D; &quot;handHotKey&quot;)\n    public String testA(@RequestParam(value &#x3D; &quot;a&quot;,required &#x3D; false)String a,\n                    @RequestParam(value &#x3D; &quot;b&quot;,required &#x3D; false)String b)&#123;\n    return &quot;test3&quot;+a+b;\n&#125;\n\npublic String handHotKey(String a1, String a2, BlockException e)&#123;\n    return &quot;热点数据限流&quot;;\n&#125;</code></pre>\n\n<p>1、设置热点规则，这里的资源名就是@SentinelResource中所设置的value，参数索引的表示对第几个参数进行限流控制，阈值和窗口时长表示在1秒内如果有2个对参数0的请求，就限流。限流后会执行自己设置的blockHandler方法。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-25.png\" alt=\"image-20210819153018786\"></p>\n<p>如果访问/test3，我们发现热点规则没有生效</p>\n<p>如果访问/test3?a=1，若一秒钟 超过两次，则直接显示 热点数据限流（我们上述兜底方法中返回给客户端的）</p>\n<p>如果访问/test3?b=1，我们发现热点规则没有生效</p>\n<p>所以说，我们只限定我们设置的参数索引位置的数据</p>\n<p>2、高级设置中可以设置参数例外项，即根据设置参数的值进行限流</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel.png\" alt=\"image-20210819152915547\" style=\"zoom:80%;\" />\n</div>\n\n<p><a href=\"http://localhost:8401/test3?a=5%EF%BC%8C%E4%B8%80%E7%A7%92%E8%B6%85%E8%BF%875%E6%AC%A1%E6%89%8D%E4%BC%9A\">http://localhost:8401/test3?a=5，一秒超过5次才会</a> 显示热点数据限流</p>\n<p><a href=\"http://localhost:8401/test3?a=1%EF%BC%8C%E4%B8%80%E7%A7%92%E4%B8%80%E6%AC%A1%E5%B0%B1%E6%98%BE%E7%A4%BA\">http://localhost:8401/test3?a=1，一秒一次就显示</a></p>\n<h4 id=\"08、系统规则\"><a href=\"#08、系统规则\" class=\"headerlink\" title=\"08、系统规则\"></a>08、系统规则</h4><hr/>\n\n<p>通过监控系统的一些参数进行规则限流： </p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-26.png\" alt=\"image-20210819153647024\" style=\"zoom:80%;\" />\n\n<p>Load：这个参数只能在Linux或类Unix机器生效，将系统的1分钟的loadAverage作为指标，这个值一般设置为CPU核心数量 * 2.5。</p>\n<p>RT：当单台机器上<strong>所有入口流量的平均RT</strong>达到阈值就触发系统保护，单位是毫秒。</p>\n<p>并发线程数：当单台机器上<strong>所有入口流量的并发线程数</strong>达到阈值就触发系统保护。</p>\n<p>入口QPS：当单台机器上<strong>所有入口流量的QPS</strong>达到阈值就触发阈值就触发系统保护。（设置0，代表1秒中最多一个，设置1，代表一秒中最多两个）</p>\n<p>CPU使用率：当系统CPU使用率超过阈值就触发系统保护。</p>\n<h4 id=\"09、-SentinelResource\"><a href=\"#09、-SentinelResource\" class=\"headerlink\" title=\"09、@SentinelResource\"></a>09、@SentinelResource</h4><hr/>\n\n<h5 id=\"1-1、按资源名称限流-后续处理\"><a href=\"#1-1、按资源名称限流-后续处理\" class=\"headerlink\" title=\"1.1、按资源名称限流+后续处理\"></a>1.1、按资源名称限流+后续处理</h5><ul>\n<li>启动Nacos成功</li>\n<li>启动Sentinel成功</li>\n<li>Module：cloudalibaba-sentinel-service8401</li>\n<li>POM</li>\n<li>YML</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8401\n\nspring:\n  application:\n    name: cloudalibaba-sentinel-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    sentinel:\n      transport:\n        dashboard: localhost:8080\n        port: 8719  #默认8719，应用与Sentinel控制台交互的端口，应用本地会起一个该端口占用的HttpServer\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &#39;*&#39;</code></pre>\n\n<ul>\n<li>业务类RateLimitController</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.springcloud.alibaba.controller;\n\nimport com.alibaba.csp.sentinel.annotation.SentinelResource;\nimport com.alibaba.csp.sentinel.slots.block.BlockException;\nimport com.atguigu.springcloud.alibaba.entities.CommonResult;\nimport com.atguigu.springcloud.alibaba.entities.Payment;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class RateLimitController&#123;\n    @GetMapping(&quot;&#x2F;byResource&quot;)\n    @SentinelResource(value &#x3D; &quot;byResource&quot;,blockHandler &#x3D; &quot;handleException&quot;)\n    public CommonResult byResource()&#123;\n        return new CommonResult(200,&quot;按资源名称限流测试OK&quot;,new Payment(2020L,&quot;serial001&quot;));\n    &#125;\n    public CommonResult handleException(BlockException exception)&#123;\n        return new CommonResult(444,exception.getClass().getCanonicalName()+&quot;\\t 服务不可用&quot;);\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>主启动</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.springcloud.alibaba;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class MainApp8401&#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(MainApp8401.class, args);\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>配置流控规则，配置步骤</li>\n</ul>\n<div>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-27.png\" alt=\"image-20210819154658627\"  />    \n</div>\n\n<ul>\n<li>表示1秒钟内查询次数大于1，就跑到我们自定义的处理，限流</li>\n<li>测试<ul>\n<li>1秒钟点击1下，OK</li>\n<li>超过上述问题，疯狂点击，返回了自己定义的限流处理信息，限流发生</li>\n</ul>\n</li>\n<li>Sentinel控制台，流控规则消失了？？？？？临时/持久？</li>\n</ul>\n<h5 id=\"1-2、按-Url-地址限流-后续处理\"><a href=\"#1-2、按-Url-地址限流-后续处理\" class=\"headerlink\" title=\"1.2、按 Url 地址限流+后续处理\"></a>1.2、按 Url 地址限流+后续处理</h5><p>通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息<br>业务类RateLimitController</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@GetMapping(&quot;&#x2F;rateLimit&#x2F;byUrl&quot;)\n@SentinelResource(value &#x3D; &quot;byUrl&quot;)\npublic CommonResult byUrl()&#123;\n    return new CommonResult(200,&quot;按url限流测试OK&quot;,new Payment(2020L,&quot;serial002&quot;));\n&#125;</code></pre>\n\n<p>访问一次</p>\n<p>Sentinel控制台配置</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-28.png\" alt=\"image-20210819155211160\" style=\"zoom:80%;\" />\n</div>\n\n<ul>\n<li>测试<ul>\n<li>疯狂点击<a href=\"http://localhost:8401/rateLimit/byUrl\">http://localhost:8401/rateLimit/byUrl</a></li>\n<li>结果，会返回Sentinel自带的限流处理结果</li>\n</ul>\n</li>\n<li>上面兜底方法面临的问题<ul>\n<li>系统默认的，没有体现我们自己的业务要求。</li>\n<li>依照现有条件，我们自定义的处理方法又和业务代码耦合在一起，不直观。</li>\n<li>每个业务方法都增加一个兜底的，那代码膨胀加剧。</li>\n<li>全局统一的处理方法没有体现。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-3、客户自定义限流处理逻辑\"><a href=\"#1-3、客户自定义限流处理逻辑\" class=\"headerlink\" title=\"1.3、客户自定义限流处理逻辑\"></a>1.3、客户自定义限流处理逻辑</h5><ul>\n<li>创建customerBlockHandler类用于自定义限流处理逻辑</li>\n<li>自定义限流处理类</li>\n<li>==方法必须是public static修饰的。(在注解中我们指明了类的class对象和方法所对应的异常处理方法，所以我们是直接使用类调用的)==</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.springcloud.alibaba.myhandler;\n\nimport com.alibaba.csp.sentinel.slots.block.BlockException;\nimport com.atguigu.springcloud.entities.CommonResult;\n\npublic class CustomerBlockHandler &#123;\n    public static CommonResult handleException(BlockException exception)&#123;\n        return new CommonResult(2020,&quot;自定义限流处理信息.... CustomerBlockHandler --- 1&quot;);\n    &#125;\n\n    public static CommonResult handleException2(BlockException exception)&#123;\n        return new CommonResult(2020,&quot;自定义限流处理信息.... CustomerBlockHandler --- 2&quot;);\n    &#125;\n\n&#125;</code></pre>\n\n<ul>\n<li>RateLimitController</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@GetMapping(&quot;&#x2F;rateLimit&#x2F;customerBlockHandler&quot;)\n@SentinelResource(value &#x3D; &quot;customerBlockHandler&quot;,\n        blockHandlerClass &#x3D; CustomerBlockHandler.class, blockHandler &#x3D; &quot;handleException2&quot;)\npublic CommonResult customerBlockHandler()&#123;\n    return new CommonResult(200,&quot;按客戶自定义&quot;,new Payment(2020L,&quot;serial003&quot;));\n&#125;</code></pre>\n\n<ul>\n<li><p>启动微服务后先调用一次</p>\n<p><a href=\"http://localhost:8401/rateLimit/customerBlockHandlerSentinel\">http://localhost:8401/rateLimit/customerBlockHandlerSentinel</a></p>\n</li>\n<li><p>控制台配置</p>\n</li>\n<li><p>测试后我们自定义的出来了</p>\n</li>\n<li><p>进一步说明</p>\n</li>\n</ul>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-30.png\" alt=\"image-20210819155549222\"  />\n</div>\n\n\n\n<h5 id=\"1-4、更多注解属性说明\"><a href=\"#1-4、更多注解属性说明\" class=\"headerlink\" title=\"1.4、更多注解属性说明\"></a>1.4、更多注解属性说明</h5><p><a href=\"https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81\">https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81</a></p>\n<p>==@SentinelResource 注解方式埋点不支持 private 方法。==</p>\n<h4 id=\"10、服务熔断功能\"><a href=\"#10、服务熔断功能\" class=\"headerlink\" title=\"10、服务熔断功能\"></a>10、服务熔断功能</h4><hr/>\n\n<p>sentinel整合ribbon+openFeign+fallback</p>\n<h5 id=\"1-1、Ribbon-系列\"><a href=\"#1-1、Ribbon-系列\" class=\"headerlink\" title=\"1.1、Ribbon 系列\"></a>1.1、Ribbon 系列</h5><h5 id=\"1-2、Feign-系列\"><a href=\"#1-2、Feign-系列\" class=\"headerlink\" title=\"1.2、Feign 系列\"></a>1.2、Feign 系列</h5><h5 id=\"1-3、容器框架比较\"><a href=\"#1-3、容器框架比较\" class=\"headerlink\" title=\"1.3、容器框架比较\"></a>1.3、容器框架比较</h5><div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-29.png\" alt=\"image-20210819161344297\" style=\"zoom:80%;\" />\n</div>\n\n\n\n<h4 id=\"11、规则持久化\"><a href=\"#11、规则持久化\" class=\"headerlink\" title=\"11、规则持久化\"></a>11、规则持久化</h4><hr/>\n\n<p><strong>Push模式：</strong> 客户端通过注册监听器的方式时刻监听变化，比如使用Nacos、Zookeeper等配置中心，这种方式保证了很好的实时性和一致性，生产环境中一般采用push模式。我们用Nacos实现</p>\n<p>1、添加sentinel-datasource-nacos依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;sentinel-datasource-nacos&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>2、配置持久化数据源</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">server:\n  port: 8401\n\nspring:\n  application:\n    name: cloudalibaba-sentinel-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848 #Nacos服务注册中心地址\n    sentinel:\n      transport:\n        dashboard: localhost:8080 #配置Sentinel dashboard地址\n        port: 8719\n      datasource:\n        ds1:\n          nacos:\n            server-addr: localhost:8848\n            dataId: cloudalibaba-sentinel-service\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: &#39;*&#39;</code></pre>\n\n<p>3、在Nacos中手动添加配置文件,这里的配置文件取的就是和本地配置文件相同格式</p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-31.png\" alt=\"image-20210819161829450\" style=\"zoom:80%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">[\n    &#123;\n        &quot;clusterMode&quot;:false,\n        &quot;controlBehavior&quot;:0,\n        &quot;count&quot;:2,\n        &quot;grade&quot;:1,\n        &quot;limitApp&quot;:&quot;default&quot;,\n        &quot;maxQueueingTimeMs&quot;:500,\n        &quot;resource&quot;:&quot;&#x2F;test&quot;,\n        &quot;strategy&quot;:0,\n        &quot;warmUpPeriodSec&quot;:10\n    &#125;\n]</code></pre>\n\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/sentinel-32.png\" alt=\"image-20210819162043964\" style=\"zoom:80%;\" />\n\n<p>push模式目前还有缺点，Nacos修改配置文件后可同步到Sentinel，但是在Sentinel中修改配置后无法同步到Nacos，需要手动去同步数据。</p>\n","text":"01、Sentinel 简介 1.1、官方文档GitHub：https://github.com/alibaba/Sentinel 中文：https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D 1.2、Sentine...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/categories/SpringCloud-Alibaba.json"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/tags/SpringCloud-Alibaba.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#01%E3%80%81Sentinel-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">01、Sentinel 简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">1.1、官方文档</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81Sentinel-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1.2、Sentinel 是什么</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Sentinel-%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">1.3、Sentinel 的特征</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Sentinel-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1.3、Sentinel 的主要特性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81Sentinel-%E7%9A%84%E5%BC%80%E6%BA%90%E7%94%9F%E6%80%81\"><span class=\"toc-text\">1.4、Sentinel 的开源生态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-5%E3%80%81%E4%B8%8B%E8%BD%BD%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">1.5、下载及使用地址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6%E3%80%81%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.6、服务使用中的各种问题</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#02%E3%80%81%E5%AE%89%E8%A3%85%E6%8E%A7%E5%88%B6%E5%8F%B0\"><span class=\"toc-text\">02、安装控制台</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">1.1、下载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">1.2、运行</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">1.3、访问</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#03%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BC%94%E7%A4%BA%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">03、初始化演示过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%90%AF%E5%8A%A8-Nacos\"><span class=\"toc-text\">1.1、启动 Nacos</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E5%88%9B%E5%BB%BA-Module\"><span class=\"toc-text\">1.2、创建 Module</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E5%90%AF%E5%8A%A8-Sentinel-8080\"><span class=\"toc-text\">1.3、启动 Sentinel 8080</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E5%90%AF%E5%8A%A8-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85-8401\"><span class=\"toc-text\">1.4、启动 服务提供者 8401</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-5%E3%80%81%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0\"><span class=\"toc-text\">1.5、查看控制台</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#04%E3%80%81%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99\"><span class=\"toc-text\">04、流控规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.1、基本介绍</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E6%B5%81%E6%8E%A7%E6%A8%A1%E5%BC%8F-%E2%80%93-%E7%9B%B4%E6%8E%A5\"><span class=\"toc-text\">1.2、流控模式 – 直接</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E6%B5%81%E6%8E%A7%E6%A8%A1%E5%BC%8F-%E2%80%93-%E5%85%B3%E8%81%94\"><span class=\"toc-text\">1.3、流控模式 – 关联</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E6%B5%81%E6%8E%A7%E6%A8%A1%E5%BC%8F-%E2%80%93-%E9%93%BE%E8%B7%AF\"><span class=\"toc-text\">1.4、流控模式 – 链路</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#05%E3%80%81%E6%B5%81%E6%8E%A7%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">05、流控效果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5\"><span class=\"toc-text\">1.1、快速失败</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81Warm-Up\"><span class=\"toc-text\">1.2、Warm Up</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85\"><span class=\"toc-text\">1.3、排队等待</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#06%E3%80%81%E9%99%8D%E7%BA%A7%E8%A7%84%E5%88%99\"><span class=\"toc-text\">06、降级规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%AE%98%E7%BD%91%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1、官网概述</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E7%86%94%E6%96%AD%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">1.2、熔断策略</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#07%E3%80%81%E7%83%AD%E7%82%B9%E8%A7%84%E5%88%99\"><span class=\"toc-text\">07、热点规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#08%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%99\"><span class=\"toc-text\">08、系统规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#09%E3%80%81-SentinelResource\"><span class=\"toc-text\">09、@SentinelResource</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E6%8C%89%E8%B5%84%E6%BA%90%E5%90%8D%E7%A7%B0%E9%99%90%E6%B5%81-%E5%90%8E%E7%BB%AD%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.1、按资源名称限流+后续处理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E6%8C%89-Url-%E5%9C%B0%E5%9D%80%E9%99%90%E6%B5%81-%E5%90%8E%E7%BB%AD%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.2、按 Url 地址限流+后续处理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E5%AE%A2%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">1.3、客户自定义限流处理逻辑</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E6%9B%B4%E5%A4%9A%E6%B3%A8%E8%A7%A3%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">1.4、更多注解属性说明</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10%E3%80%81%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">10、服务熔断功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81Ribbon-%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">1.1、Ribbon 系列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81Feign-%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">1.2、Feign 系列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E5%AE%B9%E5%99%A8%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">1.3、容器框架比较</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11%E3%80%81%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">11、规则持久化</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"你好\thexo","uid":"28f9cbb3f87fb083ac5744977081fb5c","slug":"你好 hexo !","date":"2021-09-13T14:28:32.000Z","updated":"2021-09-14T15:55:21.732Z","comments":true,"path":"api/articles/你好 hexo !.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:13-50.jpg","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Mac终端","slug":"Mac终端","count":3,"path":"api/tags/Mac终端.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"feature":true},"next_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"74-Docker","date":"2021-09-13T15:49:32.000Z","updated":"2021-09-15T10:46:04.049Z","comments":true,"path":"api/articles/74-Docker.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog2.jpg","text":"简介 本文将整体介绍一下如何使用安装docker、获取docker资源、使用docker获得MySQL、redis等中间件服务并快速搭建，以及管理和使用这些中间件服务，docker容器和宿主机如何交互、如何构建我们自己的服务镜像等等。 本文内容有 我们为啥要用docker？ 管理...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}