{"title":"Dubbo Zookeeper","uid":"6cf45a5bd6abd2bbf495c5388d2d047e","slug":"55-Dubbo Zookeeper","date":"2021-09-13T15:32:32.000Z","updated":"2021-09-15T10:50:00.083Z","comments":true,"path":"api/articles/55-Dubbo Zookeeper.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog9.jpg","content":"<h4 id=\"basketball-软件架构的发展过程\"><a href=\"#basketball-软件架构的发展过程\" class=\"headerlink\" title=\":basketball: 软件架构的发展过程\"></a>:basketball: 软件架构的发展过程</h4><hr>\n<h4 id=\"①-单体架构\"><a href=\"#①-单体架构\" class=\"headerlink\" title=\"① 单体架构\"></a>① 单体架构</h4><p>一个归档包（例如war格式或者Jar格式）包含了应用所有功能的应用程序，我们通常称之为单体应用。架构单体应用的方法论，我们称之</p>\n<p>为单体应用架构，这是一种比较传统的架构风格。</p>\n<p>1. 架构说明：全部功能集中在一个项目内（All in one）。</p>\n<p>2. 架构优点：架构简单，前期开发成本低、开发周期短，适合小型项目。</p>\n<p>3. 架构缺点：复杂性高，技术债务逐渐上升，部署速度逐渐变慢，扩展能力受限，无法按需伸缩，阻碍技术创新</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">① 复杂性高\n\n\t 整个项目包含的模块非常多，模块的边界模糊，依赖关系不清晰，代码质量参差不齐,整个项目非常复杂。每次修改代码都心惊胆战，甚至添加一个简单的功能，或者修改一个BUG都会造成隐含的缺陷。\n\n② 技术债务逐渐上升\n\n\t 随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务，并且越积越多。已使用的系统设计或代码难以修改，因为应用程序的其他模块可能会以意料之外的方式使用它。\n\n③ 部署速度逐渐变慢\n\n\t 随着代码的增加，构建和部署的时间也会增加。而在单体应用中，每次功能的变更或缺陷的修复都会导致我们需要重新部署整个应用。全量部署的方式耗时长、影响范围大、风险高，这使得单体应用项目上线部署的频率较低，从而又导致两次发布之间会有大量功能变更和缺陷修复，出错概率较高。\n\n④ 扩展能力受限，无法按需伸缩\n\n \t单体应用只能作为一个整体进行扩展，无法结合业务模块的特点进行伸缩。\n \t\n⑤ 阻碍技术创新\n\n\t 单体应用往往使用统一的技术平台或方案解决所有问题，团队的每个成员都必须使用相同的开发语言和架构，想要引入新的框架或技术平台非常困难。</code></pre>\n\n<p>4. 总结</p>\n<p>​    全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p>\n<p>​    技术栈受限，只能使用一种语言开发。</p>\n<p>​    系统性能扩展只能通过扩展集群节点，成本高。</p>\n<h4 id=\"②-垂直架构\"><a href=\"#②-垂直架构\" class=\"headerlink\" title=\"② 垂直架构\"></a>② 垂直架构</h4><p>1. 架构说明：</p>\n<p>​    按照业务进行切割，形成小的单体项目。</p>\n<p>​    垂直MVC项目主要有表现层，业务逻辑层，数据访问层组成的MVC架构，整个项目打包放在一个tomcat里面。适合于 访问量小，用户数不多的业务。</p>\n<p>2. 架构优点</p>\n<p>​    技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p>\n<p>3. 架构缺点：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">① 这是一个大而全的项目，项目的部署效率很低，代码全量编译和部署一次发布需要很长时间，更重要的是 如果某个功能出错有问题，所有的功能都需要再重新打包编译，部署效率极低。\n\n ② 团队协作难度高，如多人使用 git 很可能在同一个功能上，多人同时进行了修改，作为一个大而全的项目，可能个人只是需要开发其中一个小的模块的需求，却需要导入整个项目全量的代码。</code></pre>\n\n<p>4. 总结</p>\n<p>​    功能集中在一个项目中，不利于开发、扩展、维护。</p>\n<p>​    系统扩张只能通过集群的方式。</p>\n<p>​    项目之间功能冗余、数据冗余、耦合性强。</p>\n<h4 id=\"③-SOA架构\"><a href=\"#③-SOA架构\" class=\"headerlink\" title=\"③ SOA架构\"></a>③ SOA架构</h4><p>SOA 全称为 Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p>\n<p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p>\n<p>1. 架构说明</p>\n<p>​    将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p>\n<p>2. ESB</p>\n<p>​    简单 来说 ESB 就是一根管道，用来连接各个服务节点。为了集 成不同系统，不同协议的服务，ESB 做了消息的转化解释和路由工作，让不同的服务互联互通；</p>\n<p>3. 架构优点</p>\n<p>​    重复功能或模块抽取为服务，提高开发效率。可重用性高，可维护性高。</p>\n<p>4. 架构缺点</p>\n<p>​    各系统之间业务不同，很难确认功能或模块是重复的。</p>\n<p>​    抽取服务的粒度大。</p>\n<p>​    系统和服务之间耦合度高。</p>\n<h4 id=\"④-微服务架构\"><a href=\"#④-微服务架构\" class=\"headerlink\" title=\"④ 微服务架构\"></a>④ 微服务架构</h4><p>1. 微服务架构</p>\n<p>其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</p>\n<p>2. 架构说明</p>\n<p>​    将系统服务层完全独立出来，抽取为一个一个的微服务。</p>\n<p>​    抽取的粒度更细，遵循单一原则。</p>\n<p>​    采用轻量级框架协议传输。</p>\n<p>3. API 服务网关</p>\n<p>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。</p>\n<p>4. 架构优点</p>\n<p>​    服务拆分粒度更细，有利于提高开发效率。</p>\n<p>​    可以针对不同服务制定对应的优化方案。</p>\n<p>​    适用于互联网时代，产品迭代周期更短。</p>\n<p>5. 架构缺点</p>\n<p>​    粒度太细导致服务太多，维护成本高。</p>\n<p>​    分布式系统开发的技术成本高，对团队的挑战大。</p>\n<h4 id=\"basketball-dubbo-概述\"><a href=\"#basketball-dubbo-概述\" class=\"headerlink\" title=\":basketball: dubbo 概述\"></a>:basketball: dubbo 概述</h4><hr>\n<h4 id=\"①-dubbo简介\"><a href=\"#①-dubbo简介\" class=\"headerlink\" title=\"① dubbo简介\"></a>① dubbo简介</h4><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>\n<h4 id=\"②-RPC是什么\"><a href=\"#②-RPC是什么\" class=\"headerlink\" title=\"② RPC是什么\"></a>② RPC是什么</h4><p>RPC全称为remote procedure call，即<strong>远程过程调用</strong>，对标的是 本地过程调用。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-rpc-1.image\" alt=\"img\"></p>\n<p>简单的说本机上内部的方法调用都可以称为本地过程调用，而远程过程调用实际上就指的是你本地调用了远程机子上的某个方法，这就是远程过程调用。</p>\n<p>比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p>\n<p>==需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。==</p>\n<p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p>\n<h4 id=\"③-dubbo架构\"><a href=\"#③-dubbo架构\" class=\"headerlink\" title=\"③ dubbo架构\"></a>③ dubbo架构</h4><p>==Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。==</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-architecture.png\" alt=\"architecture\" style=\"zoom:45%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-architecture-2.png\" alt=\"architecture\" style=\"zoom: 65%;\" />\n</div>\n\n<p>虚线都是异步访问，实线都是同步访问            蓝色虚线:在启动时完成的功能        红色虚线(实线)都是程序运行过程中执行的功能</p>\n<p><strong>调用关系说明：</strong></p>\n<ol start=\"0\">\n<li>服务容器负责启动，加载，运行服务提供者。</li>\n<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>\n<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>\n<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n<li>服务消费者，从提供者地址列表中，基于负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>\n</ol>\n<h4 id=\"basketball-服务注册中心zookeeper\"><a href=\"#basketball-服务注册中心zookeeper\" class=\"headerlink\" title=\":basketball: 服务注册中心zookeeper\"></a>:basketball: 服务注册中心zookeeper</h4><hr>\n<h4 id=\"①-zookeeper简介\"><a href=\"#①-zookeeper简介\" class=\"headerlink\" title=\"① zookeeper简介\"></a>① zookeeper简介</h4><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p>\n<p>Zookeeper 是 Apache Hadoop 的子项目，是一个<strong>树型的目录服务，支持变更推送</strong>，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>树形目录服务</strong>：我们电脑的文件系统(也是一个树型目录结构</p></blockquote>\n<p>ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>原语：</strong> 操作系统或计算机网络用语范畴。是由若干条指令组成的，用于完成一定功能的一个过程。具有不可分割性·即原语的执行必须是连续的，在执行过程中不允许被中断。</p></blockquote>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/zookeeper-tree-1.png\" alt=\"image-20210725151226698\" style=\"zoom: 85%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/zookeeper-tree-2.png\" alt=\"image-20210725151506149\" style=\"zoom: 67%;\" />\n</div>\n\n<p><strong>流程说明：</strong></p>\n<ul>\n<li>服务提供者(Provider)启动时: 向 /dubbo/com.foo.BarService/providers 目录下写入自己的 URL 地址</li>\n<li>服务消费者(Consumer)启动时: 订阅 /dubbo/com.foo.BarService/providers 目录下的提供者 URL 地址。并向 /dubbo/com.foo.BarService/consumers 目录下写入自己的 URL 地址</li>\n<li>监控中心(Monitor)启动时: 订阅 /dubbo/com.foo.BarService 目录下的所有提供者和消费者 URL 地址</li>\n</ul>\n<h4 id=\"②-zookeeper安装（win）\"><a href=\"#②-zookeeper安装（win）\" class=\"headerlink\" title=\"② zookeeper安装（win）\"></a>② zookeeper安装（win）</h4><p><a href=\"https://archive.apache.org/dist/zookeeper/\">下载 zookeeper 压缩包</a> </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin ---&gt; 包括了linux和window的运行程序的运行目录\nconf ---&gt; zookeeper的配置zoo.cfg\ncontrib ---&gt; 其他一些组件和发行版本\ndist-maven ---&gt; maven发布下的一些jar包\ndocs ---&gt; 文档\nlib ---&gt; 库\nrecipe ---&gt; 一些应用实例\nsrc ---&gt; zookeeper的源码，因为zookeeper是java写出来的</code></pre>\n\n<p>Zookeeper在Windows下启动只需要运行zkServer.cmd双击即可（需保证运行环境中正确安装了Java运行环境）</p>\n<p>但是在有的时候会出现双击闪退的情况。针对闪退，可按照以下步骤进行解决：</p>\n<p>1. 编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。例如原因如下：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/zookeeper-install-4.png\" alt=\"image-20210725152924045\"></p>\n<p>2. 重新双击运行zkServer.cmd（错误原因 ，找不到zoo.cfg配置文件）</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/zookeeper-install-3.png\" alt=\"image-20210725152841489\"></p>\n<p>3. 在conf目录中复制一份 zoo_sample.cfg 文件，起名为zoo.cfg</p>\n<p>4. 打开zoo.cfg文件，修改dataDir属性值，在上级目录下增加data目录</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/zookeeper-install-5.png\" alt=\"image-20210725153354996\"></p>\n<p>5. 重新双击启动就行了</p>\n<h4 id=\"③-zookeeper安装（linux）\"><a href=\"#③-zookeeper安装（linux）\" class=\"headerlink\" title=\"③ zookeeper安装（linux）\"></a>③ zookeeper安装（linux）</h4><h4 id=\"④-zookeeper详解（了解）\"><a href=\"#④-zookeeper详解（了解）\" class=\"headerlink\" title=\"④ zookeeper详解（了解）\"></a>④ zookeeper详解（了解）</h4><p><a href=\"https://juejin.cn/post/6919487002417037319\">https://juejin.cn/post/6919487002417037319</a></p>\n<p><a href=\"https://juejin.cn/post/6844904045283377165\">https://juejin.cn/post/6844904045283377165</a></p>\n<p><a href=\"https://juejin.cn/post/6844903677367418893\">https://juejin.cn/post/6844903677367418893</a></p>\n<h4 id=\"basketball-dubbo入门\"><a href=\"#basketball-dubbo入门\" class=\"headerlink\" title=\":basketball: dubbo入门\"></a>:basketball: dubbo入门</h4><hr>\n<p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p>\n<h4 id=\"①-服务提供方开发\"><a href=\"#①-服务提供方开发\" class=\"headerlink\" title=\"① 服务提供方开发\"></a>① 服务提供方开发</h4><p>1. 创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;\n&lt;properties&gt;\n  &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;\n  &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;\n  &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;\n  &lt;spring.version&gt;5.0.5.RELEASE&lt;&#x2F;spring.version&gt;\n&lt;&#x2F;properties&gt;\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-jms&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-context-support&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;!-- dubbo相关 --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;dubbo&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.0&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.4.7&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.github.sgroschupf&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;zkclient&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.1&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;javassist&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;javassist&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.12.1.GA&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.47&lt;&#x2F;version&gt;\n  &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;\n&lt;build&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;2.3.2&lt;&#x2F;version&gt;\n      &lt;configuration&gt;\n        &lt;source&gt;1.8&lt;&#x2F;source&gt;\n        &lt;target&gt;1.8&lt;&#x2F;target&gt;\n      &lt;&#x2F;configuration&gt;\n    &lt;&#x2F;plugin&gt;\n    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;\n      &lt;configuration&gt;\n        &lt;!-- 指定端口 --&gt;\n        &lt;port&gt;8081&lt;&#x2F;port&gt;\n        &lt;!-- 请求路径 --&gt;\n        &lt;path&gt;&#x2F;&lt;&#x2F;path&gt;\n      &lt;&#x2F;configuration&gt;\n    &lt;&#x2F;plugin&gt;\n  &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>2. 配置web.xml文件<br>创建 webapp/WEB-INF/web.xml</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;\n         version&#x3D;&quot;3.1&quot;&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;classpath:applicationContext*.xml&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;context-param&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;\n    &lt;&#x2F;listener&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>3. 创建服务接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.service;\npublic interface HelloService &#123;\n    public String sayHello(String name);\n&#125;</code></pre>\n\n<p>4. 创建服务实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.service.impl;\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.atguigu.service.HelloService;\n@Service\npublic class HelloServiceImpl implements HelloService &#123;\n    @Override\n    public String sayHello(String name) &#123;\n        return &quot;hello &quot; + name;\n    &#125;\n&#125;</code></pre>\n\n<p>==注意：服务实现类上使用的 Service 注解是Dubbo提供的，用于对外发布服务==<br>5. 在src/main/resources下创建 applicationContext-service.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:dubbo&#x3D;&quot;http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n\t\thttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd\n         http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo\n         http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&#x2F;dubbo.xsd\n         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n    &lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;\n    &lt;dubbo:application name&#x3D;&quot;dubbodemo_provider&quot; &#x2F;&gt;\n    &lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;\n    &lt;dubbo:registry address&#x3D;&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;&#x2F;&gt;\n    &lt;!-- 注册  协议和port   端口默认是20880 --&gt;\n    &lt;dubbo:protocol name&#x3D;&quot;dubbo&quot; port&#x3D;&quot;20881&quot;&gt;&lt;&#x2F;dubbo:protocol&gt;\n    &lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;\n    &lt;dubbo:annotation package&#x3D;&quot;com.atguigu.service.impl&quot; &#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>（6）启动服务</p>\n<h4 id=\"②-服务消费方开发\"><a href=\"#②-服务消费方开发\" class=\"headerlink\" title=\"② 服务消费方开发\"></a>② 服务消费方开发</h4><p>1. 创建 maven 工程（打包方式为war）dubbodemo_consumer，pom.xml 配置和上面服务提供者相同，只需要将 Tomcat 插件的端口号改为8082即可</p>\n<p>3. 配置web/WEB-INF/web.xml文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;\n         version&#x3D;&quot;3.1&quot;&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n        &lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:applicationContext-web.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>3. 将服务提供者工程中的HelloService接口复制到当前工程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.service;\npublic interface HelloService &#123;\n    public String sayHello(String name);\n&#125;</code></pre>\n\n<p>4. 编写Controller</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.atguigu.service.HelloService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n@Controller\n@RequestMapping(&quot;&#x2F;demo&quot;)\npublic class HelloController &#123;\n    @Reference\n    private HelloService helloService;\n\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    @ResponseBody\n    public String getName(String name)&#123;\n        &#x2F;&#x2F;远程调用\n        String result &#x3D; helloService.sayHello(name);\n        System.out.println(result);\n        return result;\n    &#125;\n\n&#125;</code></pre>\n\n<p>==注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解==<br>5. 在src/main/resources下创建applicationContext-web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:dubbo&#x3D;&quot;http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd\n                           http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo\n                           http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&#x2F;dubbo.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n    &lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;\n    &lt;dubbo:application name&#x3D;&quot;dubbodemo-consumer&quot; &#x2F;&gt;\n    &lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;\n    &lt;dubbo:registry address&#x3D;&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;&#x2F;&gt;\n    &lt;!-- 扫描的方式暴露接口  --&gt;\n    &lt;dubbo:annotation package&#x3D;&quot;com.atguigu.controller&quot; &#x2F;&gt;\n    &lt;!-- 运行dubbo不检查提供者是否提前开启  --&gt;\n    &lt;!-- &lt;dubbo:consumer check&#x3D;&quot;false&quot;&gt;&lt;&#x2F;dubbo:consumer&gt; --&gt;\n\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>6. 运行测试<br>在浏览器输入<a href=\"http://localhost:8082/demo/hello?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C\">http://localhost:8082/demo/hello?name=Jack，查看浏览器输出结果</a></p>\n<h4 id=\"③-思考（进行优化）\"><a href=\"#③-思考（进行优化）\" class=\"headerlink\" title=\"③ 思考（进行优化）\"></a>③ 思考（进行优化）</h4><p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p>\n<p>答：这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是<strong>单独创建一个maven工程</strong>，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要<strong>在自己工程的pom.xml文件中引入maven坐标</strong>即可。</p>\n<p><strong>思考二</strong>：在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p>\n<p>答：==Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。==</p>\n<p><strong>思考三</strong>：上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p>\n<p>答：Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>点单故障：通常分布式系统采用主从模式，一个主机连接多个处理节点，主节点负责分发任务，而子节点负责处理业务，当主节点发生故障时，会导致整个系统发故障，我们把这种故障叫做单点故障。</p></blockquote>\n<h4 id=\"④-代码重构\"><a href=\"#④-代码重构\" class=\"headerlink\" title=\"④ 代码重构\"></a>④ 代码重构</h4><p>1. 创建项目：dubbodemo_interface</p>\n<p>2. 把 项目dubbodemo_consumer 和 项目dubbodemo_provider当中的 接口 HelloService 拷贝到dubbodemo_interface工程里面</p>\n<p>3. 删除工程dubbodemo_consumer 和 工程dubbodemo_provider当中的 接口 HelloService</p>\n<p>4. dubbodemo_consumer 工程和dubbodemo_provider添加pom文件的依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n\n  &lt;groupId&gt;com.atguigu&lt;&#x2F;groupId&gt;\n\n  &lt;artifactId&gt;dubbodemo_interface&lt;&#x2F;artifactId&gt;\n\n  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>5. 运行程序：<a href=\"http://localhost:8082/demo/hello?name=haha\">http://localhost:8082/demo/hello?name=haha</a></p>\n<h4 id=\"⑤-加入log4j-日志\"><a href=\"#⑤-加入log4j-日志\" class=\"headerlink\" title=\"⑤ 加入log4j 日志\"></a>⑤ 加入log4j 日志</h4><p>运行程序发现dubbo建议大家使用 log4j日志，我们就需要在 resources 文件夹下面引入log4j.properties日志文件</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">### direct log messages to stdout ###\n\nlog4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target&#x3D;System.err\nlog4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n\n\n### direct messages to file mylog.log ###\n\nlog4j.appender.file&#x3D;org.apache.log4j.FileAppender\nlog4j.appender.file.File&#x3D;c:\\\\mylog.log\nlog4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n\n\n### set log levels - for more verbose logging change &#39;info&#39; to &#39;debug&#39; ###\n\nlog4j.rootLogger&#x3D;debug, stdout</code></pre>\n\n\n\n<h4 id=\"basketball-dubbo相关配置说明\"><a href=\"#basketball-dubbo相关配置说明\" class=\"headerlink\" title=\":basketball: dubbo相关配置说明\"></a>:basketball: dubbo相关配置说明</h4><hr>\n<h4 id=\"①-包扫描\"><a href=\"#①-包扫描\" class=\"headerlink\" title=\"① 包扫描\"></a>① 包扫描</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dubbo:annotation package&#x3D;&quot;com.atguigu.service&quot; &#x2F;&gt;</code></pre>\n\n<p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。<br>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;helloService&quot; class&#x3D;&quot;com.atguigu.service.impl.HelloServiceImpl&quot; &#x2F;&gt;\n&lt;dubbo:service interface&#x3D;&quot;com.atguigu.api.HelloService&quot; ref&#x3D;&quot;helloService&quot; &#x2F;&gt;</code></pre>\n\n<p>作为服务消费者，可以通过如下配置来引用服务：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;\n&lt;dubbo:reference id&#x3D;&quot;helloService&quot; interface&#x3D;&quot;com.atguigu.api.HelloService&quot; &#x2F;&gt;</code></pre>\n\n<p>上面这种方式发布和引用服务，一个配置项(<a href=\"dubbo:service\">dubbo:service</a>、<a href=\"dubbo:reference\">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。<strong>推荐使用包扫描方式</strong>。</p>\n<h4 id=\"②-协议\"><a href=\"#②-协议\" class=\"headerlink\" title=\"② 协议\"></a>② 协议</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dubbo:protocol name&#x3D;&quot;dubbo&quot; port&#x3D;&quot;20880&quot;&#x2F;&gt;</code></pre>\n\n<p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。<br>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。<br>推荐使用的是dubbo协议。<br>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。<br>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 多协议配置 --&gt;\n&lt;dubbo:protocol name&#x3D;&quot;dubbo&quot; port&#x3D;&quot;20880&quot; &#x2F;&gt;\n&lt;dubbo:protocol name&#x3D;&quot;rmi&quot; port&#x3D;&quot;1099&quot; &#x2F;&gt;\n&lt;!-- 使用dubbo协议暴露服务 --&gt;\n&lt;dubbo:service interface&#x3D;&quot;com.atguigu.service.HelloService&quot; ref&#x3D;&quot;helloService&quot; protocol&#x3D;&quot;dubbo&quot; &#x2F;&gt;\n&lt;!-- 使用rmi协议暴露服务 --&gt;\n&lt;dubbo:service interface&#x3D;&quot;com.atguigu.service.DemoService&quot; ref&#x3D;&quot;demoService&quot; protocol&#x3D;&quot;rmi&quot; &#x2F;&gt; </code></pre>\n\n<h4 id=\"③-启动时检查\"><a href=\"#③-启动时检查\" class=\"headerlink\" title=\"③ 启动时检查\"></a>③ 启动时检查</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dubbo:consumer check&#x3D;&quot;false&quot;&#x2F;&gt;</code></pre>\n\n<p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。<br><strong>建议在开发阶段将check值设置为false，在生产环境下改为true。</strong></p>\n<h4 id=\"basketball-dubbo控制台管理\"><a href=\"#basketball-dubbo控制台管理\" class=\"headerlink\" title=\":basketball: dubbo控制台管理\"></a>:basketball: dubbo控制台管理</h4><hr>\n<p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p>\n<h4 id=\"①-安装\"><a href=\"#①-安装\" class=\"headerlink\" title=\"① 安装\"></a>① 安装</h4><p>1. 下载dubbo-admin-2.6.0.war文件到tomcat的webapps目录下</p>\n<p>2. 启动tomcat，此war文件会自动解压</p>\n<p>3. 修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;192.168.134.129:2181\n\ndubbo.admin.root.password&#x3D;root\n\ndubbo.admin.guest.password&#x3D;guest</code></pre>\n\n<p>4. 重启tomcat</p>\n<h4 id=\"②-使用\"><a href=\"#②-使用\" class=\"headerlink\" title=\"② 使用\"></a>② 使用</h4><p>1. 开启tomcat</p>\n<p>2. 访问<a href=\"http://localhost:8080/dubbo-admin-2.6.0/\">http://localhost:8080/dubbo-admin-2.6.0/</a> ，输入用户名(root)和密码(root),切换简体中文</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-manager.png\" alt=\"image-20210725161524204\"></p>\n<p>3. 启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-manager-2.png\" alt=\"image-20210725161633565\"></p>\n<h4 id=\"basketball-Dubbo无法发布被事务代理的Service问题\"><a href=\"#basketball-Dubbo无法发布被事务代理的Service问题\" class=\"headerlink\" title=\":basketball: Dubbo无法发布被事务代理的Service问题\"></a>:basketball: Dubbo无法发布被事务代理的Service问题</h4><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p>\n<p>但是我们如果在服务提供者类上<strong>加入@Transactional事务控制注解后，服务就发布不成功了</strong>。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（<strong>最后两位数字不是固定的</strong>），导致Dubbo在<strong>发布服务前进行包匹配时无法完成匹配</strong>，进而没有进行服务的发布。</p>\n<h4 id=\"①-问题展示\"><a href=\"#①-问题展示\" class=\"headerlink\" title=\"① 问题展示\"></a>① 问题展示</h4><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示，操作步骤如下：<br>1. 在pom.xml文件中增加maven坐标</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.1.47&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.1.6&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>2. 在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:dubbo&#x3D;&quot;http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot; xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd\n                           http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo\n                           http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&#x2F;dubbo.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;\n    &lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;\n    &lt;dubbo:application name&#x3D;&quot;dubbodemo_provider&quot; &#x2F;&gt;\n    &lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;\n    &lt;dubbo:registry address&#x3D;&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;&#x2F;&gt;\n    &lt;!-- 注册  协议和port   端口默认是20880 --&gt;\n    &lt;dubbo:protocol name&#x3D;&quot;dubbo&quot; port&#x3D;&quot;20882&quot;&gt;&lt;&#x2F;dubbo:protocol&gt;\n    &lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;\n    &lt;dubbo:annotation package&#x3D;&quot;com.atguigu.service.impl&quot; &#x2F;&gt;\n    &lt;!--数据源--&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot; destroy-method&#x3D;&quot;close&quot;&gt;\n        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 事务管理器  --&gt;\n    &lt;bean id&#x3D;&quot;transactionManager&quot;\n          class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!--开启事务控制的注解支持--&gt;\n    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>上面连接的数据库可以自行创建<br>3. 在HelloServiceImpl类上加入@Transactional注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.service.impl;\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.atguigu.service.HelloService;\nimport org.springframework.transaction.annotation.Transactional;\n@Service\n@Transactional\npublic class HelloServiceImpl implements HelloService &#123;\n    @Override\n    public String sayHello(String name) &#123;\n        return &quot;8086 hello &quot; + name;\n    &#125;\n&#125;</code></pre>\n\n<p>4. 启动服务提供者和服务消费者，并访问</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-transactional.png\" alt=\"image-20210725162201698\"></p>\n<p><strong>上面的错误为没有可用的服务提供者</strong></p>\n<p>5. 查看dubbo管理控制台发现服务并没有发布</p>\n<p>6. 可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dubbo-transactional-2.png\" alt=\"image-20210725162343960\"></p>\n<h4 id=\"②-解决方案\"><a href=\"#②-解决方案\" class=\"headerlink\" title=\"② 解决方案\"></a>② 解决方案</h4><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.atguigu.service），所以后面真正发布服务的代码没有执行。解决方式操作步骤如下：<br>1. 修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象，添加如下配置：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--开启事务控制的注解支持--&gt;\n&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot; proxy-target-class&#x3D;&quot;true&quot;&#x2F;&gt;</code></pre>\n\n<p>2. 修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.service.impl;\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.atguigu.service.HelloService;\nimport org.springframework.transaction.annotation.Transactional;\n@Service(interfaceClass &#x3D; HelloService.class)\n@Transactional\npublic class HelloServiceImpl implements HelloService &#123;\n    @Override\n    public String sayHello(String name) &#123;\n        return &quot;8086 hello &quot; + name;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"basketball-一些运行过程\"><a href=\"#basketball-一些运行过程\" class=\"headerlink\" title=\":basketball: 一些运行过程\"></a>:basketball: 一些运行过程</h4><hr>\n<h4 id=\"①-消费者过程\"><a href=\"#①-消费者过程\" class=\"headerlink\" title=\"① 消费者过程\"></a>① 消费者过程</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/cubbo-customer.image\" alt=\"img\"></p>\n<p>首先消费者启动会向注册中心拉取服务提供者的元信息，然后调用流程也是从 Proxy 开始，毕竟都需要代理才能无感知。</p>\n<p>Proxy 持有一个 Invoker 对象，调用 invoke 之后需要通过 Cluster 先从 Directory 获取所有可调用的远程服务的 Invoker 列表，如果配置了某些路由规则，比如某个接口只能调用某个节点的那就再过滤一遍 Invoker 列表。</p>\n<p>剩下的 Invoker 再通过 LoadBalance 做负载均衡选取一个。然后再经过 Filter 做一些统计什么的，再通过 Client 做数据传输，比如用 Netty 来传输。</p>\n<p>传输需要经过 Codec 接口做协议构造，再序列化。最终发往对应的服务提供者。</p>\n<p>服务提供者接收到之后也会进行 Codec 协议处理，然后反序列化后将请求扔到线程池处理。某个线程会根据请求找到对应的 Exporter ，而找到 Exporter 其实就是找到了 Invoker，但是还会有一层层 Filter，经过一层层过滤链之后最终调用实现类然后原路返回结果。</p>\n<p>完成整个调用过程！</p>\n","text":":basketball: 软件架构的发展过程 ① 单体架构一个归档包（例如war格式或者Jar格式）包含了应用所有功能的应用程序，我们通常称之为单体应用。架构单体应用的方法论，我们称之 为单体应用架构，这是一种比较传统的架构风格。 1. 架构说明：全部功能集中在一个项目内（All...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"微服务","slug":"微服务","count":1,"path":"api/categories/微服务.json"}],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">:basketball: 软件架构的发展过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">① 单体架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%9E%82%E7%9B%B4%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">② 垂直架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-SOA%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">③ SOA架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">④ 微服务架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-dubbo-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">:basketball: dubbo 概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-dubbo%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">① dubbo简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-RPC%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">② RPC是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-dubbo%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">③ dubbo架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83zookeeper\"><span class=\"toc-text\">:basketball: 服务注册中心zookeeper</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-zookeeper%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">① zookeeper简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-zookeeper%E5%AE%89%E8%A3%85%EF%BC%88win%EF%BC%89\"><span class=\"toc-text\">② zookeeper安装（win）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-zookeeper%E5%AE%89%E8%A3%85%EF%BC%88linux%EF%BC%89\"><span class=\"toc-text\">③ zookeeper安装（linux）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-zookeeper%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">④ zookeeper详解（了解）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-dubbo%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">:basketball: dubbo入门</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E6%96%B9%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">① 服务提供方开发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">② 服务消费方开发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%80%9D%E8%80%83%EF%BC%88%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%EF%BC%89\"><span class=\"toc-text\">③ 思考（进行优化）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84\"><span class=\"toc-text\">④ 代码重构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E5%8A%A0%E5%85%A5log4j-%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">⑤ 加入log4j 日志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-dubbo%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">:basketball: dubbo相关配置说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%8C%85%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">① 包扫描</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">② 协议</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%90%AF%E5%8A%A8%E6%97%B6%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">③ 启动时检查</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-dubbo%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">:basketball: dubbo控制台管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">① 安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">② 使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-Dubbo%E6%97%A0%E6%B3%95%E5%8F%91%E5%B8%83%E8%A2%AB%E4%BA%8B%E5%8A%A1%E4%BB%A3%E7%90%86%E7%9A%84Service%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">:basketball: Dubbo无法发布被事务代理的Service问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E9%97%AE%E9%A2%98%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">① 问题展示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">② 解决方案</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#basketball-%E4%B8%80%E4%BA%9B%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">:basketball: 一些运行过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">① 消费者过程</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Quartz 定时任务","uid":"4ce484ce04054bf7a1c2a1b718c83b71","slug":"56-Quartz-定时任务","date":"2021-09-13T15:33:32.000Z","updated":"2021-09-15T10:48:39.069Z","comments":true,"path":"api/articles/56-Quartz-定时任务.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog8.jpg","text":":articulated_lorry: Quartz 简介 ① Quartz是什么Quartz是Job scheduling（作业调度）领域的一个开源项目，Quartz既可以单独使用也可以跟spring框架整合使用，在实际开发中一般会使用后者。使用Quartz可以开发一个或者多个...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"定时任务","slug":"定时任务","count":1,"path":"api/categories/定时任务.json"}],"tags":[{"name":"定时任务","slug":"定时任务","count":1,"path":"api/tags/定时任务.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"SpringMVC 源码分析","uid":"39dbbffa03a8d8ee66fd7af853996d07","slug":"54-SpringMVC-源码分析","date":"2021-09-13T15:31:32.000Z","updated":"2021-09-15T10:57:19.403Z","comments":true,"path":"api/articles/54-SpringMVC-源码分析.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog8.jpg","text":":green_book: SpringMVC 运行原理① 总体情形 用户发送请求至DispatcherServlet。 DispatcherServlet收到请求调用HandlerMapping查询具体的Handler。 HandlerMapping找到具体的处理器(具体配置的是...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}