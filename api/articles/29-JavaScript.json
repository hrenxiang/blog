{"title":"Javascript 简单总结","uid":"423214af91a95c0f0996d8a59fd1a243","slug":"29-JavaScript","date":"2021-09-13T15:06:32.000Z","updated":"2021-09-15T10:25:22.059Z","comments":true,"path":"api/articles/29-JavaScript.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"1-JavaScript的起源\"><a href=\"#1-JavaScript的起源\" class=\"headerlink\" title=\"1. JavaScript的起源\"></a>1. JavaScript的起源</h3><p>在<span style=\"color:blue;font-weight:bold;\">1995</span>年时，由<span style=\"color:blue;font-weight:bold;\">Netscape</span>公司的<span style=\"color:blue;font-weight:bold;\">Brendan Eich</span>，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript，因为Netscape与Sun合作，网景公司管理层希望蹭Java的热度，因此取名为JavaScript。</p>\n<p>JavaScript总共分成三部分: ECMAScript(基本语法)、BOM(浏览器对象模型)、DOM(文档对象模型)</p>\n<h3 id=\"2-JavaScript的特性\"><a href=\"#2-JavaScript的特性\" class=\"headerlink\" title=\"2. JavaScript的特性\"></a>2. JavaScript的特性</h3><h4 id=\"2-1-脚本语言\"><a href=\"#2-1-脚本语言\" class=\"headerlink\" title=\"2.1 脚本语言\"></a>2.1 脚本语言</h4><p>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行,    JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。</p>\n<h4 id=\"2-2-基于对象\"><a href=\"#2-2-基于对象\" class=\"headerlink\" title=\"2.2 基于对象\"></a>2.2 基于对象</h4><p>JavaScript是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。但是面向对象的三大特性：『封装』、『继承』、『多态』中，JavaScript能够实现封装，可以模拟继承，不支持多态，所以它不是一门面向对象的编程语言。</p>\n<h4 id=\"2-3-弱类型\"><a href=\"#2-3-弱类型\" class=\"headerlink\" title=\"2.3 弱类型\"></a>2.3 弱类型</h4><p>JavaScript中也有明确的数据类型，但是声明一个变量后它可以接收任何类型的数据，并且会在程序执行过程中根据上下文自动转换类型。</p>\n<h4 id=\"2-4-事件驱动\"><a href=\"#2-4-事件驱动\" class=\"headerlink\" title=\"2.4 事件驱动\"></a>2.4 事件驱动</h4><p>JavaScript是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。</p>\n<h4 id=\"2-5-跨平台性\"><a href=\"#2-5-跨平台性\" class=\"headerlink\" title=\"2.5 跨平台性\"></a>2.5 跨平台性</h4><p>JavaScript脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支持JavaScript脚本语言。目前JavaScript已被大多数的浏览器所支持。</p>\n<h3 id=\"3-入门程序\"><a href=\"#3-入门程序\" class=\"headerlink\" title=\"3. 入门程序\"></a>3. 入门程序</h3><p><strong>功能效果图</strong></p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/js1.png\" style=\"zoom:50%;\" />\n\n<p><strong>代码实现</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;JS的入门程序&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;!-- 在HTML代码中定义一个按钮 --&gt;\n    &lt;button type&#x3D;&quot;button&quot; id&#x3D;&quot;helloBtn&quot;&gt;SayHello&lt;&#x2F;button&gt;\n    &lt;!--\n        目标: 点击按钮的时候弹出一个警告框\n    --&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        &#x2F;&#x2F;1. 通过js代码获取到按钮对象\n        &#x2F;&#x2F;document代表当前HTML文档\n        var btn &#x3D; document.getElementById(&quot;helloBtn&quot;);\n\n        &#x2F;&#x2F;2. 给获取到的btn对象绑定点击事件\n        btn.onclick &#x3D; function () &#123;\n            &#x2F;&#x2F;弹出警告框\n            alert(&quot;hello world&quot;)\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-JavaScript的基本语法\"><a href=\"#4-JavaScript的基本语法\" class=\"headerlink\" title=\"4. JavaScript的基本语法\"></a>4. JavaScript的基本语法</h3><h4 id=\"4-1-JavaScript的引入方式\"><a href=\"#4-1-JavaScript的引入方式\" class=\"headerlink\" title=\"4.1 JavaScript的引入方式\"></a>4.1 JavaScript的引入方式</h4><h5 id=\"4-1-1-内部脚本方式\"><a href=\"#4-1-1-内部脚本方式\" class=\"headerlink\" title=\"4.1.1 内部脚本方式\"></a>4.1.1 内部脚本方式</h5><ul>\n<li>JavaScript代码要写在script标签内</li>\n<li>script标签可以写在文档内的任意位置</li>\n<li>为了能够方便查询或操作HTML标签（元素）script标签可以写在body标签后面</li>\n</ul>\n<p>在我们的入门程序中使用的就是内部脚本方式引入的JavaScript</p>\n<h5 id=\"4-1-2-外部脚本方式\"><a href=\"#4-1-2-外部脚本方式\" class=\"headerlink\" title=\"4.1.2 外部脚本方式\"></a>4.1.2 外部脚本方式</h5><p>在script标签内通过src属性指定外部xxx.js文件的路径即可。但是要注意以下两点：</p>\n<ul>\n<li>引用外部JavaScript文件的script标签里面不能写JavaScript代码</li>\n<li>先引入，再使用</li>\n<li>script标签不能写成单标签</li>\n</ul>\n<h5 id=\"4-1-3-js在html中的引入位置\"><a href=\"#4-1-3-js在html中的引入位置\" class=\"headerlink\" title=\"4.1.3 js在html中的引入位置\"></a>4.1.3 js在html中的引入位置</h5><p>具体将引入的JS放在哪里与代码执行的顺序有关。网页文件的读取是从上到下的，如果将JavaScript文件放置在head当中，会先加载JS文件，之后再继续执行，那么此时，==如果JS文件比较大，页面加载就会比较慢，导致空白==。</p>\n<p>那么，如果将JavaScript文件放置在底部，如果说，也是比较大型的JS文件的话，是不是就没有问题了呢？</p>\n<p>其实，如果将JS文件放置在底部的话，可以让JS文件与图片几乎同时下载，使得页面当中的内容能够尽快的下载下来，但是，由于网页基本结构与样式均已经加载完成，那么此时负责交互的JS并没有下载下来，必然也会对用户的体验造成影响。</p>\n<p>==因此，整体来说，如果“交互性优先”，那么我们应当将JS放置在顶部。如果对于交互性要求没那么高的页面，我们将JS放置在底部。==</p>\n<p>引入方式如下</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;JS的引入方式&lt;&#x2F;title&gt;\n    &lt;!--\n        建议在head中引入外部的js文件\n    --&gt;\n    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;outer.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n    &lt;!--\n        第一种引入方式: 内部引入方式，在HTML文档内部，通过script标签去编写js代码\n    --&gt;\n    &lt;!--\n        第二种引入方式: 外部引入方式，在当前项目中创建一个js文件，然后在需要引入的HTML里面使用script标签引入\n        一个script标签要么负责编写内部的js代码，要么负责引入外部的js文件\n    --&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        &#x2F;&#x2F;调用外部js文件中的方法\n        showMessage()\n        alert(&quot;hello world&quot;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"4-2-声明和使用变量\"><a href=\"#4-2-声明和使用变量\" class=\"headerlink\" title=\"4.2 声明和使用变量\"></a>4.2 声明和使用变量</h4><h5 id=\"4-2-1-JavaScript数据类型\"><a href=\"#4-2-1-JavaScript数据类型\" class=\"headerlink\" title=\"4.2.1 JavaScript数据类型\"></a>4.2.1 JavaScript数据类型</h5><ul>\n<li><p>基本数据类型</p>\n<ul>\n<li><p>数值型number：JavaScript不区分整数、小数</p>\n</li>\n<li><p>字符串string：JavaScript不区分字符、字符串；单引号、双引号意思一样。</p>\n</li>\n<li><p>布尔型boolean：true、false</p>\n<p>在JavaScript中，其他类型和布尔类型的自动转换。</p>\n<p>true：非零的数值，非空字符串，非空对象</p>\n<p>false：零，空字符串，null，undefined </p>\n<p>例如：”false”放在if判断中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; &quot;false&quot;是一个非空字符串，直接放在if判断中会被当作『真』处理\nif(&quot;false&quot;)&#123;\n\talert(&quot;true&quot;);\n&#125;else&#123;\n\talert(&quot;false&quot;);\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p>引用类型</p>\n<ul>\n<li>所有new出来的对象</li>\n<li>用[]声明的数组</li>\n<li>用{}声明的对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-2-2-变量\"><a href=\"#4-2-2-变量\" class=\"headerlink\" title=\"4.2.2 变量\"></a>4.2.2 变量</h5><ul>\n<li><p>==关键字：var,其实ECMAScript6之后建议使用let==   </p>\n<ul>\n<li>var和let定义后都不需要立即赋值，但const声明变量后就要赋值</li>\n<li>let和const都是块级元素，在自己的花括号内有用</li>\n<li>var一般用来在方法外定义全局变量</li>\n</ul>\n</li>\n<li><p>数据类型：JavaScript变量是弱类型的，可以接收任意类型的数据</p>\n</li>\n<li><p>标识符：严格区分大小写</p>\n</li>\n<li><p>变量使用规则</p>\n<ul>\n<li><p>如果使用了一个没有声明的变量，那么会在运行时报错</p>\n<p>Uncaught ReferenceError: b is not defined</p>\n</li>\n<li><p>如果声明一个变量没有初始化，那么这个变量的值就是undefined</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-3-函数-重点\"><a href=\"#4-3-函数-重点\" class=\"headerlink\" title=\"4.3 函数(重点)\"></a>4.3 函数(重点)</h4><h5 id=\"4-3-1-内置函数\"><a href=\"#4-3-1-内置函数\" class=\"headerlink\" title=\"4.3.1 内置函数\"></a>4.3.1 内置函数</h5><p>内置函数就是JavaScript中内置好的函数，我们可以直接使用</p>\n<ul>\n<li>弹出警告框</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">alert(&quot;警告框内容&quot;);</code></pre>\n\n<ul>\n<li>弹出确认框</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var result &#x3D; confirm(&quot;确定要删除吗？&quot;);\nif(result) &#123;\n    &#x2F;&#x2F; 执行删除\n&#125;</code></pre>\n\n<p>用户点击『确定』返回true，点击『取消』返回false</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var result &#x3D; confirm(&quot;老板，你真的不加个钟吗？&quot;);\nif(result) &#123;\n\tconsole.log(&quot;老板点了确定，表示要加钟&quot;);\n&#125;else&#123;\n\tconsole.log(&quot;老板点了确定，表示不加钟&quot;);\n&#125;</code></pre>\n\n<ul>\n<li>在控制台打印日志</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&quot;日志内容&quot;);</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/console.png\" alt=\"images\"></p>\n<h5 id=\"4-3-2-声明函数\"><a href=\"#4-3-2-声明函数\" class=\"headerlink\" title=\"4.3.2 声明函数\"></a>4.3.2 声明函数</h5><p>声明函数就是使用者自己定义一个函数，它有两种写法:</p>\n<p>写法1：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(a, b) &#123;\n    return a+b;\n&#125;</code></pre>\n\n<p>写法2：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var total &#x3D; function() &#123;\n    return a+b;\n&#125;;</code></pre>\n\n<p>写法2可以这样解读：声明一个函数，相当于创建了一个『函数对象』，将这个对象的『引用』赋值给变量total。如果不给这个对象赋值，我们可以将其作为匿名函数使用(在后续学习内容中会用到)</p>\n<h5 id=\"4-3-3-调用函数\"><a href=\"#4-3-3-调用函数\" class=\"headerlink\" title=\"4.3.3 调用函数\"></a>4.3.3 调用函数</h5><p>JavaScript中函数本身就是一种对象，函数名就是这个<span style=\"color:blue;font-weight:bold;\">『对象』</span>的<span style=\"color:blue;font-weight:bold;\">『引用』</span>。而调用函数的格式是：<span style=\"color:blue;font-weight:bold;\">函数引用()</span>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(a, b) &#123;\n    return a+b;\n&#125;\n\nvar result &#x3D; sum(2, 3);\nconsole.log(&quot;result&#x3D;&quot;+result);</code></pre>\n\n<p>或：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var total &#x3D; function() &#123;\n    return a+b;\n&#125;\n\nvar totalResult &#x3D; total(3,6);\nconsole.log(&quot;totalResult&#x3D;&quot;+totalResult);</code></pre>\n\n<h4 id=\"4-4-对象-重点\"><a href=\"#4-4-对象-重点\" class=\"headerlink\" title=\"4.4 对象(重点)\"></a>4.4 对象(重点)</h4><p>JavaScript中没有『类』的概念，对于系统内置的对象可以直接创建使用。</p>\n<h5 id=\"4-4-1-使用new关键字创建对象\"><a href=\"#4-4-1-使用new关键字创建对象\" class=\"headerlink\" title=\"4.4.1 使用new关键字创建对象\"></a>4.4.1 使用new关键字创建对象</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建对象\nvar obj01 &#x3D; new Object();\n\n&#x2F;&#x2F; 给对象设置属性和属性值\nobj01.stuName &#x3D; &quot;tom&quot;;\nobj01.stuAge &#x3D; 20;\nobj01.stuSubject &#x3D; &quot;java&quot;;\n\n&#x2F;&#x2F; 在控制台输出对象\nconsole.log(obj01);</code></pre>\n\n<h5 id=\"4-4-2-使用-创建对象-常用\"><a href=\"#4-4-2-使用-创建对象-常用\" class=\"headerlink\" title=\"4.4.2 使用{}创建对象(常用)\"></a>4.4.2 使用{}创建对象(常用)</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建对象\nvar obj02 &#x3D; &#123;\n    &quot;soldierName&quot;:&quot;john&quot;,\n    &quot;soldierAge&quot;:35,\n    &quot;soldierWeapon&quot;:&quot;gun&quot;\n&#125;;\n\n&#x2F;&#x2F; 在控制台输出对象\nconsole.log(obj02);</code></pre>\n\n<h5 id=\"4-4-3-给对象设置函数属性\"><a href=\"#4-4-3-给对象设置函数属性\" class=\"headerlink\" title=\"4.4.3 给对象设置函数属性\"></a>4.4.3 给对象设置函数属性</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建对象\nvar obj01 &#x3D; new Object();\n\n&#x2F;&#x2F; 给对象设置属性和属性值\nobj01.stuName &#x3D; &quot;tom&quot;;\nobj01.stuAge &#x3D; 20;\nobj01.stuSubject &#x3D; &quot;java&quot;;\n\nobj01.study &#x3D; function() &#123;\n\tconsole.log(this.stuName + &quot; is studying&quot;);\n&#125;;\n\n&#x2F;&#x2F; 在控制台输出对象\nconsole.log(obj01);\n&#x2F;&#x2F; 调用函数\nobj01.study();</code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建对象\nvar obj02 &#x3D; &#123;\n\t&quot;soldierName&quot;:&quot;john&quot;,\n\t&quot;soldierAge&quot;:35,\n\t&quot;soldierWeapon&quot;:&quot;gun&quot;,\n\t&quot;soldierShoot&quot;:function()&#123;\n\t\tconsole.log(this.soldierName + &quot; is using &quot; + this.soldierWeapon);\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F; 在控制台输出对象\nconsole.log(obj02);\n&#x2F;&#x2F; 调用函数\nobj02.soldierShoot();</code></pre>\n\n<h5 id=\"4-4-4-this关键字\"><a href=\"#4-4-4-this关键字\" class=\"headerlink\" title=\"4.4.4 this关键字\"></a>4.4.4 this关键字</h5><p>this关键字只有两种情况：</p>\n<ul>\n<li>在函数外面：this关键字指向window对象（代表当前浏览器窗口）</li>\n<li>在函数里面：this关键字指向调用函数的对象</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 直接打印this\nconsole.log(this);\n\n&#x2F;&#x2F; 函数中的this\n&#x2F;&#x2F; 1.声明函数\nfunction getName() &#123;\n\tconsole.log(this.name);\n&#125;\n\n&#x2F;&#x2F; 2.创建对象\nvar obj01 &#x3D; &#123;\n\t&quot;name&quot;:&quot;tom&quot;,\n\t&quot;getName&quot;:getName\n&#125;;\nvar obj02 &#x3D; &#123;\n\t&quot;name&quot;:&quot;jerry&quot;,\n\t&quot;getName&quot;:getName\n&#125;;\n\n&#x2F;&#x2F; 3.调用函数\nobj01.getName();\nobj02.getName();</code></pre>\n\n<h4 id=\"4-5-数组-重点\"><a href=\"#4-5-数组-重点\" class=\"headerlink\" title=\"4.5 数组(重点)\"></a>4.5 数组(重点)</h4><h5 id=\"4-5-1-使用new关键字创建数组\"><a href=\"#4-5-1-使用new关键字创建数组\" class=\"headerlink\" title=\"4.5.1 使用new关键字创建数组\"></a>4.5.1 使用new关键字创建数组</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1.创建数组对象\nvar arr01 &#x3D; new Array();\n\n&#x2F;&#x2F; 2.压入数据\narr01.push(&quot;apple&quot;);\narr01.push(&quot;orange&quot;);\narr01.push(&quot;banana&quot;);\narr01.push(&quot;grape&quot;);\n\n&#x2F;&#x2F; 3.遍历数组\nfor (var i &#x3D; 0; i &lt; arr01.length; i++) &#123;\n\tconsole.log(arr01[i]);\n&#125;\n\n&#x2F;&#x2F; 4.数组元素反序\narr01.reverse();\nfor (var i &#x3D; 0; i &lt; arr01.length; i++) &#123;\n\tconsole.log(arr01[i]);\n&#125;\n\n&#x2F;&#x2F; 5.数组元素拼接成字符串\nvar arrStr &#x3D; arr01.join(&quot;,&quot;);\nconsole.log(arrStr);\n\n&#x2F;&#x2F; 6.字符串拆分成数组\nvar arr02 &#x3D; arrStr.split(&quot;,&quot;);\nfor (var i &#x3D; 0; i &lt; arr02.length; i++) &#123;\n\tconsole.log(arr02[i]);\n&#125;\n\n&#x2F;&#x2F; 7.弹出数组中最后一个元素\nvar ele &#x3D; arr01.pop();\nconsole.log(ele);</code></pre>\n\n<h5 id=\"4-5-2-使用-创建数组-常用\"><a href=\"#4-5-2-使用-创建数组-常用\" class=\"headerlink\" title=\"4.5.2 使用[]创建数组(常用)\"></a>4.5.2 使用[]创建数组(常用)</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 8.使用[]创建数组\nvar arr03 &#x3D; [&quot;cat&quot;,&quot;dog&quot;,&quot;tiger&quot;];\nconsole.log(arr03);</code></pre>\n\n<h4 id=\"4-6-JSON-最重点\"><a href=\"#4-6-JSON-最重点\" class=\"headerlink\" title=\"4.6 JSON(最重点)\"></a>4.6 JSON(最重点)</h4><h5 id=\"4-6-1-JSON格式的用途\"><a href=\"#4-6-1-JSON格式的用途\" class=\"headerlink\" title=\"4.6.1 JSON格式的用途\"></a>4.6.1 JSON格式的用途</h5><p>在开发中凡是涉及到<span style=\"color:blue;font-weight:bold;\">『跨平台数据传输』</span>，JSON格式一定是首选。</p>\n<h5 id=\"4-6-2-JSON格式的说明\"><a href=\"#4-6-2-JSON格式的说明\" class=\"headerlink\" title=\"4.6.2 JSON格式的说明\"></a>4.6.2 JSON格式的说明</h5><ul>\n<li>JSON数据两端要么是<span style=\"color:blue;font-weight:bold;\">{}</span>，要么是<span style=\"color:blue;font-weight:bold;\">[]</span></li>\n<li><span style=\"color:blue;font-weight:bold;\">{}</span>定义JSON对象</li>\n<li><span style=\"color:blue;font-weight:bold;\">[]</span>定义JSON数组</li>\n<li>JSON对象的格式是：</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;key:value,key:value,...,key:value&#125;</code></pre>\n\n<ul>\n<li>JOSN数组的格式是：</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[value,value,...,value]</code></pre>\n\n<ul>\n<li>key的类型固定是字符串</li>\n<li>value的类型可以是：<ul>\n<li>基本数据类型</li>\n<li>引用类型：JSON对象或JSON数组</li>\n</ul>\n</li>\n</ul>\n<p>正因为JSON格式中value部分还可以继续使用JSON对象或JSON数组，所以JSON格式是可以<span style=\"color:blue;font-weight:bold;\">『多层嵌套』</span>的，所以JSON格式不论多么复杂的数据类型都可以表达。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#x2F;&#x2F;json的格式: &#123;key:value,key:value&#125;\nvar person1 &#x3D; &#123;\n    &quot;name&quot;:&quot;张三疯&quot;,\n    &quot;age&quot;:189,\n    &quot;address&quot;:&quot;武当山&quot;\n&#125;\n&#x2F;&#x2F;其实JSON对于前端而言，就是一个对象\n&#x2F;&#x2F;console.log(person1.name)\n\nvar person2 &#x3D; &#123;\n    &quot;name&quot;:&quot;张三疯&quot;,\n    &quot;age&quot;:189,\n    &quot;address&quot;:&quot;武当山&quot;,\n    &quot;wife&quot;:&#123;\n        &quot;name&quot;:&quot;小花&quot;,\n        &quot;age&quot;:18,\n        &quot;address&quot;:&quot;武当山下的小村庄&quot;\n    &#125;\n&#125;\n&#x2F;&#x2F;console.log(person2.wife.name)\n\nvar person3 &#x3D; &#123;\n    &quot;name&quot;:&quot;张三疯&quot;,\n    &quot;age&quot;:189,\n    &quot;address&quot;:&quot;武当山&quot;,\n    &quot;wife&quot;:&#123;\n        &quot;name&quot;:&quot;小花&quot;,\n        &quot;age&quot;:18,\n        &quot;address&quot;:&quot;武当山下的小村庄&quot;\n    &#125;,\n    &quot;sons&quot;:[\n        &#123;\n            &quot;name&quot;:&quot;奥巴马&quot;,\n            &quot;age&quot;:1,\n            &quot;address&quot;:&quot;武当山&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;:&quot;奥拉夫&quot;,\n            &quot;age&quot;:2,\n            &quot;address&quot;:&quot;少林寺&quot;\n        &#125;\n    ]\n&#125;\n\n&#x2F;&#x2F;json数组的格式: [&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;]\n&#x2F;&#x2F;var personList &#x3D; [person1,person2]</code></pre>\n\n<h5 id=\"4-6-3-JSON对象和JSON字符串互转\"><a href=\"#4-6-3-JSON对象和JSON字符串互转\" class=\"headerlink\" title=\"4.6.3 JSON对象和JSON字符串互转\"></a>4.6.3 JSON对象和JSON字符串互转</h5><ul>\n<li>JSON对象转JSON字符串</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var jsonObj &#x3D; &#123;&quot;stuName&quot;:&quot;tom&quot;,&quot;stuAge&quot;:20&#125;;\nvar jsonStr &#x3D; JSON.stringify(jsonObj);\n\nconsole.log(typeof jsonObj); &#x2F;&#x2F; object\nconsole.log(typeof jsonStr); &#x2F;&#x2F; string</code></pre>\n\n<ul>\n<li>JSON字符串转JSON对象</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">jsonObj &#x3D; JSON.parse(jsonStr);\nconsole.log(jsonObj); &#x2F;&#x2F; &#123;stuName: &quot;tom&quot;, stuAge: 20&#125;</code></pre>\n\n<h3 id=\"5-JavaScript的DOM-最重点\"><a href=\"#5-JavaScript的DOM-最重点\" class=\"headerlink\" title=\"5. JavaScript的DOM(最重点)\"></a>5. JavaScript的DOM(最重点)</h3><h4 id=\"5-1-DOM的概念\"><a href=\"#5-1-DOM的概念\" class=\"headerlink\" title=\"5.1 DOM的概念\"></a>5.1 DOM的概念</h4><p>DOM是<span style=\"color:blue;font-weight:bold;\">D</span>ocument <span style=\"color:blue;font-weight:bold;\">O</span>bject  <span style=\"color:blue;font-weight:bold;\">M</span>odel的缩写，意思是<span style=\"color:blue;font-weight:bold;\">『文档对象模型』</span>——将HTML文档抽象成模型，再封装成对象方便用程序操作。</p>\n<p>这是一种非常常用的编程思想：将现实世界的事物抽象成模型，这样就非常容易使用对象来量化的描述现实事物，从而把生活中的问题转化成一个程序问题，最终实现用应用软件协助解决现实问题。而在这其中<span style=\"color:blue;font-weight:bold;\">『模型』</span>就是那个连通现实世界和代码世界的桥梁。</p>\n<h4 id=\"5-2-DOM树的概念\"><a href=\"#5-2-DOM树的概念\" class=\"headerlink\" title=\"5.2 DOM树的概念\"></a>5.2 DOM树的概念</h4><p>浏览器把HTML文档从服务器上下载下来之后就开始按照<span style=\"color:blue;font-weight:bold;\">『从上到下』</span>的顺序<span style=\"color:blue;font-weight:bold;\">『读取HTML标签』</span>。每一个标签都会被封装成一个<span style=\"color:blue;font-weight:bold;\">『对象』</span>。</p>\n<p>而第一个读取到的肯定是根标签html，然后是它的子标签head，再然后是head标签里的子标签……所以从html标签开始，整个文档中的所有标签都会根据它们之间的<span style=\"color:blue;font-weight:bold;\">『父子关系』</span>被放到一个<span style=\"color:blue;font-weight:bold;\">『树形结构』</span>的对象中。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/dom.png\" alt=\"images\"></p>\n<p>这个包含了所有标签对象的整个树形结构对象就是JavaScript中的一个<span style=\"color:blue;font-weight:bold;\">可以直接使用的内置对象</span>：<span style=\"color:blue;font-weight:bold;\">document</span>。</p>\n<p>例如，下面的标签结构：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/js-5.2.4.png\" alt=\"img004\"></p>\n<p>会被解析为：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/js-5.2.5.png\" alt=\"img005\"></p>\n<h4 id=\"5-3-各个组成部分的类型\"><a href=\"#5-3-各个组成部分的类型\" class=\"headerlink\" title=\"5.3 各个组成部分的类型\"></a>5.3 各个组成部分的类型</h4><p>整个文档中的一切都可以看做Node。各个具体组成部分的具体类型可以看做Node类型的子类。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其实严格来说，JavaScript并不支持真正意义上的『继承』，这里我们借用Java中的『继承』概念，从逻辑上来帮助我们理解各个类型之间的关系。</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>节点类型</th>\n<th>具体类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>整个文档</td>\n<td>文档节点</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>HTML标签</td>\n<td>元素节点</td>\n<td>Element</td>\n</tr>\n<tr>\n<td>HTML标签内的文本</td>\n<td>文本节点</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>HTML标签内的属性</td>\n<td>属性节点</td>\n<td>Attr</td>\n</tr>\n<tr>\n<td>注释</td>\n<td>注释节点</td>\n<td>Comment</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-4-父子关系\"><a href=\"#5-4-父子关系\" class=\"headerlink\" title=\"5.4 父子关系\"></a>5.4 父子关系</h4><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB.png\" alt=\"images\" style=\"zoom:50%;\" />\n\n<h4 id=\"5-5-先辈后代关系\"><a href=\"#5-5-先辈后代关系\" class=\"headerlink\" title=\"5.5 先辈后代关系\"></a>5.5 先辈后代关系</h4><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/%E5%85%88%E8%BE%88%E5%90%8E%E4%BB%A3%E5%85%B3%E7%B3%BB.png\" alt=\"images\" style=\"zoom:50%;\" />\n\n<h4 id=\"5-6-DOM操作\"><a href=\"#5-6-DOM操作\" class=\"headerlink\" title=\"5.6 DOM操作\"></a>5.6 DOM操作</h4><p>由于实际开发时基本上都是使用JavaScript的各种框架来操作，而框架中的操作方式和我们现在看到的原生操作完全不同，所以下面罗列的API仅供参考，不做要求。</p>\n<h5 id=\"5-6-1-在整个文档范围内查询元素节点\"><a href=\"#5-6-1-在整个文档范围内查询元素节点\" class=\"headerlink\" title=\"5.6.1 在整个文档范围内查询元素节点\"></a>5.6.1 在整个文档范围内查询元素节点</h5><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>API</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>根据id值查询</td>\n<td>document.getElementById(“id值”)</td>\n<td>一个具体的元素节</td>\n</tr>\n<tr>\n<td>根据标签名查询</td>\n<td>document.getElementsByTagName(“标签名”)</td>\n<td>元素节点数组</td>\n</tr>\n<tr>\n<td>根据name属性值查询</td>\n<td>document.getElementsByName(“name值”)</td>\n<td>元素节点数组</td>\n</tr>\n<tr>\n<td>根据类名查询</td>\n<td>document.getElementsByClassName(“类名”)</td>\n<td>元素节点数组</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-6-2-在具体元素节点范围内查找子节点\"><a href=\"#5-6-2-在具体元素节点范围内查找子节点\" class=\"headerlink\" title=\"5.6.2 在具体元素节点范围内查找子节点\"></a>5.6.2 在具体元素节点范围内查找子节点</h5><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>API</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查找子标签</td>\n<td>element.children</td>\n<td>返回子标签数组</td>\n</tr>\n<tr>\n<td>查找第一个子标签</td>\n<td>element.firstElementChild<br />【W3C考虑换行，IE≤8不考虑】</td>\n<td>标签对象</td>\n</tr>\n<tr>\n<td>查找最后一个子标签</td>\n<td>element.lastElementChild<br />【W3C考虑换行，IE≤8不考虑】</td>\n<td>节点对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-6-3-查找指定元素节点的父节点\"><a href=\"#5-6-3-查找指定元素节点的父节点\" class=\"headerlink\" title=\"5.6.3 查找指定元素节点的父节点\"></a>5.6.3 查找指定元素节点的父节点</h5><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>API</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查找指定元素节点的父标签</td>\n<td>element.parentElement</td>\n<td>标签对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-6-4-查找指定元素节点的兄弟节点\"><a href=\"#5-6-4-查找指定元素节点的兄弟节点\" class=\"headerlink\" title=\"5.6.4 查找指定元素节点的兄弟节点\"></a>5.6.4 查找指定元素节点的兄弟节点</h5><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>API</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查找前一个兄弟标签</td>\n<td>node.previousElementSibling<br />【W3C考虑换行，IE≤8不考虑】</td>\n<td>标签对象</td>\n</tr>\n<tr>\n<td>查找后一个兄弟标签</td>\n<td>node.nextElementSibling<br />【W3C考虑换行，IE≤8不考虑】</td>\n<td>标签对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-6-5-扩展内容-根据选择器查找标签\"><a href=\"#5-6-5-扩展内容-根据选择器查找标签\" class=\"headerlink\" title=\"5.6.5 扩展内容(根据选择器查找标签)\"></a>5.6.5 扩展内容(根据选择器查找标签)</h5><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>API</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>根据选择器查找一个标签</td>\n<td>document.querySelector(“选择器”)</td>\n<td>标签对象</td>\n</tr>\n<tr>\n<td>根据选择器查找多个标签</td>\n<td>document.querySelectorAll(“选择器”)</td>\n<td>标签数组</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;DOM查找节点&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot;&gt;\n        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;c1&quot;&gt;\n        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;c1&quot;&gt;\n        &lt;div&gt;\n            &lt;div&gt;&lt;&#x2F;div&gt;\n            &lt;div&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n        &lt;script&gt;\n            &#x2F;&#x2F;根据id查询标签\n            var elementById &#x3D; document.getElementById(&quot;username&quot;);\n            &#x2F;&#x2F;console.log(elementById)\n            &#x2F;&#x2F;根据类名查询标签\n            var elementsByClassName &#x3D; document.getElementsByClassName(&quot;c1&quot;);\n            &#x2F;&#x2F;console.log(elementsByClassName)\n            &#x2F;&#x2F;根据标签名查询标签\n            var elementsByTagName &#x3D; document.getElementsByTagName(&quot;input&quot;);\n            &#x2F;&#x2F;console.log(elementsByTagName)\n\n            &#x2F;&#x2F;查找子节点: 查找body的所有子标签,要注意文本也属于子节点\n            &#x2F;*var childNodes &#x3D; document.getElementsByTagName(&quot;body&quot;)[0].childNodes;\n        console.log(childNodes)*&#x2F;\n\n            &#x2F;&#x2F;查找子标签: children\n            var children &#x3D; document.getElementsByTagName(&quot;body&quot;)[0].children;\n            &#x2F;&#x2F;console.log(children)\n\n            &#x2F;&#x2F;查找id为username的标签的父节点\n            var parentNode &#x3D; document.getElementById(&quot;username&quot;).parentNode;\n            &#x2F;&#x2F;console.log(parentNode)\n\n            &#x2F;&#x2F;查找id为username的标签的前一个兄弟标签\n            var previousElementSibling &#x3D; document.getElementById(&quot;username&quot;).previousElementSibling;\n            &#x2F;&#x2F;console.log(previousElementSibling)\n\n            &#x2F;&#x2F;查找id为username的标签的后一个兄弟标签\n            var nextElementSibling &#x3D; document.getElementById(&quot;username&quot;).nextElementSibling;\n            &#x2F;&#x2F;console.log(nextElementSibling)\n\n\n            &#x2F;&#x2F;根据选择器查找标签:document.querySelector(&quot;选择器&quot;)根据选择器查找一个标签, document.querySelectorAll(&quot;选择器&quot;)根据选择器查找多个标签\n            &#x2F;&#x2F;什么是选择器: 用于查找标签的一些表达式，其中最基本的三种选择器是:ID选择器、类选择器、标签选择器\n            &#x2F;&#x2F;选择器参考jQuery的文档\n            &#x2F;&#x2F;查找id为username的标签，使用的是id选择器\n            var ipt1 &#x3D; document.querySelector(&quot;#username&quot;);\n\n            &#x2F;&#x2F;console.log(ipt1)\n            &#x2F;&#x2F;查找body内的所有后代div，用的是层级选择器\n            var ipts &#x3D; document.querySelectorAll(&quot;body div&quot;);\n\n            &#x2F;&#x2F;查找id为username的标签的后面第一个兄弟\n            var i1 &#x3D; document.querySelector(&quot;#username+input&quot;);\n\n            &#x2F;&#x2F;查找id为username的标签的后面的所有兄弟\n            var i2 &#x3D; document.querySelectorAll(&quot;#username~input&quot;);\n\n            console.log(i2)\n        &lt;&#x2F;script&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h6 id=\"5-6-5-1-属性操作\"><a href=\"#5-6-5-1-属性操作\" class=\"headerlink\" title=\"5.6.5.1 属性操作\"></a>5.6.5.1 属性操作</h6><table>\n<thead>\n<tr>\n<th>需求</th>\n<th>操作方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读取属性值</td>\n<td>元素对象.属性名</td>\n</tr>\n<tr>\n<td>修改属性值</td>\n<td>元素对象.属性名=新的属性值</td>\n</tr>\n</tbody></table>\n<h6 id=\"5-6-5-2-标签体的操作\"><a href=\"#5-6-5-2-标签体的操作\" class=\"headerlink\" title=\"5.6.5.2 标签体的操作\"></a>5.6.5.2 标签体的操作</h6><table>\n<thead>\n<tr>\n<th>需求</th>\n<th>操作方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>获取或者设置标签体的文本内容</td>\n<td>element.innerText</td>\n</tr>\n<tr>\n<td>获取或者设置标签体的内容</td>\n<td>element.innerHTML</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;操作标签的属性和文本&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;\n        &lt;div id&#x3D;&quot;d1&quot;&gt;\n            &lt;h1&gt;你好世界&lt;&#x2F;h1&gt;\n        &lt;&#x2F;div&gt;\n        &lt;script&gt;\n            &#x2F;&#x2F;目标: 获取id为username的输入框的value\n            &#x2F;&#x2F;1. 找到要操作的标签\n            var ipt &#x3D; document.getElementById(&quot;username&quot;);\n\n            &#x2F;&#x2F;2. 设置标签的value属性值\n            ipt.value &#x3D; &quot;张三&quot;\n\n            &#x2F;&#x2F;3. 获取标签的value属性的值\n            var value &#x3D; ipt.value;\n            console.log(value)\n\n            &#x2F;&#x2F;获取id为d1的div中的文本内容\n            &#x2F;&#x2F;获取标签的文本: element.innerText,获取文本的时候会将左右两端的空格去掉\n            var innerText &#x3D; document.getElementById(&quot;d1&quot;).innerText;\n            console.log(innerText)\n\n            &#x2F;&#x2F;获取标签体的内容: element.innerHTML,获取标签体的内容\n            var innerHTML &#x3D; document.getElementById(&quot;d1&quot;).innerHTML;\n            console.log(innerHTML)\n\n            &#x2F;&#x2F;设置标签体的内容:建议使用innerHTML，如果是使用innerText的话它会将标签当做普通文本处理\n            document.getElementById(&quot;d1&quot;).innerHTML &#x3D; &quot;&lt;h1&gt;hello world&lt;&#x2F;h1&gt;&quot;\n        &lt;&#x2F;script&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h6 id=\"5-6-5-3-DOM增删改操作\"><a href=\"#5-6-5-3-DOM增删改操作\" class=\"headerlink\" title=\"5.6.5.3 DOM增删改操作\"></a>5.6.5.3 DOM增删改操作</h6><table>\n<thead>\n<tr>\n<th>API</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>document.createElement(“标签名”)</td>\n<td>创建元素节点并返回，但不会自动添加到文档中</td>\n</tr>\n<tr>\n<td>document.createTextNode(“文本值”)</td>\n<td>创建文本节点并返回，但不会自动添加到文档中</td>\n</tr>\n<tr>\n<td>element.appendChild(ele)</td>\n<td>将ele添加到element所有子节点后面</td>\n</tr>\n<tr>\n<td>parentEle.insertBefore(newEle,targetEle)</td>\n<td>将newEle插入到targetEle前面</td>\n</tr>\n<tr>\n<td>parentEle.replaceChild(newEle, oldEle)</td>\n<td>用新节点替换原有的旧子节点</td>\n</tr>\n<tr>\n<td>element.remove()</td>\n<td>删除某个标签</td>\n</tr>\n<tr>\n<td>element.innerHTML</td>\n<td>读写HTML代码</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;创建和删除标签&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n        &lt;ul id&#x3D;&quot;city&quot;&gt;\n            &lt;li id&#x3D;&quot;bj&quot;&gt;北京&lt;&#x2F;li&gt;\n            &lt;li id&#x3D;&quot;sh&quot;&gt;上海&lt;&#x2F;li&gt;\n            &lt;li id&#x3D;&quot;sz&quot;&gt;深圳&lt;&#x2F;li&gt;\n            &lt;li id&#x3D;&quot;gz&quot;&gt;广州&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n        &lt;script&gt;\n            &#x2F;&#x2F;目标1: 在城市列表的最后添加一个子标签 &lt;li id&#x3D;&quot;cs&quot;&gt;长沙&lt;&#x2F;li&gt;\n            &#x2F;&#x2F;1. 创建一个li标签  &lt;li&gt;&lt;&#x2F;li&gt;\n            var liElement &#x3D; document.createElement(&quot;li&quot;);\n            &#x2F;&#x2F;2. 给创建的li标签设置id属性和文本 &lt;li id&#x3D;&quot;cs&quot;&gt;长沙&lt;&#x2F;li&gt;\n            liElement.id &#x3D; &quot;cs&quot;\n            liElement.innerText &#x3D; &quot;长沙&quot;\n            &#x2F;&#x2F;3. 将创建的li标签添加到城市列表中（ul）\n            var cityUl &#x3D; document.getElementById(&quot;city&quot;);\n\n            &#x2F;&#x2F;父.appendChild(子)将子标签添加到父标签的最后面\n            &#x2F;&#x2F;cityUl.appendChild(liElement)\n\n            &#x2F;&#x2F;目标2:在城市列表的深圳之前添加一个子标签 &lt;li id&#x3D;&quot;cs&quot;&gt;长沙&lt;&#x2F;li&gt;\n            &#x2F;&#x2F;获取到深圳这个标签\n            var szElement &#x3D; document.getElementById(&quot;sz&quot;);\n            &#x2F;&#x2F;父.insertBefore(新标签,参照标签)\n            &#x2F;&#x2F;cityUl.insertBefore(liElement,szElement)\n\n            &#x2F;&#x2F;目标3: 在城市列表中添加一个子标签替换深圳 &lt;li id&#x3D;&quot;cs&quot;&gt;长沙&lt;&#x2F;li&gt;\n            &#x2F;&#x2F;父.replaceChild(新标签,被替换的标签)\n            &#x2F;&#x2F;cityUl.replaceChild(liElement,szElement)\n\n            &#x2F;&#x2F;目标4: 在城市列表中删除深圳\n            &#x2F;&#x2F;szElement.remove()\n\n            &#x2F;&#x2F;目标5: 清除城市列表中的所有城市,保留城市列表标签ul\n            cityUl.innerHTML &#x3D; &quot;&quot;\n        &lt;&#x2F;script&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"5-7-DOM文档加载步骤：\"><a href=\"#5-7-DOM文档加载步骤：\" class=\"headerlink\" title=\"5.7 DOM文档加载步骤：\"></a>5.7 DOM文档加载步骤：</h4><ol>\n<li>解析html结构；</li>\n<li>加载外部脚本和样式表文件；</li>\n<li>解析并执行脚本；</li>\n<li>dom树构建完成（触发DOMContentLoaded和 jquery ready事件）；</li>\n<li>加载图片等外部文件；（会触发图片load事件）</li>\n<li>页面加载完毕。（触发load事件）</li>\n</ol>\n<p><strong>注意：</strong>凡是没有绑定加载事件(如：<code>window.onload</code>、<code>$(document).ready()</code>)的js文件中的代码，在本文件（代码）加载完成后<strong>立即解析执行</strong>。</p>\n<h3 id=\"6-事件驱动-很重要\"><a href=\"#6-事件驱动-很重要\" class=\"headerlink\" title=\"6 事件驱动(很重要)\"></a>6 事件驱动(很重要)</h3><h4 id=\"6-1-事件的概念\"><a href=\"#6-1-事件的概念\" class=\"headerlink\" title=\"6.1 事件的概念\"></a>6.1 事件的概念</h4><ul>\n<li>HTML 事件是发生在 HTML 元素上的“事情”， 是浏览器或用户做的某些事情</li>\n<li>事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。</li>\n</ul>\n<h4 id=\"6-2-常见事件\"><a href=\"#6-2-常见事件\" class=\"headerlink\" title=\"6.2 常见事件\"></a>6.2 常见事件</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>此事件发生在何时…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>当用户点击某个对象时调用的事件句柄。</td>\n</tr>\n<tr>\n<td>ondblclick</td>\n<td>当用户双击某个对象时调用的事件句柄。</td>\n</tr>\n<tr>\n<td>onchange</td>\n<td>域的内容被改变。</td>\n</tr>\n<tr>\n<td>onblur</td>\n<td>元素失去焦点。</td>\n</tr>\n<tr>\n<td>onfocus</td>\n<td>元素获得焦点。</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>一张页面或一幅图像完成加载。</td>\n</tr>\n<tr>\n<td>onsubmit</td>\n<td>确认按钮被点击；表单被提交。</td>\n</tr>\n<tr>\n<td>onkeydown</td>\n<td>某个键盘按键被按下。</td>\n</tr>\n<tr>\n<td>onkeypress</td>\n<td>某个键盘按键被按住。</td>\n</tr>\n<tr>\n<td>onkeyup</td>\n<td>某个键盘按键被松开。</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>鼠标按钮被按下。</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>鼠标按键被松开。</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>鼠标从某元素移开。</td>\n</tr>\n<tr>\n<td>omouseover</td>\n<td>鼠标移到某元素之上。</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标被移动。</td>\n</tr>\n</tbody></table>\n<h4 id=\"6-3-事件绑定的方式\"><a href=\"#6-3-事件绑定的方式\" class=\"headerlink\" title=\"6.3 事件绑定的方式\"></a>6.3 事件绑定的方式</h4><h5 id=\"6-3-1-普通函数方式\"><a href=\"#6-3-1-普通函数方式\" class=\"headerlink\" title=\"6.3.1 普通函数方式\"></a>6.3.1 普通函数方式</h5><p>说白了设置标签的属性</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;标签 属性&#x3D;&quot;js代码，调用函数&quot;&gt;&lt;&#x2F;标签&gt;</code></pre>\n\n<h5 id=\"6-3-2-匿名函数方式\"><a href=\"#6-3-2-匿名函数方式\" class=\"headerlink\" title=\"6.3.2 匿名函数方式\"></a>6.3.2 匿名函数方式</h5><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;script&gt;\n    标签对象.事件属性 &#x3D; function()&#123;\n        &#x2F;&#x2F;执行一段代码\n    &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h5 id=\"6-3-4-事件的使用介绍\"><a href=\"#6-3-4-事件的使用介绍\" class=\"headerlink\" title=\"6.3.4 事件的使用介绍\"></a>6.3.4 事件的使用介绍</h5><ul>\n<li><p>点击事件</p>\n<p>需求: 没点击一次按钮 弹出hello…</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; onclick&#x3D;&quot;fn1()&quot;&gt;\n\n    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;另一个按钮&quot; id&#x3D;&quot;btn&quot;&gt;\n        &lt;script&gt;\n        &#x2F;&#x2F;当点击的时候要调用的函数\n        function fn1() &#123;\n        alert(&quot;我被点击了...&quot;)\n    &#125;\n\n&#x2F;&#x2F;给另外一个按钮，绑定点击事件:\n&#x2F;&#x2F;1.先根据id获取标签\nlet btn &#x3D; document.getElementById(&quot;btn&quot;);\n&#x2F;&#x2F;2. 设置btn的onclick属性(绑定事件)\n&#x2F;&#x2F;绑定命名函数\n&#x2F;&#x2F;btn.onclick &#x3D; fn1\n\n&#x2F;&#x2F;绑定匿名函数\nbtn.onclick &#x3D; function () &#123;\n    console.log(&quot;点击了另外一个按钮&quot;)\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<ul>\n<li><p>获得焦点(onfocus)和失去焦点(onblur)</p>\n<p>需求:给输入框设置获得和失去焦点</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var ipt &#x3D; document.getElementById(&quot;ipt&quot;);\n\n&#x2F;&#x2F;绑定获取焦点事件\nipt.onfocus &#x3D; function () &#123;\n    console.log(&quot;获取焦点了...&quot;)\n&#125;\n\n&#x2F;&#x2F;绑定失去焦点事件\nipt.onblur &#x3D; function () &#123;\n    console.log(&quot;失去焦点了...&quot;)\n&#125;</code></pre>\n\n<ul>\n<li><p>内容改变(onchange)</p>\n<p>需求: 给select设置内容改变事件</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;body&gt;\n    &lt;!--内容改变(onchange)--&gt;\n    &lt;select onchange&#x3D;&quot;changeCity(this)&quot;&gt;\n        &lt;option value&#x3D;&quot;bj&quot;&gt;北京&lt;&#x2F;option&gt;\n        &lt;option value&#x3D;&quot;sh&quot;&gt;上海&lt;&#x2F;option&gt;\n        &lt;option value&#x3D;&quot;sz&quot;&gt;深圳&lt;&#x2F;option&gt;\n    &lt;&#x2F;select&gt;\n\n&lt;&#x2F;body&gt;\n&lt;script&gt;\n    function changeCity(obj) &#123;\n        console.log(&quot;城市改变了&quot;+obj.value);\n    &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<ul>\n<li>键盘相关的, 键盘按下(onkeydown)  键盘抬起(onkeyup)</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;给输入框绑定键盘按键按下和抬起事件\nipt.onkeydown &#x3D; function () &#123;\n    &#x2F;&#x2F;当按键按下的时候，数据并没有到达输入框\n    &#x2F;&#x2F;输出输入框里面的内容\n    &#x2F;&#x2F;console.log(ipt.value)\n&#125;\n\nipt.onkeyup &#x3D; function () &#123;\n    &#x2F;&#x2F;输出输入框的内容:当键盘按键抬起的时候，数据已经到达了输入框\n    console.log(ipt.value)\n&#125;</code></pre>\n\n<ul>\n<li>鼠标相关的, 鼠标在xx之上(onmouseover ), 鼠标按下(onmousedown),鼠标离开(onmouseout)</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;给输入框绑定鼠标移入事件\nipt.onmouseover &#x3D; function () &#123;\n    console.log(&quot;鼠标移入了...&quot;)\n&#125;\n&#x2F;&#x2F;给输入框绑定鼠标移出事件\nipt.onmouseout &#x3D; function () &#123;\n    console.log(&quot;鼠标移出了...&quot;)\n&#125;</code></pre>\n\n\n\n<h5 id=\"2-5-7-5-综合案例\"><a href=\"#2-5-7-5-综合案例\" class=\"headerlink\" title=\"2.5.7.5 综合案例\"></a>2.5.7.5 综合案例</h5><p><strong>需求</strong></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/js-2.5.75.png\" alt=\"img010\"></p>\n<p><strong>代码实现</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;综合案例&lt;&#x2F;title&gt;\n        &lt;style&gt;\n            table,tr,td,th&#123;\n                border: 1px solid black;\n                width: 500px;\n                text-align: center;\n                margin: auto;\n            &#125;\n\n            div&#123;\n                text-align: center;\n            &#125;\n        &lt;&#x2F;style&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n        &lt;table cellspacing&#x3D;&quot;0&quot; id&#x3D;&quot;tb&quot;&gt;\n            &lt;tr&gt;\n                &lt;th&gt;序号&lt;&#x2F;th&gt;\n                &lt;th&gt;用户名&lt;&#x2F;th&gt;\n                &lt;th&gt;性别&lt;&#x2F;th&gt;\n                &lt;th&gt;操作&lt;&#x2F;th&gt;\n            &lt;&#x2F;tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;&#x2F;td&gt;\n                &lt;td&gt;张三&lt;&#x2F;td&gt;\n                &lt;td&gt;男&lt;&#x2F;td&gt;\n                &lt;td&gt;\n                    &lt;button onclick&#x3D;&quot;deletePerson(this)&quot;&gt;删除&lt;&#x2F;button&gt;\n                &lt;&#x2F;td&gt;\n            &lt;&#x2F;tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;2&lt;&#x2F;td&gt;\n                &lt;td&gt;李四&lt;&#x2F;td&gt;\n                &lt;td&gt;女&lt;&#x2F;td&gt;\n                &lt;td&gt;\n                    &lt;button onclick&#x3D;&quot;deletePerson(this)&quot;&gt;删除&lt;&#x2F;button&gt;\n                &lt;&#x2F;td&gt;\n            &lt;&#x2F;tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;3&lt;&#x2F;td&gt;\n                &lt;td&gt;王五&lt;&#x2F;td&gt;\n                &lt;td&gt;男&lt;&#x2F;td&gt;\n                &lt;td&gt;\n                    &lt;button onclick&#x3D;&quot;deletePerson(this)&quot;&gt;删除&lt;&#x2F;button&gt;\n                &lt;&#x2F;td&gt;\n            &lt;&#x2F;tr&gt;\n        &lt;&#x2F;table&gt;\n        &lt;div&gt;\n            &lt;form action&#x3D;&quot;#&quot;&gt;\n                序号&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;num&quot; id&#x3D;&quot;num&quot;&gt;&lt;br&#x2F;&gt;\n                用户&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot;&#x2F;&gt;&lt;br&#x2F;&gt;\n                性别&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;gender&quot; id&#x3D;&quot;gender&quot;&#x2F;&gt;&lt;br&#x2F;&gt;\n                &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;添加用户&quot; onclick&#x3D;&quot;addPerson()&quot;&#x2F;&gt;\n            &lt;&#x2F;form&gt;\n        &lt;&#x2F;div&gt;\n        &lt;script&gt;\n            &#x2F;&#x2F;目标1:点击删除按钮，删除当前行\n            &#x2F;&#x2F;给所有按钮绑定点击事件\n            function deletePerson(obj) &#123;\n                &#x2F;&#x2F;此时obj就是你点击的那个按钮\n                &#x2F;&#x2F;我们要删除的就是obj的爷爷\n                obj.parentElement.parentElement.remove()\n            &#125;\n\n            function addPerson() &#123;\n                &#x2F;&#x2F;添加用户\n                &#x2F;&#x2F;1. 获取序号、用户名、性别\n                var numElement &#x3D; document.getElementById(&quot;num&quot;);\n                var num &#x3D; numElement.value;\n\n                var usernameElement &#x3D; document.getElementById(&quot;username&quot;);\n                var username &#x3D; usernameElement.value;\n\n                var genderElement &#x3D; document.getElementById(&quot;gender&quot;);\n                var gender &#x3D; genderElement.value;\n\n                &#x2F;&#x2F;2. 将获取到的序号、用户名、性别添加到td中，td放到tr中，tr添加到table中\n                &#x2F;&#x2F;2.1 创建一行  &lt;tr&gt;&lt;&#x2F;tr&gt;\n                var trElement &#x3D; document.createElement(&quot;tr&quot;);\n                &#x2F;&#x2F;2.2 往tr中添加标签体内容\n                trElement.innerHTML &#x3D; &quot;&lt;td&gt;&quot;+num+&quot;&lt;&#x2F;td&gt;\\n&quot; +\n                    &quot;            &lt;td&gt;&quot;+username+&quot;&lt;&#x2F;td&gt;\\n&quot; +\n                    &quot;            &lt;td&gt;&quot;+gender+&quot;&lt;&#x2F;td&gt;\\n&quot; +\n                    &quot;            &lt;td&gt;\\n&quot; +\n                    &quot;                &lt;button onclick&#x3D;\\&quot;deletePerson(this)\\&quot;&gt;删除&lt;&#x2F;button&gt;\\n&quot; +\n                    &quot;            &lt;&#x2F;td&gt;&quot;\n                &#x2F;&#x2F;2.3 将tr添加到表格中\n                var tb &#x3D; document.getElementById(&quot;tb&quot;);\n                tb.appendChild(trElement)\n\n                &#x2F;&#x2F;3. 清空序号、用户名、性别\n                numElement.value &#x3D; &quot;&quot;\n                usernameElement.value &#x3D; &quot;&quot;\n                genderElement.value &#x3D; &quot;&quot;\n            &#125;\n        &lt;&#x2F;script&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","text":"1. JavaScript的起源在1995年时，由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript，因为Netscape与Sun合作，网景公司管理层希望蹭Java的热度，因此取名为J...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-JavaScript%E7%9A%84%E8%B5%B7%E6%BA%90\"><span class=\"toc-text\">1. JavaScript的起源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-JavaScript%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">2. JavaScript的特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">2.1 脚本语言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%9F%BA%E4%BA%8E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.2 基于对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%BC%B1%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.3 弱类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">2.4 事件驱动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7\"><span class=\"toc-text\">2.5 跨平台性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">3. 入门程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-JavaScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4. JavaScript的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-JavaScript%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.1 JavaScript的引入方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-1-%E5%86%85%E9%83%A8%E8%84%9A%E6%9C%AC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.1.1 内部脚本方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-2-%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.1.2 外部脚本方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-3-js%E5%9C%A8html%E4%B8%AD%E7%9A%84%E5%BC%95%E5%85%A5%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">4.1.3 js在html中的引入位置</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%A3%B0%E6%98%8E%E5%92%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.2 声明和使用变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-1-JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">4.2.1 JavaScript数据类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-2-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.2.2 变量</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E5%87%BD%E6%95%B0-%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">4.3 函数(重点)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-1-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.1 内置函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-2-%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.2 声明函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-3-%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.3 调用函数</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-%E5%AF%B9%E8%B1%A1-%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">4.4 对象(重点)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-1-%E4%BD%BF%E7%94%A8new%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4.4.1 使用new关键字创建对象</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-2-%E4%BD%BF%E7%94%A8-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1-%E5%B8%B8%E7%94%A8\"><span class=\"toc-text\">4.4.2 使用{}创建对象(常用)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-3-%E7%BB%99%E5%AF%B9%E8%B1%A1%E8%AE%BE%E7%BD%AE%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4.4.3 给对象设置函数属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-4-this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">4.4.4 this关键字</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-%E6%95%B0%E7%BB%84-%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">4.5 数组(重点)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-1-%E4%BD%BF%E7%94%A8new%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">4.5.1 使用new关键字创建数组</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-2-%E4%BD%BF%E7%94%A8-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84-%E5%B8%B8%E7%94%A8\"><span class=\"toc-text\">4.5.2 使用[]创建数组(常用)</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-JSON-%E6%9C%80%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">4.6 JSON(最重点)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-1-JSON%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%94%A8%E9%80%94\"><span class=\"toc-text\">4.6.1 JSON格式的用途</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-2-JSON%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">4.6.2 JSON格式的说明</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-3-JSON%E5%AF%B9%E8%B1%A1%E5%92%8CJSON%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC\"><span class=\"toc-text\">4.6.3 JSON对象和JSON字符串互转</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-JavaScript%E7%9A%84DOM-%E6%9C%80%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">5. JavaScript的DOM(最重点)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-DOM%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">5.1 DOM的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-DOM%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">5.2 DOM树的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E5%90%84%E4%B8%AA%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.3 各个组成部分的类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">5.4 父子关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-5-%E5%85%88%E8%BE%88%E5%90%8E%E4%BB%A3%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">5.5 先辈后代关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-DOM%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5.6 DOM操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-1-%E5%9C%A8%E6%95%B4%E4%B8%AA%E6%96%87%E6%A1%A3%E8%8C%83%E5%9B%B4%E5%86%85%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5.6.1 在整个文档范围内查询元素节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-2-%E5%9C%A8%E5%85%B7%E4%BD%93%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E8%8C%83%E5%9B%B4%E5%86%85%E6%9F%A5%E6%89%BE%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5.6.2 在具体元素节点范围内查找子节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-3-%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E7%9A%84%E7%88%B6%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5.6.3 查找指定元素节点的父节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-4-%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E7%9A%84%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5.6.4 查找指定元素节点的兄弟节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6-5-%E6%89%A9%E5%B1%95%E5%86%85%E5%AE%B9-%E6%A0%B9%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E6%89%BE%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">5.6.5 扩展内容(根据选择器查找标签)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-6-5-1-%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5.6.5.1 属性操作</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-6-5-2-%E6%A0%87%E7%AD%BE%E4%BD%93%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5.6.5.2 标签体的操作</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-6-5-3-DOM%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5.6.5.3 DOM增删改操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-7-DOM%E6%96%87%E6%A1%A3%E5%8A%A0%E8%BD%BD%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">5.7 DOM文档加载步骤：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8-%E5%BE%88%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">6 事件驱动(很重要)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">6.1 事件的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%B8%B8%E8%A7%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">6.2 常见事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6.3 事件绑定的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-1-%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6.3.1 普通函数方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6.3.2 匿名函数方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-4-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">6.3.4 事件的使用介绍</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-7-5-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">2.5.7.5 综合案例</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"Regular Expression","uid":"011b445bb73b7101b5e897c141561df0","slug":"30-Regular expression","date":"2021-09-13T15:07:32.000Z","updated":"2021-09-15T10:25:53.055Z","comments":true,"path":"api/articles/30-Regular expression.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"一、概述正则表达式用于文本内容的查找和替换。 正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。 正则表达式在线工具 二、匹配单个字符. 可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符； . 是元字符，表示它有特殊的含义，而不是字符本身的含义...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Jsp的 EL JSTL","uid":"93d9161737573474af9da23361a39a29","slug":"28-El Jstl","date":"2021-09-13T15:05:32.000Z","updated":"2021-09-15T10:24:41.769Z","comments":true,"path":"api/articles/28-El Jstl.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1. EL表达式1.1 什么是EL* EL 表达式的全称是：&lt;kbd&gt;Expression Language&lt;&#x2F;kbd&gt;。是&lt;kbd&gt;表达式语言&lt;&#x2F;kbd&gt;，是JSP技术的主要特点之一，类似 javascript...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":13,"path":"api/tags/JavaWeb.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}