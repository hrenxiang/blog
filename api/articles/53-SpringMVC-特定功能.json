{"title":"SpringMVC 特定功能","uid":"a17a011b39e721d63806f9eabda18a53","slug":"53-SpringMVC-特定功能","date":"2021-09-13T15:30:32.000Z","updated":"2021-09-15T10:50:28.643Z","comments":true,"path":"api/articles/53-SpringMVC-特定功能.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog11.jpg","content":"<h4 id=\"cactus-拦截器\"><a href=\"#cactus-拦截器\" class=\"headerlink\" title=\":cactus: 拦截器\"></a>:cactus: 拦截器</h4><h4 id=\"①-拦截器前言\"><a href=\"#①-拦截器前言\" class=\"headerlink\" title=\"① 拦截器前言\"></a>① 拦截器前言</h4><ul>\n<li>SpringMVC提供的拦截器类似于JavaWeb中的过滤器，只不过SpringMVC拦截器只拦截被前端控制器拦截的请求，而过滤器拦截从前端发送的任意请求。</li>\n<li>熟练掌握SpringMVC拦截器对于我们开发非常有帮助，在没使用权限框架(shiro，spring security)之前，一般使用拦截器进行认证和授权操作。</li>\n<li>SpringMVC拦截器有许多应用场景，比如：<strong>登录认证拦截器，字符过滤拦截器，日志操作拦截器</strong>等等。</li>\n</ul>\n<h4 id=\"②-拦截器-VS-过滤器\"><a href=\"#②-拦截器-VS-过滤器\" class=\"headerlink\" title=\"② 拦截器 VS 过滤器\"></a>② 拦截器 VS 过滤器</h4><ul>\n<li><p>相似点</p>\n<ul>\n<li><p>三要素相同</p>\n<p>拦截：必须先把请求拦住，才能执行后续操作</p>\n<p>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</p>\n<p>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</p>\n</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li><p>工作平台不同</p>\n<p>过滤器工作在 Servlet 容器中</p>\n<p>==拦截器工作在 SpringMVC 的基础上==</p>\n</li>\n<li><p>拦截的范围不同</p>\n<p>过滤器：能够拦截到的最大范围是整个 Web 应用</p>\n<p>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求（看DispatcherServlet的<code>&lt;url-pattern&gt;</code>的设置是/还是*.action）</p>\n</li>\n<li><p>IOC 容器支持</p>\n<p>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</p>\n<p>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</p>\n</li>\n</ul>\n</li>\n<li><p>选择上：功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p>\n</li>\n</ul>\n<h4 id=\"③-SpringMVC拦截器的实现\"><a href=\"#③-SpringMVC拦截器的实现\" class=\"headerlink\" title=\"③ SpringMVC拦截器的实现\"></a>③ SpringMVC拦截器的实现</h4><ul>\n<li>自定义的Interceptor类要实现了Spring的HandlerInterceptor接口。（一般使用实现此接口的方式，接口中为默认方法，可实现也可不实现，但一般都实现）</li>\n<li>继承实现了HandlerInterceptor接口的类，比如Spring已经提供的实现了HandlerInterceptor接口的抽象类HandlerInterceptorAdapter。(Spring5支持JDK8。HandlerInterceptor中已经没有抽象方法了，所以该方法已经过时。)</li>\n</ul>\n<h4 id=\"④-三个方法的概念\"><a href=\"#④-三个方法的概念\" class=\"headerlink\" title=\"④ 三个方法的概念\"></a>④ 三个方法的概念</h4><p>HandlerInterceptor接口中定义了三个方法，我们就是通过这三个方法来对用户的请求进行拦截处理的。</p>\n<ul>\n<li>**preHandle()**： 这个方法在Controller处理请求之前被调用，SpringMVC中的Interceptor是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean 类型的，当它返回为false 时，表示请求结束，后续的Interceptor和Controller都不会再执行；当返回值为true时就会继续调用下一个Interceptor的preHandle 方法，如果已经是最后一个Interceptor的时候就会是调用当前请求的Controller方法。</li>\n<li><strong>postHandle()<strong>：这个方法在Controller方法处理当前请求之后执行，但是它会在DispatcherServlet进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller处理之后的</strong>ModelAndView</strong>对象进行操作。postHandle方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor的postHandle方法反而会后执行。</li>\n<li>**afterCompletion()**：这个方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的。</li>\n</ul>\n<h4 id=\"⑤-拦截器执行流程图\"><a href=\"#⑤-拦截器执行流程图\" class=\"headerlink\" title=\"⑤ 拦截器执行流程图\"></a>⑤ 拦截器执行流程图</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-interceptor1\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-interceptor2\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-interceptor3.png\" alt=\"img\"></p>\n<img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-interceptor4.png\" alt=\"image-20210720115615347\" style=\"zoom:150%;\" />\n\n<h4 id=\"⑥-拦截器执行规则\"><a href=\"#⑥-拦截器执行规则\" class=\"headerlink\" title=\"⑥ 拦截器执行规则\"></a>⑥ 拦截器执行规则</h4><p>我们可以<strong>配置多个拦截器</strong>，每个拦截器中都有三个方法。下面将总结多个拦截器中的方法执行规律。</p>\n<ul>\n<li>preHandle：Controller方法处理请求前执行，根据拦截器定义的顺序，正向执行。</li>\n<li>postHandle：Controller方法处理请求后执行，根据拦截器定义的顺序，逆向执行。需要所有的preHandle方法都返回true时才会调用。</li>\n<li>afterCompletion：View视图渲染后处理方法：根据拦截器定义的顺序，逆向执行。preHandle返回true就会调用。</li>\n</ul>\n<h4 id=\"⑦-配置拦截器路径\"><a href=\"#⑦-配置拦截器路径\" class=\"headerlink\" title=\"⑦ 配置拦截器路径\"></a>⑦ 配置拦截器路径</h4><ul>\n<li><p>```xml<br>mvc:mapping：拦截的路径<br>/**：是指所有文件夹及其子孙文件夹<br>/*：是指所有文件夹，但不包含子孙文件夹<br>/：Web项目的根目录</p>\n<p>mvc:exclude-mapping：不拦截的路径,不拦截登录路径</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n+ 默认拦截全部请求（**是interceptor&#x3D;&#x3D;s&#x3D;&#x3D;**）\n\n  &#96;&#96;&#96;xml\n  &lt;!-- 注册拦截器 --&gt;\n  &lt;mvc:interceptors&gt;\n      &lt;!-- 直接通过内部 bean 配置的拦截器默认拦截全部请求（SpringMVC 范围内） --&gt;\n      &lt;!--创建bean是因为我们的拦截器是通过代码实现的，而配置中的配置是我们启动拦截器，并配置拦截的相关路径--&gt;\n      &lt;bean class&#x3D;&quot;com.atguigu.mvc.interceptor.Process01Interceptor&quot;&#x2F;&gt;\n  &lt;&#x2F;mvc:interceptors&gt;</code></pre></li>\n<li><p>配置拦截路径（精确匹配）</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 具体配置拦截器可以指定拦截的请求地址 --&gt;\n&lt;mvc:interceptor&gt;\n    &lt;!-- 精确匹配 --&gt;\n    &lt;mvc:mapping path&#x3D;&quot;&#x2F;common&#x2F;request&#x2F;one&quot;&#x2F;&gt;\n    &lt;bean class&#x3D;&quot;com.atguigu.mvc.interceptor.Process03Interceptor&quot;&#x2F;&gt;\n&lt;&#x2F;mvc:interceptor&gt;</code></pre></li>\n<li><p>配置拦截路径（模糊匹配：匹配单层路径）</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mvc:interceptor&gt;\n    &lt;!-- &#x2F;*匹配路径中的一层 --&gt;\n    &lt;mvc:mapping path&#x3D;&quot;&#x2F;common&#x2F;request&#x2F;*&quot;&#x2F;&gt;\n    &lt;bean class&#x3D;&quot;com.atguigu.mvc.interceptor.Process04Interceptor&quot;&#x2F;&gt;\n&lt;&#x2F;mvc:interceptor&gt;</code></pre></li>\n<li><p>配置拦截路径（模糊匹配：匹配多层路径）</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mvc:interceptor&gt;\n    &lt;!-- &#x2F;**匹配路径中的多层 --&gt;\n    &lt;mvc:mapping path&#x3D;&quot;&#x2F;common&#x2F;request&#x2F;**&quot;&#x2F;&gt;\n    &lt;bean class&#x3D;&quot;com.atguigu.mvc.interceptor.Process05Interceptor&quot;&#x2F;&gt;\n&lt;&#x2F;mvc:interceptor&gt;</code></pre></li>\n<li><p>配置不拦截路径</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mvc:interceptor&gt;\n    &lt;!-- &#x2F;**匹配路径中的多层 --&gt;\n    &lt;mvc:mapping path&#x3D;&quot;&#x2F;common&#x2F;request&#x2F;**&quot;&#x2F;&gt;\n\n    &lt;!-- 使用 mvc:exclude-mapping 标签配置不拦截的地址 --&gt;\n    &lt;mvc:exclude-mapping path&#x3D;&quot;&#x2F;common&#x2F;request&#x2F;two&#x2F;bbb&quot;&#x2F;&gt;\n\n    &lt;bean class&#x3D;&quot;com.atguigu.mvc.interceptor.Process05Interceptor&quot;&#x2F;&gt;\n&lt;&#x2F;mvc:interceptor&gt;</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"cactus-类型转换\"><a href=\"#cactus-类型转换\" class=\"headerlink\" title=\":cactus: 类型转换\"></a>:cactus: 类型转换</h4><h4 id=\"①-类型转换前言\"><a href=\"#①-类型转换前言\" class=\"headerlink\" title=\"① 类型转换前言\"></a>① 类型转换前言</h4><p>SpringMVC 将『把请求参数注入到 POJO 对象』这个操作称为<strong>『数据绑定』</strong>，英文单词是 binding。数据类型的转换和格式化就发生在数据绑定的过程中。 类型转换和格式化是密不可分的两个过程，很多带格式的数据必须明确指定格式之后才可以进行类型转换。最典型的就是日期类型。</p>\n<h4 id=\"②-自动类型转换\"><a href=\"#②-自动类型转换\" class=\"headerlink\" title=\"② 自动类型转换\"></a>② 自动类型转换</h4><p>HTTP 协议是一个无类型的协议，我们在服务器端接收到请求参数等形式的数据时，本质上都是字符串类型。请看 javax.servlet.ServletRequest 接口中获取全部请求参数的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public Map&lt;String, String[]&gt; getParameterMap();</code></pre>\n\n<p>而我们在实体类当中需要的类型是非常丰富的。对此，SpringMVC 对基本数据类型提供了自动的类型转换。例如：请求参数传入“100”字符串，我们实体类中需要的是 Integer 类型，那么 SpringMVC 会自动将字符串转换为 Integer 类型注入实体类。</p>\n<h4 id=\"③-日期和数值类型\"><a href=\"#③-日期和数值类型\" class=\"headerlink\" title=\"③ 日期和数值类型\"></a>③ 日期和数值类型</h4><p>通过<code>@DateTimeFormat</code> 注解来指定日期转换参数，可以通过pattern属性来指定日期格式，或者设置iso来指定日期格式，内置了两种iso：Date(yyyy-MM-dd),TIME(yyyy-MM-dd HH:mm:ss.SSSZ)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">在实体类中\n    \n@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)\nprivate Date productDate;\n\n@NumberFormat(pattern &#x3D; &quot;###,###,###.###&quot;)\nprivate Double productPrice;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">在方法上\n\n@RequestMapping(&quot;date&#x2F;&#123;value&#125;&quot;)\npublic @ResponseBody String date(@PathVariable @DateTimeFormat(iso&#x3D;ISO.DATE) Date value) &#123;\n    return &quot;Converted date &quot; + value;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试表单</p></blockquote>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;save&#x2F;product&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    生产日期：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;productDate&quot; value&#x3D;&quot;1992-10-15 17:15:06&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    产品价格：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;productPrice&quot; value&#x3D;&quot;111,222,333.444&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n    &lt;button type&#x3D;&quot;submit&quot;&gt;保存&lt;&#x2F;button&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试方法</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;save&#x2F;product&quot;)\npublic String saveProduct(Product product) &#123;\n \n    logger.debug(product.toString());\n \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注解背后是相应的 类型转换器发生了作用</strong></p></blockquote>\n<h4 id=\"④-显示友好错误提示\"><a href=\"#④-显示友好错误提示\" class=\"headerlink\" title=\"④ 显示友好错误提示\"></a>④ 显示友好错误提示</h4><p>默认结果：400，错误的请求</p>\n<p><strong>BindingResult 接口</strong>和它的父接口 Errors 中定义了很多和数据绑定相关的方法，如果在数据绑定过程中发生了错误，那么通过这个接口类型的对象就可以获取到相关错误信息。</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-typeconvert2.png\" style=\"width:500px\"/>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-typeconvert1.png\"/>\n</div>\n\n<p>重构handler方法（方法参数中<strong>添加BindingResult参数</strong>，在实体类参数和 BindingResult 之间不能有任何其他参数）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;save&#x2F;product&quot;)\npublic String saveProduct(\n        Product product,\n\n        &#x2F;&#x2F; 在实体类参数和 BindingResult 之间不能有任何其他参数\n        &#x2F;&#x2F; 封装数据绑定结果的对象\n        BindingResult bindingResult) &#123;\n \n    &#x2F;&#x2F; 判断数据绑定过程中是否发生了错误\n    if (bindingResult.hasErrors()) &#123;\n        &#x2F;&#x2F; 如果发生了错误，则跳转到专门显示错误信息的页面\n        &#x2F;&#x2F; 相关错误信息会自动被放到请求域\n        return &quot;error&quot;;\n    &#125;\n    logger.debug(product.toString());\n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<p>页面上显示错误信息（<strong>th:errors获取</strong>   <strong>错误信息是具体的某个  字段可能会出错</strong>）</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 从请求域获取实体类信息时，属性名是按照类名首字母小写的规则 --&gt;\n&lt;!-- $&#123;注入请求参数的实体类.出问题的字段&#125; --&gt;\n&lt;p th:errors&#x3D;&quot;$&#123;product.productDate&#125;&quot;&gt;这里显示具体错误信息&lt;&#x2F;p&gt;</code></pre>\n\n<h4 id=\"⑤-自定义类型转换器\"><a href=\"#⑤-自定义类型转换器\" class=\"headerlink\" title=\"⑤ 自定义类型转换器\"></a>⑤ 自定义类型转换器</h4><p>在实际开发过程中，难免会有某些情况需要使用自定义类型转换器。因为我们自己自定义的类型在 SpringMVC 中没有对应的内置类型转换器。此时需要我们提供自定义类型来执行转换。</p>\n<p>我们学习的知识点可以分成：拼死学会    以防万一    增长见闻。自定义类型转换器的定位就是以防万一</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>创建实体类</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Address &#123;\n    private String province;\n    private String city;\n    private String street;\n    ……</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Student &#123;\n    private Address address;\n    ……</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表单</p></blockquote>\n<p>现在我们希望通过一个文本框输入约定格式的字符串，然后转换为我们需要的类型，所以必须通过自定义类型转换器来实现，否则 SpringMVC 无法识别。<strong>（逗号前后台也要一样）</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h3&gt;自定义类型转换器&lt;&#x2F;h3&gt;\n&lt;form th:action&#x3D;&quot;@&#123;&#x2F;save&#x2F;student&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    地址：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;address&quot; value&#x3D;&quot;aaa,bbb,ccc&quot; &#x2F;&gt;&lt;br&#x2F;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>controller方法</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;save&#x2F;student&quot;)\npublic String saveStudent(Student student) &#123;\n \n    logger.debug(student.getAddress().toString());\n \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>自定义类型转换器</p>\n<p>实现接口：org.springframework.core.convert.converter.Converter&lt;S,T&gt;</p>\n<p>泛型 S：源类型（本例中是 String 类型）</p>\n<p>泛型 T：目标类型（本例中是 Address 类型）</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AddressConverter implements Converter&lt;String, Address&gt; &#123;\n    @Override\n    public Address convert(String source) &#123;\n  \n        &#x2F;&#x2F; 1.按照约定的规则拆分源字符串\n        String[] split &#x3D; source.split(&quot;,&quot;);\n         \n        String province &#x3D; split[0];\n        String city &#x3D; split[1];\n        String street &#x3D; split[2];\n \n        &#x2F;&#x2F; 2.根据拆分结果创建 Address 对象\n        Address address &#x3D; new Address(province, city, street);\n         \n        &#x2F;&#x2F; 3.返回转换得到的对象\n        return address;\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在springmvc中注册</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 在 mvc:annotation-driven 中注册 FormattingConversionServiceFactoryBean --&gt;\n&lt;mvc:annotation-driven conversion-service&#x3D;&quot;formattingConversionService&quot;&#x2F;&gt;\n \n&lt;!-- 在 FormattingConversionServiceFactoryBean 中注册自定义类型转换器 --&gt;\n&lt;bean id&#x3D;&quot;formattingConversionService&quot;\n      class&#x3D;&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;\n\n    &lt;!-- 在 converters 属性中指定自定义类型转换器 --&gt;\n    &lt;property name&#x3D;&quot;converters&quot;&gt;\n        &lt;set&gt;\n            &lt;bean class&#x3D;&quot;com.atguigu.mvc.converter.AddressConverter&quot;&#x2F;&gt;\n        &lt;&#x2F;set&gt;\n    &lt;&#x2F;property&gt;\n \n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<hr>\n<h4 id=\"cactus-数据校验\"><a href=\"#cactus-数据校验\" class=\"headerlink\" title=\":cactus: 数据校验\"></a>:cactus: 数据校验</h4><h4 id=\"①-数据校验前言\"><a href=\"#①-数据校验前言\" class=\"headerlink\" title=\"① 数据校验前言\"></a>① 数据校验前言</h4><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p>\n<h4 id=\"②-校验概述\"><a href=\"#②-校验概述\" class=\"headerlink\" title=\"② 校验概述\"></a>② 校验概述</h4><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Null</td>\n<td>标注值必须为 null</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td>标注值不可为 null</td>\n</tr>\n<tr>\n<td>@AssertTrue</td>\n<td>标注值必须为 true</td>\n</tr>\n<tr>\n<td>@AssertFalse</td>\n<td>标注值必须为 false</td>\n</tr>\n<tr>\n<td>@Min(value)</td>\n<td>标注值必须大于或等于 value</td>\n</tr>\n<tr>\n<td>@Max(value)</td>\n<td>标注值必须小于或等于 value</td>\n</tr>\n<tr>\n<td>@DecimalMin(value)</td>\n<td>标注值必须大于或等于 value</td>\n</tr>\n<tr>\n<td>@DecimalMax(value)</td>\n<td>标注值必须小于或等于 value</td>\n</tr>\n<tr>\n<td>@Size(max,min)</td>\n<td>标注值大小必须在 max 和 min 限定的范围内</td>\n</tr>\n<tr>\n<td>@Digits(integer,fratction)</td>\n<td>标注值值必须是一个数字，且必须在可接受的范围内</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>标注值只能用于日期型，且必须是过去的日期</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>标注值只能用于日期型，且必须是将来的日期</td>\n</tr>\n<tr>\n<td>@Pattern(value)</td>\n<td>标注值必须符合指定的正则表达式</td>\n</tr>\n</tbody></table>\n<p>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的<strong>扩展注解</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Email</td>\n<td>标注值必须是格式正确的 Email 地址</td>\n</tr>\n<tr>\n<td>@Length</td>\n<td>标注值字符串大小必须在指定的范围内</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td>标注值字符串不能是空字符串</td>\n</tr>\n<tr>\n<td>@Range</td>\n<td>标注值必须在指定的范围内</td>\n</tr>\n</tbody></table>\n<p> Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。</p>\n<p>在SpringMVC 中，可直接通过注解驱动 mvc:annotation-driven 的方式进行数据校验。</p>\n<p>Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。</p>\n<p>Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p>\n<p>配置 mvc:annotation-driven 后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过<strong>在处理方法的入参上标注 @Validated 注解</strong>即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</p>\n<h4 id=\"③-导入依赖\"><a href=\"#③-导入依赖\" class=\"headerlink\" title=\"③ 导入依赖\"></a>③ 导入依赖</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：需要 Tomcat 版本至少是 8。</p></blockquote>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.hibernate.validator&#x2F;hibernate-validator --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.2.0.Final&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.hibernate.validator&#x2F;hibernate-validator-annotation-processor --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;hibernate-validator-annotation-processor&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.2.0.Final&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"④-标记规则注解\"><a href=\"#④-标记规则注解\" class=\"headerlink\" title=\"④ 标记规则注解\"></a>④ 标记规则注解</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实体类（最少长度，指的是总字符数）</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 字符串长度：[3,6]\n@Size(min &#x3D; 3, max &#x3D; 6)\n&#x2F;&#x2F; 字符串必须满足Email格式\n@Email\nprivate String email;</code></pre>\n\n<h4 id=\"⑤-方法形参标记注解\"><a href=\"#⑤-方法形参标记注解\" class=\"headerlink\" title=\"⑤ 方法形参标记注解\"></a>⑤ 方法形参标记注解</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;save&#x2F;president&quot;)\npublic String savePresident(@Validated President president) &#123;\n    logger.debug(president.getEmail());\n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>显示友好错误提示与类型转换相同</strong></p></blockquote>\n<hr>\n<h4 id=\"cactus-异常映射\"><a href=\"#cactus-异常映射\" class=\"headerlink\" title=\":cactus: 异常映射\"></a>:cactus: 异常映射</h4><h4 id=\"①-异常映射概念\"><a href=\"#①-异常映射概念\" class=\"headerlink\" title=\"① 异常映射概念\"></a>① 异常映射概念</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>微观</p></blockquote>\n<p>将异常类型和某个具体的视图关联起来，建立映射关系。好处是可以通过 SpringMVC 框架来帮助我们管理异常。</p>\n<ul>\n<li>声明式管理异常：在配置文件中指定异常类型和视图之间的对应关系。在配置文件或注解类中统一管理。</li>\n<li>编程式管理异常：需要我们自己手动 try … catch … 捕获异常，然后再手动跳转到某个页面。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>宏观</p></blockquote>\n<p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方法处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。</p>\n<h4 id=\"②-异常映射的好处\"><a href=\"#②-异常映射的好处\" class=\"headerlink\" title=\"② 异常映射的好处\"></a>② 异常映射的好处</h4><ul>\n<li>使用声明式代替编程式来实现异常管理<ul>\n<li>让异常控制和核心业务解耦，二者各自维护，结构性更好</li>\n</ul>\n</li>\n<li>整个项目层面使用同一套规则来管理异常<ul>\n<li>整个项目代码风格更加统一、简洁</li>\n<li>便于团队成员之间的彼此协作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"③-基于xml的异常映射\"><a href=\"#③-基于xml的异常映射\" class=\"headerlink\" title=\"③ 基于xml的异常映射\"></a>③ 基于xml的异常映射</h4><p>SpringMVC 会根据异常映射信息，在捕获到指定异常对象后，将异常对象存入请求域，然后转发到和异常类型关联的视图。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;exceptionResolver&quot;\n      class&#x3D;&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;\n \n    &lt;!-- 配置异常映射关系 --&gt;\n    &lt;property name&#x3D;&quot;exceptionMappings&quot;&gt;\n        &lt;props&gt;\n            &lt;!-- key属性：指定异常类型 --&gt;\n            &lt;!-- 文本标签体：和异常类型对应的逻辑视图 --&gt;\n            &lt;prop key&#x3D;&quot;java.lang.ArithmeticException&quot;&gt;error-arith&lt;&#x2F;prop&gt;\n        &lt;&#x2F;props&gt;\n    &lt;&#x2F;property&gt;\n \n    &lt;!-- 使用 exceptionAttribute 属性配置将异常对象存入请求域时使用的属性名 --&gt;\n    &lt;!-- 这个属性名默认是exception --&gt;\n    &lt;property name&#x3D;&quot;exceptionAttribute&quot; value&#x3D;&quot;atguiguException&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p>==页面获取数据 （html的名称就是 上面定义的逻辑视图的名称）==</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;p th:text&#x3D;&quot;$&#123;atguiguException&#125;&quot;&gt;&lt;&#x2F;p&gt;</code></pre>\n\n<h4 id=\"④-异常范围\"><a href=\"#④-异常范围\" class=\"headerlink\" title=\"④ 异常范围\"></a>④ 异常范围</h4><p>如果在配置文件中，发现有多个匹配的异常类型，那么 SpringMVC 会采纳范围上最接近的异常映射关系。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;prop key&#x3D;&quot;java.lang.ArithmeticException&quot;&gt;error-arith&lt;&#x2F;prop&gt;\n&lt;prop key&#x3D;&quot;java.lang.RuntimeException&quot;&gt;error-runtime&lt;&#x2F;prop&gt;</code></pre>\n\n<h4 id=\"⑤-基于注解的异常映射\"><a href=\"#⑤-基于注解的异常映射\" class=\"headerlink\" title=\"⑤ 基于注解的异常映射\"></a>⑤ 基于注解的异常映射</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>当同一个异常类型在基于 XML 和注解的配置中都能够找到对应的映射，那么以注解为准。</strong></p></blockquote>\n<p>创建异常处理器类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">com.hrenxiang.exception.MyExceptionHandler</code></pre>\n\n<p>异常处理器类加入 IOC容器</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;context:component-scan base-package&#x3D;&quot;com.hrenxiang.exception.MyExceptionHandler&quot;&#x2F;&gt;</code></pre>\n\n<p>给异常处理器类标记注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 异常处理器类需要使用 @ControllerAdvice 注解标记\n@ControllerAdvice\npublic class MyExceptionHandler &#123;\n    \n&#125;</code></pre>\n\n<p>给类中的方法标记注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; @ExceptionHandler注解：标记异常处理方法\n&#x2F;&#x2F; value属性：指定匹配的异常类型\n&#x2F;&#x2F; 异常类型的形参：SpringMVC 捕获到的异常对象\n@ExceptionHandler(value &#x3D; NullPointerException.class)\npublic String resolveNullPointerException(Exception e, Model model) &#123;\n \n    &#x2F;&#x2F; 我们可以自己手动将异常对象存入模型\n    model.addAttribute(&quot;atguiguException&quot;, e);\n \n    &#x2F;&#x2F; 返回逻辑视图名称\n    return &quot;error-nullpointer&quot;;\n&#125;</code></pre>\n\n<h4 id=\"⑥-区分请求类型-accept\"><a href=\"#⑥-区分请求类型-accept\" class=\"headerlink\" title=\"⑥ 区分请求类型:accept:\"></a>⑥ 区分请求类型:accept:</h4><p>分析：异常处理机制和拦截器机制都面临这样的问题</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-exception1.png\" alt=\"images\"></p>\n<p>判断依据：查看请求消息头中是否包含 Ajax 请求独有的特征</p>\n<ul>\n<li>Accept 请求消息头：包含 application/json</li>\n<li>X-Requested-With 请求消息头：包含 XMLHttpRequest</li>\n</ul>\n<p>两个条件满足一个即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 判断当前请求是否为Ajax请求\n * @param request 请求对象\n * @return\n *      true：当前请求是Ajax请求\n *      false：当前请求不是Ajax请求\n *&#x2F;\npublic static boolean judgeRequestType(HttpServletRequest request) &#123;\n    \n    &#x2F;&#x2F; 1.获取请求消息头\n    String acceptHeader &#x3D; request.getHeader(&quot;Accept&quot;);\n    String xRequestHeader &#x3D; request.getHeader(&quot;X-Requested-With&quot;);\n    \n    &#x2F;&#x2F; 2.判断\n    return (acceptHeader !&#x3D; null &amp;&amp; acceptHeader.contains(&quot;application&#x2F;json&quot;)) ||\n            (xRequestHeader !&#x3D; null &amp;&amp; xRequestHeader.equals(&quot;XMLHttpRequest&quot;));\n&#125;</code></pre>\n\n<p><strong>兼容两种的处理办法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ExceptionHandler(value &#x3D; Exception.class)\npublic String resolveException(Exception e, HttpServletRequest request, HttpServletResponse response) throws IOException &#123;\n \n    &#x2F;&#x2F; 调用工具方法判断当前请求是否是 Ajax 请求\n    boolean judgeResult &#x3D; MVCUtil.judgeRequestType(request);\n \n    if (judgeResult) &#123;\n \n        &#x2F;&#x2F; 对 Ajax 请求返回字符串作为响应体\n        String message &#x3D; e.getMessage();\n \n        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);\n        response.getWriter().write(message);\n \n        &#x2F;&#x2F; 上面已经使用原生 response 对象返回了响应，这里就不返回视图名称了\n        return null;\n    &#125;\n \n    &#x2F;&#x2F; 对普通请求返回逻辑视图名称\n    return &quot;error-exception&quot;;\n&#125;</code></pre>\n\n\n\n<hr>\n<h4 id=\"cactus-文件上传\"><a href=\"#cactus-文件上传\" class=\"headerlink\" title=\":cactus: 文件上传\"></a>:cactus: 文件上传</h4><h4 id=\"①-前端页面-设置enctype\"><a href=\"#①-前端页面-设置enctype\" class=\"headerlink\" title=\"① 前端页面(设置enctype)\"></a>① 前端页面(设置enctype)</h4><p>第一点：请求方式必须是 POST<br>第二点：请求体的编码方式必须是 ==multipart/form-data==（通过 form 标签的 ==enctype== 属性设置）<br>第三点：使用 input 标签、type 属性设置为 file 来生成文件上传框</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;atguigu&#x2F;upload&#125;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n    \n    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;picture&quot; &#x2F;&gt;\n    &lt;button type&#x3D;&quot;submit&quot;&gt;上传头像&lt;&#x2F;button&gt;\n     \n&lt;&#x2F;form&gt;</code></pre>\n\n<h4 id=\"②-SpringMVC-环境配置\"><a href=\"#②-SpringMVC-环境配置\" class=\"headerlink\" title=\"② SpringMVC 环境配置\"></a>② SpringMVC 环境配置</h4><h5 id=\"point-right-添加依赖\"><a href=\"#point-right-添加依赖\" class=\"headerlink\" title=\":point_right: 添加依赖\"></a>:point_right: 添加依赖</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--文件上传依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.3.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h5 id=\"point-right-​配置spring-mvc-xml\"><a href=\"#point-right-​配置spring-mvc-xml\" class=\"headerlink\" title=\":point_right: ​配置spring-mvc.xml\"></a>:point_right: ​配置spring-mvc.xml</h5><p>在 SpringMVC 的配置文件中加入 multipart 类型数据的解析器：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;multipartResolver&quot; \n      class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;\n    \n    &lt;!-- 由于上传文件的表单请求体编码方式是 multipart&#x2F;form-data 格式，所以要在解析器中指定字符集 --&gt;\n    &lt;property name&#x3D;&quot;defaultEncoding&quot; value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;\n    \n&lt;&#x2F;bean&gt;</code></pre>\n\n<h4 id=\"③-获取多媒体类型请求参数\"><a href=\"#③-获取多媒体类型请求参数\" class=\"headerlink\" title=\"③ 获取多媒体类型请求参数\"></a>③ 获取多媒体类型请求参数</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;simple&#x2F;upload&quot;)\npublic String doUpload(\n \n        &#x2F;&#x2F; 表单提交的数据仍然是请求参数，所以使用 @RequestParam 注解接收\n        @RequestParam(&quot;nickName&quot;) String nickName,\n \n        &#x2F;&#x2F; 对于上传的文件使用 MultipartFile 类型接收其相关数据\n        @RequestParam(&quot;picture&quot;) MultipartFile picture\n        ) throws IOException &#123;\n \n    String inputName &#x3D; picture.getName();\n    logger.debug(&quot;文件上传表单项的 name 属性值：&quot; + inputName);\n \n    &#x2F;&#x2F; 获取这个数据通常都是为了获取文件本身的扩展名\n    String originalFilename &#x3D; picture.getOriginalFilename();\n    logger.debug(&quot;文件在用户本地原始的文件名：&quot; + originalFilename);\n \n    String contentType &#x3D; picture.getContentType();\n    logger.debug(&quot;文件的内容类型：&quot; + contentType);\n \n    boolean empty &#x3D; picture.isEmpty();\n    logger.debug(&quot;文件是否为空：&quot; + empty);\n \n    long size &#x3D; picture.getSize();\n    logger.debug(&quot;文件大小：&quot; + size);\n \n    byte[] bytes &#x3D; picture.getBytes();\n    logger.debug(&quot;文件二进制数据的字节数组：&quot; + Arrays.asList(bytes));\n \n    InputStream inputStream &#x3D; picture.getInputStream();\n    logger.debug(&quot;读取文件数据的输入流对象：&quot; + inputStream);\n \n    Resource resource &#x3D; picture.getResource();\n    logger.debug(&quot;代表当前 MultiPartFile 对象的资源对象&quot; + resource);\n \n    return &quot;target&quot;;\n&#125;</code></pre>\n\n<h4 id=\"④-文件转存-3种\"><a href=\"#④-文件转存-3种\" class=\"headerlink\" title=\"④ 文件转存(3种)\"></a>④ 文件转存(3种)</h4><div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-multpartfile1.png\" alt=\"images\"/>&nbsp;\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-MultipartFile2.png\" alt=\"image-20210721185628552\" style=\"zoom:65%;\" />\n</div>\n\n<h5 id=\"point-right-本地转存\"><a href=\"#point-right-本地转存\" class=\"headerlink\" title=\":point_right: 本地转存\"></a>:point_right: 本地转存</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><!--文件上传的最大大小  单位：字节   1024*1024=1M-->\n<property name=\"maxUploadSize\" value=\"102400\"/>\n<!--内存中的最大值-->\n<property name=\"maxInMemorySize\" value=\"102400\"/></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\n@Slf4j\npublic class UploadController2 &#123;\n\n    @Autowired\n    private ServletContext servletContext;\n\n    &#x2F;&#x2F; 文件上传页面\n    @RequestMapping(&quot;&#x2F;toUpload2&quot;)\n    public String toUpload() &#123;\n        return &quot;fileUpload2&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;fileUpload2&quot;)\n    public String fileUpload(MultipartFile file, Model model, HttpSession session) throws IOException &#123;\n\n        &#x2F;&#x2F; 0、准备好保存文件的目标目录\n        &#x2F;&#x2F; ①File 对象要求目标路径是一个物理路径（在硬盘空间里能够直接找到文件的路径）\n        &#x2F;&#x2F; ②项目在不同系统平台上运行，要求能够自动兼容、适配不同系统平台的路径格式\n        &#x2F;&#x2F;      例如：Window系统平台的路径是 D:&#x2F;aaa&#x2F;bbb 格式\n        &#x2F;&#x2F;      例如：Linux系统平台的路径是 &#x2F;ttt&#x2F;uuu&#x2F;vvv 格式\n        &#x2F;&#x2F;      所以我们需要根据『不会变的虚拟路径』作为基准动态获取『跨平台的物理路径』\n        &#x2F;&#x2F; ③虚拟路径：浏览器通过 Tomcat 服务器访问 Web 应用中的资源时使用的路径\n        &#x2F;*ServletContext servletContext &#x3D; session.getServletContext();*&#x2F;\n        String path &#x3D; &quot;&#x2F;upload&quot;;\n        String realPath &#x3D; servletContext.getRealPath(path);\n\n\n        &#x2F;&#x2F; 1.判断资源上传地址是否存在,不存在就创建\n        File fileAddress &#x3D; new File(realPath);\n        if (!fileAddress.exists()) &#123;\n            log.debug(&quot;创建文件夹！！！&quot;);\n            fileAddress.mkdirs();\n        &#125;\n\n        &#x2F;&#x2F; 2. 判断传入的文件不是空，保证文件名唯一，不会被覆盖\n        if (file &#x3D;&#x3D; null || file.getOriginalFilename() &#x3D;&#x3D; null) &#123;\n            return &quot;error&quot;;\n        &#125;\n        String originalFilename &#x3D; file.getOriginalFilename();\n        &#x2F;&#x2F; 获取后缀名\n        String extName &#x3D; originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));\n        &#x2F;&#x2F; 生成唯一名\n        String uuid &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);\n        &#x2F;&#x2F; 添加后缀\n        String fileName &#x3D; uuid + extName;\n\n        &#x2F;&#x2F; 3. 判断后缀是否为 .jpg或 .png\n        if (!&quot;.jpg&quot;.equals(extName) &amp;&amp; !&quot;.png&quot;.equals(extName)) &#123;\n            log.debug(&quot;后缀名不正确！！&quot;);\n        &#x2F;&#x2F; &lt;prop key&#x3D;&quot;java.lang.RuntimeException&quot;&gt;error-upload&lt;&#x2F;prop&gt;界面上使用xml中存储异常值的对象进行获取\n            throw new RuntimeException(&quot;运行错误！！！&quot;);\n        &#125;\n\n        &#x2F;&#x2F; 4. 限制文件上传大小，通过xml配置\n        &#x2F;*\n        &lt;!--文件上传的最大大小  单位：字节   1024*1024&#x3D;1M--&gt;\n        &lt;property name&#x3D;&quot;maxUploadSize&quot; value&#x3D;&quot;102400&quot;&#x2F;&gt;\n        &lt;!--内存中的最大值--&gt;\n        &lt;property name&#x3D;&quot;maxInMemorySize&quot; value&#x3D;&quot;102400&quot;&#x2F;&gt;\n        *&#x2F;\n\n        File file1 &#x3D; new File(fileAddress, fileName);\n        file.transferTo(file1);\n\n        log.debug(&quot;---------&quot; + file.getOriginalFilename() + &quot;------------&quot;);\n        model.addAttribute(&quot;msg&quot;, &quot;上传成功&quot;);\n        model.addAttribute(&quot;fileName&quot;,fileName);\n        return &quot;result&quot;;\n    &#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>图1：本地转存        图2：此方式的缺陷</p></blockquote>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc.png\" alt=\"images\" style=\"zoom: 67%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-multipartFile3.png\" alt=\"images\" style=\"zoom:67%;\" />\n</div>\n\n<p><strong>缺陷</strong></p>\n<ul>\n<li>Web 应用重新部署时通常都会清理旧的构建结果，此时用户以前上传的文件会被删除，导致数据丢失。</li>\n<li>项目运行很长时间后，会导致上传的文件积累非常多，体积非常大，从而拖慢 Tomcat 运行速度。</li>\n<li>当服务器以集群模式运行时，文件上传到集群中的某一个实例，其他实例中没有这个文件，就会造成数据不一致。</li>\n<li>不支持动态扩容，一旦系统增加了新的硬盘或新的服务器实例，那么上传、下载时使用的路径都需要跟着变化，导致 Java 代码需要重新编写、重新编译，进而导致整个项目重新部署。</li>\n</ul>\n<h5 id=\"point-right-文件服务器（采纳）\"><a href=\"#point-right-文件服务器（采纳）\" class=\"headerlink\" title=\":point_right: 文件服务器（采纳）\"></a>:point_right: 文件服务器（采纳）</h5><div>\n    <p>\n        图一、总体机制    图二、好处\n    </p>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-multipartFile4.png\" alt=\"spring\" style=\"zoom: 52%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-multipartFile5.png\" alt=\"iamges\" style=\"zoom:67%;\" />\n</div>\n\n<p><strong>好处</strong></p>\n<ul>\n<li>不受 Web 应用重新部署影响</li>\n<li>在应用服务器集群环境下不会导致数据不一致</li>\n<li>针对文件读写进行专门的优化，性能有保障</li>\n<li>能够实现动态扩容</li>\n</ul>\n<p><strong>文件服务器类型</strong></p>\n<ul>\n<li>第三方平台：<ul>\n<li>阿里的 OSS 对象存储服务</li>\n<li>七牛云</li>\n</ul>\n</li>\n<li>自己搭建服务器：FastDFS等</li>\n</ul>\n<h5 id=\"point-right-上传到其他模块\"><a href=\"#point-right-上传到其他模块\" class=\"headerlink\" title=\":point_right:  上传到其他模块\"></a>:point_right:  上传到其他模块</h5><p>这种情况肯定出现在<strong>分布式架构中</strong>，常规业务功能不会这么做，采用这个方案的一定是特殊情况。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/spring-springmvc-multipartFile6.png\" alt=\"iamges\"></p>\n<p>在 MultipartFile 接口中有一个对应的方法：</p>\n<p>注释中说：这个 Resource 对象代表当前 MultipartFile 对象，输入给 RestTemplate 或 WebClient。而 RestTemplate 或 WebClient 就是用来在 Java 程序中向服务器端发出请求的组件。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Return a Resource representation of this MultipartFile. This can be used\n * as input to the &#123;@code RestTemplate&#125; or the &#123;@code WebClient&#125; to expose\n * content length and the filename along with the InputStream.\n * @return this MultipartFile adapted to the Resource contract\n * @since 5.1\n *&#x2F;\ndefault Resource getResource() &#123;\n    return new MultipartFileResource(this);\n&#125;</code></pre>\n\n\n\n<hr>\n<h4 id=\"cactus-文件下载\"><a href=\"#cactus-文件下载\" class=\"headerlink\" title=\":cactus: 文件下载\"></a>:cactus: 文件下载</h4><h4 id=\"①-初始形态\"><a href=\"#①-初始形态\" class=\"headerlink\" title=\"① 初始形态\"></a>① 初始形态</h4><p>使用链接地址指向要下载的文件。此时浏览器会尽可能解析对应的文件，只要是能够在浏览器窗口展示的，就都会直接显示，而不是提示下载。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;a href&#x3D;&quot;download&#x2F;hello.atguigu&quot;&gt;下载&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;\n&lt;a href&#x3D;&quot;download&#x2F;tank.jpg&quot;&gt;下载&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;\n&lt;a href&#x3D;&quot;download&#x2F;chapter04.zip&quot;&gt;下载&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</code></pre>\n\n<p>上面例子中，只有 chapter04.zip 文件是直接提示下载的，其他两个都是直接显示。</p>\n<h4 id=\"②-​我的前端代码\"><a href=\"#②-​我的前端代码\" class=\"headerlink\" title=\"② ​我的前端代码\"></a>② ​我的前端代码</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;a th:href&#x3D;&quot;@&#123;&#x2F;download&#x2F;00b8541c8c8849ca9fc1ff3be01f2aa0.jpg&#125;&quot;&gt;下载&lt;&#x2F;a&gt;</code></pre>\n\n<h4 id=\"③-后端明确要求浏览器下载\"><a href=\"#③-后端明确要求浏览器下载\" class=\"headerlink\" title=\"③ 后端明确要求浏览器下载\"></a>③ 后端明确要求浏览器下载</h4><p>==内部明确浏览器提示下载，封装响应消息头,设置下载的响应头==</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\n@Slf4j\npublic class DownloadController &#123;\n\n    @Autowired\n    private ServletContext servletContext;\n\n    @RequestMapping(&quot;&#x2F;toDownload&quot;)\n    public String toDownload()&#123;\n        return &quot;download&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;download&#x2F;&#123;fileName&#125;&quot;)\n    public String downloadImg(@PathVariable(&quot;fileName&quot;) String fileName, HttpServletResponse response) throws IOException &#123;\n        &#x2F;&#x2F; 获取图片\n        String realPath &#x3D; servletContext.getRealPath(&quot;&#x2F;upload&#x2F;&quot;+fileName);\n\n        &#x2F;&#x2F; 输入流，进行读取\n        InputStream inputStream &#x3D; new FileInputStream(realPath);\n\n        &#x2F;&#x2F; 输出流，进行写入\n        ServletOutputStream outputStream &#x3D; response.getOutputStream();\n\n        &#x2F;&#x2F; 封装响应消息头,设置下载的响应头\n        response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment; filename&#x3D;&quot;+fileName);\n\n        &#x2F;&#x2F; 使用jar中封装好的工具类进行 读取下载\n        IOUtils.copy(inputStream,outputStream);\n\n        &#x2F;&#x2F; 关闭输入输出流\n        inputStream.close();\n        outputStream.close();\n\n        return &quot;result&quot;;\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<hr>\n<h4 id=\"cactus-其他内容\"><a href=\"#cactus-其他内容\" class=\"headerlink\" title=\":cactus: 其他内容\"></a>:cactus: 其他内容</h4><h4 id=\"①-根据请求参数情况映射\"><a href=\"#①-根据请求参数情况映射\" class=\"headerlink\" title=\"① 根据请求参数情况映射\"></a>① 根据请求参数情况映射</h4><p>使用 @RequestMapping 注解的 params 参数实现，表达式语法参见下面的例子：</p>\n<table>\n<thead>\n<tr>\n<th>需求</th>\n<th>映射方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>请求参数中必须包含userName</td>\n<td>@RequestMapping(value = “/xxx”, params=”userName”)</td>\n</tr>\n<tr>\n<td>请求参数中不能包含userName</td>\n<td>@RequestMapping(value = “/xxx”, params=”!userName”)</td>\n</tr>\n<tr>\n<td>请求参数中必须包含userName 且值必须为Tom2015</td>\n<td>@RequestMapping(value = “/xxx”, params=”userName=Tom2015”)</td>\n</tr>\n<tr>\n<td>请求参数中必须包含userName 但值不能为Tom2015</td>\n<td>@RequestMapping(value = “/xxx”, params=”userName=!Tom2015”)</td>\n</tr>\n<tr>\n<td>请求参数中必须包含userName 且值为Tom2015， 同时必须包含userPwd但值不限</td>\n<td>@RequestMapping(value = “/xxx”, params={“userName=Tom2015”,”userPwd”} )</td>\n</tr>\n</tbody></table>\n<h4 id=\"②-根据请求消息头内容映射\"><a href=\"#②-根据请求消息头内容映射\" class=\"headerlink\" title=\"② 根据请求消息头内容映射\"></a>② 根据请求消息头内容映射</h4><p>使用 @RequestMapping 注解的 headers 参数实现，表达式语法参见下面的例子：</p>\n<table>\n<thead>\n<tr>\n<th>需求</th>\n<th>映射方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>根据 Accept-Language:zh-CN,zh;q=0.8 映射</td>\n<td>@RequestMapping ( value=”/xxx”, headers= “Accept-Language=zh-CN,en;q=0.8” )</td>\n</tr>\n</tbody></table>\n<h4 id=\"③-Ant-风格通配符\"><a href=\"#③-Ant-风格通配符\" class=\"headerlink\" title=\"③ Ant 风格通配符\"></a>③ Ant 风格通配符</h4><ul>\n<li>英文问号：匹配一个字符</li>\n<li>一个星号：匹配路径中的一层</li>\n<li>两个连续星号：匹配路径中的多层</li>\n</ul>\n<h4 id=\"④-ModelAttribute-注解\"><a href=\"#④-ModelAttribute-注解\" class=\"headerlink\" title=\"④ @ModelAttribute 注解\"></a>④ @ModelAttribute 注解</h4><p>handler 类中，选定一个方法标记 @ModelAttribute 注解。</p>\n<ul>\n<li>效果1：在每个 handler 方法前执行</li>\n<li>效果2：可以将某些数据提前存入请求域</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class ModelAttrHandler &#123;\n \n    @ModelAttribute\n    public void doSthBefore(Model model) &#123;\n        model.addAttribute(&quot;initAttr&quot;, &quot;initValue&quot;);\n    &#125;\n \n    @RequestMapping(&quot;&#x2F;test&#x2F;model&#x2F;attr&#x2F;one&quot;)\n    public String testModelAttrOne(Model model) &#123;\n \n        Object modelAttribute &#x3D; model.getAttribute(&quot;initAttr&quot;);\n        System.out.println(&quot;modelAttribute &#x3D; &quot; + modelAttribute);\n \n        return &quot;target&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;test&#x2F;model&#x2F;attr&#x2F;two&quot;)\n    public String testModelAttrTwo(Model model) &#123;\n \n        Object modelAttribute &#x3D; model.getAttribute(&quot;initAttr&quot;);\n        System.out.println(&quot;modelAttribute &#x3D; &quot; + modelAttribute);\n \n        return &quot;target&quot;;\n    &#125;\n\n&#125;</code></pre>\n\n","text":":cactus: 拦截器① 拦截器前言 SpringMVC提供的拦截器类似于JavaWeb中的过滤器，只不过SpringMVC拦截器只拦截被前端控制器拦截的请求，而过滤器拦截从前端发送的任意请求。 熟练掌握SpringMVC拦截器对于我们开发非常有帮助，在没使用权限框架(shir...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">:cactus: 拦截器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">① 拦截器前言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%8B%A6%E6%88%AA%E5%99%A8-VS-%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">② 拦截器 VS 过滤器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">③ SpringMVC拦截器的实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">④ 三个方法的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">⑤ 拦截器执行流程图</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99\"><span class=\"toc-text\">⑥ 拦截器执行规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A6-%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">⑦ 配置拦截器路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">:cactus: 类型转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">① 类型转换前言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">② 自动类型转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">③ 日期和数值类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E6%98%BE%E7%A4%BA%E5%8F%8B%E5%A5%BD%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">④ 显示友好错误提示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8\"><span class=\"toc-text\">⑤ 自定义类型转换器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">:cactus: 数据校验</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">① 数据校验前言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%A0%A1%E9%AA%8C%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">② 校验概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">③ 导入依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E6%A0%87%E8%AE%B0%E8%A7%84%E5%88%99%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">④ 标记规则注解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E6%96%B9%E6%B3%95%E5%BD%A2%E5%8F%82%E6%A0%87%E8%AE%B0%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">⑤ 方法形参标记注解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">:cactus: 异常映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">① 异常映射概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">② 异常映射的好处</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%9F%BA%E4%BA%8Exml%E7%9A%84%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">③ 基于xml的异常映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E5%BC%82%E5%B8%B8%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">④ 异常范围</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">⑤ 基于注解的异常映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E5%8C%BA%E5%88%86%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B-accept\"><span class=\"toc-text\">⑥ 区分请求类型:accept:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">:cactus: 文件上传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2-%E8%AE%BE%E7%BD%AEenctype\"><span class=\"toc-text\">① 前端页面(设置enctype)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-SpringMVC-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">② SpringMVC 环境配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">:point_right: 添加依赖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E2%80%8B%E9%85%8D%E7%BD%AEspring-mvc-xml\"><span class=\"toc-text\">:point_right: ​配置spring-mvc.xml</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E8%8E%B7%E5%8F%96%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">③ 获取多媒体类型请求参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E6%96%87%E4%BB%B6%E8%BD%AC%E5%AD%98-3%E7%A7%8D\"><span class=\"toc-text\">④ 文件转存(3种)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%9C%AC%E5%9C%B0%E8%BD%AC%E5%AD%98\"><span class=\"toc-text\">:point_right: 本地转存</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%87%87%E7%BA%B3%EF%BC%89\"><span class=\"toc-text\">:point_right: 文件服务器（采纳）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#point-right-%E4%B8%8A%E4%BC%A0%E5%88%B0%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">:point_right:  上传到其他模块</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">:cactus: 文件下载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%88%9D%E5%A7%8B%E5%BD%A2%E6%80%81\"><span class=\"toc-text\">① 初始形态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E2%80%8B%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">② ​我的前端代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%90%8E%E7%AB%AF%E6%98%8E%E7%A1%AE%E8%A6%81%E6%B1%82%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">③ 后端明确要求浏览器下载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cactus-%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">:cactus: 其他内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%83%85%E5%86%B5%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">① 根据请求参数情况映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%E5%A4%B4%E5%86%85%E5%AE%B9%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">② 根据请求消息头内容映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-Ant-%E9%A3%8E%E6%A0%BC%E9%80%9A%E9%85%8D%E7%AC%A6\"><span class=\"toc-text\">③ Ant 风格通配符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-ModelAttribute-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">④ @ModelAttribute 注解</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SpringMVC 源码分析","uid":"39dbbffa03a8d8ee66fd7af853996d07","slug":"54-SpringMVC-源码分析","date":"2021-09-13T15:31:32.000Z","updated":"2021-09-15T10:57:19.403Z","comments":true,"path":"api/articles/54-SpringMVC-源码分析.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog8.jpg","text":":green_book: SpringMVC 运行原理① 总体情形 用户发送请求至DispatcherServlet。 DispatcherServlet收到请求调用HandlerMapping查询具体的Handler。 HandlerMapping找到具体的处理器(具体配置的是...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"SpringMVC 基础功能","uid":"0873bab37682d9a4ef349b4c3c9c31a9","slug":"52-SpringMVC-基础功能","date":"2021-09-13T15:29:32.000Z","updated":"2021-09-15T10:50:36.880Z","comments":true,"path":"api/articles/52-SpringMVC-基础功能.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog10.jpg","text":"01、springMVC 入门① 传统 MVC 架构使用MVC架构（JSP/Thymeleaf+Servlet+JavaBean）进行分层开发，可以实现分工协作、可以实现组件重用、可以利于后期维护。 缺点如下 每个功能都要声明对应的Servlet，Servlet数量多。即使让一个...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":3,"path":"api/tags/SpringMVC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}