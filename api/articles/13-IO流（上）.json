{"title":"IO流（上）","uid":"4e865ee4768f3582deb20f72187b6c6b","slug":"13-IO流（上）","date":"2021-09-13T14:48:32.000Z","updated":"2021-09-15T10:16:02.083Z","comments":true,"path":"api/articles/13-IO流（上）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"一、File类\"><a href=\"#一、File类\" class=\"headerlink\" title=\"一、File类\"></a>一、File类</h3><h4 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><ul>\n<li><p>File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</p>\n</li>\n<li><p>File类声明在java.io包下</p>\n</li>\n<li><p>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，</p>\n<p>并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</p>\n</li>\n<li><p>后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”</p>\n</li>\n</ul>\n<h4 id=\"2、构造方法\"><a href=\"#2、构造方法\" class=\"headerlink\" title=\"2、构造方法\"></a>2、构造方法</h4><ul>\n<li><p><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。</p>\n</li>\n<li><p><code>public File(String parent, String child)</code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</p>\n</li>\n<li><p><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。</p>\n</li>\n<li><p>一个File对象代表硬盘中实际存放的一个文件夹或者目录</p>\n</li>\n<li><p>无论该路径下是否存在文件或者目录，都不影响File对象的创建</p>\n</li>\n</ul>\n<h4 id=\"3、路径的使用\"><a href=\"#3、路径的使用\" class=\"headerlink\" title=\"3、路径的使用\"></a>3、路径的使用</h4><ul>\n<li>绝对路径：从<strong>盘符</strong>开始的路径，这是一个完整的路径</li>\n<li>相对路径：相对于<strong>项目目录</strong>的路径，这是一个便捷的路径，开发中经常使用</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n        File file&#x3D;new File(&quot;D:\\\\Idea\\\\workspace\\\\Project\\\\src&quot;);\n        System.out.println(file.getAbsolutePath());\n        File file1&#x3D;new File(&quot;src&quot;);\n        System.out.println(file1.getAbsolutePath());\n    &#125;</code></pre>\n\n<h5 id=\"4、路径分隔符\"><a href=\"#4、路径分隔符\" class=\"headerlink\" title=\"4、路径分隔符\"></a>4、路径分隔符</h5><p>windows和DOS系统默认使用“\\”来表示</p>\n<p>UNIX和URL使用“/”来表示</p>\n<h4 id=\"5、常用方法\"><a href=\"#5、常用方法\" class=\"headerlink\" title=\"5、常用方法\"></a>5、常用方法</h4><h5 id=\"5-1-获取功能\"><a href=\"#5-1-获取功能\" class=\"headerlink\" title=\"5.1 获取功能\"></a>5.1 获取功能</h5><ul>\n<li><code>public String getName()</code> ：返回由此File表示的文件或目录的名称。</li>\n<li><code>public String getPath()</code> ：将此File转换为路径名字符串。</li>\n<li><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</li>\n<li><code>public File getAbsoluteFile()</code>：返回此File对应的绝对路径文件。</li>\n<li><code>public String getParent()</code>：返回此File对应的父文件夹路径。</li>\n<li><code>public File getParentFile()</code>：返回此File对应的父文件夹对象。</li>\n<li><code>public long length()</code> ：返回由此File表示的文件的大小，单位是字节。</li>\n</ul>\n<h5 id=\"5-2-判断\"><a href=\"#5-2-判断\" class=\"headerlink\" title=\"5.2 判断\"></a>5.2 判断</h5><ul>\n<li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li>\n<li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li>\n<li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li>\n</ul>\n<h5 id=\"5-3-操作文件（夹）\"><a href=\"#5-3-操作文件（夹）\" class=\"headerlink\" title=\"5.3 操作文件（夹）\"></a>5.3 操作文件（夹）</h5><ul>\n<li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</li>\n<li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。</li>\n<li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li>\n<li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li>\n</ul>\n<h5 id=\"5-4-文件夹遍历\"><a href=\"#5-4-文件夹遍历\" class=\"headerlink\" title=\"5.4 文件夹遍历\"></a>5.4 文件夹遍历</h5><ul>\n<li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li>\n<li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">File file2&#x3D;new File(&quot;c:&#x2F;&quot;);\nFile[] files &#x3D; file2.listFiles();\nfor (File file3 : files) &#123;\n    System.out.println(file3.getName());\n&#125;\n\n结果：\nIntel\nProgram Files\nProgram Files (x86)\nProgramData\ntemp\nUsers\nWindows</code></pre>\n\n<h3 id=\"二、IO流\"><a href=\"#二、IO流\" class=\"headerlink\" title=\"二、IO流\"></a>二、IO流</h3><h4 id=\"1、概述-1\"><a href=\"#1、概述-1\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><p>数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即<strong>流向内存是输入流，流出内存的输出流</strong>。</p>\n<p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写入</strong>数据。</p>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/IO1.png\" alt=\"image-20210422144818649\"></p>\n<h4 id=\"2、IO分类\"><a href=\"#2、IO分类\" class=\"headerlink\" title=\"2、IO分类\"></a>2、IO分类</h4><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p>\n<ul>\n<li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</li>\n<li><strong>输出流</strong> ：把数据从<code>内存</code> 中写入到<code>其他设备</code>上的流。</li>\n</ul>\n<p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p>\n<ul>\n<li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li>\n<li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li>\n</ul>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/IO4.png\" alt=\"image-20210422150210133\"></p>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/IO3.png\" alt=\"image-20210422145734793\"></p>\n<p><strong>蓝色框框</strong>的格外需要注意</p>\n<h3 id=\"三、字节流\"><a href=\"#三、字节流\" class=\"headerlink\" title=\"三、字节流\"></a>三、字节流</h3><h4 id=\"1、概述-2\"><a href=\"#1、概述-2\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h4><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p>\n<h4 id=\"2、字节输出流\"><a href=\"#2、字节输出流\" class=\"headerlink\" title=\"2、字节输出流\"></a>2、字节输出流</h4><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写入到目的地。它定义了字节输出流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</li>\n<li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写入。</li>\n<li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。</li>\n<li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li>\n<li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li>\n</ul>\n<p><strong>注意</strong>：当完成流的操作时，必须调用 close() 方法，释放系统资源。</p>\n<h4 id=\"3、FileOutputStream\"><a href=\"#3、FileOutputStream\" class=\"headerlink\" title=\"3、FileOutputStream\"></a>3、FileOutputStream</h4><p><code>OutputStream</code>有很多子类，其中<code>java.io.FileOutputStream</code>类是最常见的文件输出流，用于将数据写入到文件。</p>\n<ul>\n<li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。</li>\n<li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li>\n<li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。</li>\n<li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。</li>\n</ul>\n<p>append参数是一个boolean类型：</p>\n<ul>\n<li>false:如果文件不存在，会创建这个文件；如果文件存在，写入数据时会清除之前的数据。</li>\n<li>true:如果文件不存在，会创建这个文件；如果文件存在，写入数据时会追加。</li>\n</ul>\n<p>数据追加操作</p>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/IODataAppend.png\" alt=\"image-20210422152128622\"></p>\n<h4 id=\"4、换行\"><a href=\"#4、换行\" class=\"headerlink\" title=\"4、换行\"></a>4、换行</h4><ul>\n<li>回车符：\\r    和    换行符：\\n<ul>\n<li>回车符：回到一行的开头（return）。</li>\n<li>换行符：下一行（newline）。</li>\n</ul>\n</li>\n<li>系统中的换行：<ul>\n<li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\\r\\n</code>；</li>\n<li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\\n</code>；</li>\n<li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\\r</code>。从 Mac OS X开始与Linux统一。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5、字节输入流\"><a href=\"#5、字节输入流\" class=\"headerlink\" title=\"5、字节输入流\"></a>5、字节输入流</h4><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。</li>\n<li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。</li>\n<li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li>\n</ul>\n<p><strong>注意</strong>：当完成流的操作时，必须调用 close() 方法，释放系统资源。</p>\n<h4 id=\"6、FileInputStream\"><a href=\"#6、FileInputStream\" class=\"headerlink\" title=\"6、FileInputStream\"></a>6、FileInputStream</h4><p><code>InputStream</code>有很多子类，其中<code>java.io.FileInputStream</code>类是最常见的文件输入流，用于从文件里读取数据。</p>\n<ul>\n<li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li>\n<li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li>\n<li>public int read(int r)： 这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。      </li>\n<li>public int  read(byte[] r) ：  这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。      </li>\n<li>public int  available()：  返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值  </li>\n</ul>\n<p>当创建一个输入流对象时，必须传入一个文件路径。如果<strong>路径对应的文件不存在</strong>，则会抛出<code>FileNotFoundException</code> 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FileInputStreamConstructor throws IOException&#123;\n    public static void main(String[] args) &#123;\n            &#x2F;&#x2F; 使用File对象创建流对象\n        File file &#x3D; new File(&quot;a.txt&quot;);\n        FileInputStream fis1 &#x3D; new FileInputStream(file);\n\n        &#x2F;&#x2F; 使用文件名称创建流对象\n        FileInputStream fis2 &#x3D; new FileInputStream(&quot;b.txt&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><code>read</code>方法每次只读取一个字节的数据，并将返回值提升为int类型。读取到文件末尾时，返回-1,表示文件读取结束。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">File file &#x3D; new File(&quot;a.txt&quot;);\nFileInputStream fis &#x3D; new FileInputStream(file);\n&#x2F;*\n调用 read 方法一个字节一个字节的读取数据\nSystem.out.println(fis.read());\nSystem.out.println(fis.read());\n*&#x2F;\n\n&#x2F;*\n使用while循环，不断读取数据\nint data &#x3D; fis.read();\nwhile (data !&#x3D; -1) &#123;\n     System.out.println(data);\n     data &#x3D; fis.read();\n&#125;\n*&#x2F;\n\n&#x2F;*\n使用do...while循环，不断读取数据\nint data;\ndo &#123;\n    data &#x3D; fis.read();\n    System.out.println(data);\n&#125; while (data !&#x3D; -1);\n*&#x2F;\n\n&#x2F;*\n使用死循环，不断读取数据\nwhile (true) &#123;\n    int data &#x3D; fis.read();\n    if (data &#x3D;&#x3D; -1) &#123;\n        break;\n    &#125;\n    System.out.println(data);\n&#125;\n*&#x2F;</code></pre>\n\n<p><code>read</code>方法还可以传入<code>byte</code>类型的数组参数，用来规定读取的字节长度。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">File file &#x3D; new File(&quot;a.txt&quot;);\nFileInputStream fis &#x3D; new FileInputStream(file);\n\n&#x2F;&#x2F; 创建一个指定长度的字节数组，用来存储数据\nbyte[] bs &#x3D; new byte[2];\n\nwhile (true) &#123;\n    &#x2F;&#x2F; 读取到的数据会被写入到 byte 数组里\n    &#x2F;&#x2F; read方法的返回值表示读取的字节长度\n    int len &#x3D; fis.read(bs);\n    if (len &#x3D;&#x3D; -1) &#123;\n        break;\n    &#125;\n    &#x2F;&#x2F; 这种写法有问题，有可能出现数据重复的情况\n    &#x2F;&#x2F; System.out.println(new String(bs));\n    System.out.println(new String(bs, 0, len));\n&#125;\nfis.close();</code></pre>\n\n<p><strong>注意</strong>：使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，<strong>建议开发中使用</strong>。</p>\n<h4 id=\"7、字节流正规写法\"><a href=\"#7、字节流正规写法\" class=\"headerlink\" title=\"7、字节流正规写法\"></a>7、字节流正规写法</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ReadAndWrite &#123;\n\n    public static void main(String[] args) &#123;\n\n        FileInputStream fis &#x3D; null;\n        FileOutputStream fos &#x3D; null;\n        try &#123;\n            fis &#x3D; new FileInputStream(&quot;Study_test\\\\src\\\\hh.txt&quot;);\n            fos &#x3D; new FileOutputStream(&quot;Study_test\\\\src\\\\文本.txt&quot;);\n\n            int f;\n            while ((f &#x3D; fis.read()) !&#x3D; -1) &#123;\n                fos.write(f);\n            &#125;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            if (fos !&#x3D; null &amp;&amp; fis !&#x3D; null) &#123;\n                try &#123;\n                    fos.close();\n                    fis.close();\n                &#125; catch (IOException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>","text":"一、File类1、概述 File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹) File类声明在java.io包下 File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法， 并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/tags/JavaSE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81File%E7%B1%BB\"><span class=\"toc-text\">一、File类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2、构造方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3、路径的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6\"><span class=\"toc-text\">4、路径分隔符</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5、常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1-%E8%8E%B7%E5%8F%96%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">5.1 获取功能</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">5.2 判断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-3-%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%EF%BC%88%E5%A4%B9%EF%BC%89\"><span class=\"toc-text\">5.3 操作文件（夹）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-4-%E6%96%87%E4%BB%B6%E5%A4%B9%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">5.4 文件夹遍历</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81IO%E6%B5%81\"><span class=\"toc-text\">二、IO流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0-1\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81IO%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2、IO分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">三、字节流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0-2\"><span class=\"toc-text\">1、概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AD%97%E8%8A%82%E8%BE%93%E5%87%BA%E6%B5%81\"><span class=\"toc-text\">2、字节输出流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81FileOutputStream\"><span class=\"toc-text\">3、FileOutputStream</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%8D%A2%E8%A1%8C\"><span class=\"toc-text\">4、换行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E6%B5%81\"><span class=\"toc-text\">5、字节输入流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81FileInputStream\"><span class=\"toc-text\">6、FileInputStream</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81%E6%AD%A3%E8%A7%84%E5%86%99%E6%B3%95\"><span class=\"toc-text\">7、字节流正规写法</span></a></li></ol></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"IO流（下）","uid":"76d4babd3007758066655a1fc80352b9","slug":"14-IO流（下）","date":"2021-09-13T14:49:32.000Z","updated":"2021-09-15T10:16:21.465Z","comments":true,"path":"api/articles/14-IO流（下）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"一、字符流当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。 字符流与字节流的区别：字符流虽然以字节流为基础创建的，但是字...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"集合（下）","uid":"88ccd4775101a2a1232ec4d83ea6f5c4","slug":"12-集合（下）","date":"2021-09-13T14:47:32.000Z","updated":"2021-09-14T15:54:58.927Z","comments":true,"path":"api/articles/12-集合（下）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"一、Collections 要点 工具类，随机排序方法shuffle，，反转元素方法reverse以及升序排序方法sort collection：单列集合的父接口 collections：他是集合操作的一种 工具类，类中的方法全部是静态的，可以进行查找，排序等操作 Collect...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"JavaSE","slug":"JavaSE","count":18,"path":"api/tags/JavaSE.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}