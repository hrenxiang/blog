{"title":"Git","uid":"221a7ad001c03569112f684b2dfdc120","slug":"62-Git","date":"2021-09-13T15:39:32.000Z","updated":"2021-09-15T10:47:06.475Z","comments":true,"path":"api/articles/62-Git.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog2.jpg","content":"<h4 id=\"1、版本控制\"><a href=\"#1、版本控制\" class=\"headerlink\" title=\"1、版本控制\"></a>1、版本控制</h4><hr>\n<h5 id=\"1-1、什么是版本控制\"><a href=\"#1-1、什么是版本控制\" class=\"headerlink\" title=\"1.1、什么是版本控制\"></a>1.1、什么是版本控制</h5><p>版本控制  (Revision control)：是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>\n<p>①  本地版本控制系统：RCS</p>\n<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>\n<p>②  集中化的版本控制系统：CVS、SVN(Subversion)、VSS……</p>\n<p>优点：所有版本数据都保存在中央服务器上，协同开发者都通过客户端连接服务器，检出最新的文件或提交更新</p>\n<p>缺点：显而易见的缺点是中央服务器的单点故障，容错性差。 </p>\n<p>​            如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 </p>\n<p>​            如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问您将丢失所有数据</p>\n<p>③  分布式版本控制系统：  Git、Mercurial、Bazaar、Darcs……</p>\n<p>优点：客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 </p>\n<p>​            若任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。     </p>\n<p>​            因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份</p>\n<p>缺点：每个人都拥有全部的代码！安全隐患！可能带着代码投靠敌人</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png\" alt=\"本地版本控制系统\" style=\"zoom: 31%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-%E9%9B%86%E4%B8%AD%E5%8C%96%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png\" alt=\"集中化的版本控制系统\" style=\"zoom:32%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png\" alt=\"分布式版本控制系统\" style=\"zoom:45%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-1.png\" alt=\"image-20210806200743412\" style=\"zoom: 80%;\" />\n</div>\n\n\n\n<h5 id=\"1-2、版本控制的好处\"><a href=\"#1-2、版本控制的好处\" class=\"headerlink\" title=\"1.2、版本控制的好处\"></a>1.2、版本控制的好处</h5><p>:o: 协同开发：团队协作共同完成同一个项目</p>\n<p>:o: 版本管理：包括版本的记录和还原，以不断提升项目版本的方式逐步完成项目，跟踪记录整个软件的开发过程</p>\n<p>:o: 数据备份：开发中以版本控制的形式保存每一个历史版本</p>\n<p>:o: 分支管理：允许团队在工作过程中多条线同时推进任务，提高效率（并行开发、提高开发效率）</p>\n<p>:o: 权限管理：对团队开发人员进行不同的权限分配</p>\n<p>:o: 代码审查：统计工作量，减轻开发人员的负担，节省时间，同时降低人为错误</p>\n<p>:o: 冲突解决：开发过程中，一个团队中若编写代码进行合并时，有冲突，方便解决冲突</p>\n<h5 id=\"1-3、Git-和-Svn的区别\"><a href=\"#1-3、Git-和-Svn的区别\" class=\"headerlink\" title=\"1.3、Git 和 Svn的区别\"></a>1.3、Git 和 Svn的区别</h5><p>:o: SVN</p>\n<ol>\n<li><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的。</p>\n</li>\n<li><p>而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，</p>\n</li>\n<li><p>完成工作后，需要把自己做完的活推送到中央服务器。</p>\n</li>\n<li><p>集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>\n</li>\n</ol>\n<p>:o: Git</p>\n<ol>\n<li>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是完整的版本库，工作的时候不需要联网，版本都在自己电脑上。</li>\n<li>协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推<br>送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</li>\n<li>&lt;最先进&gt;Git是目前世界上最先进的分布式版本控制系统。&lt;/最先进&gt;</li>\n</ol>\n<h4 id=\"2、初识Git\"><a href=\"#2、初识Git\" class=\"headerlink\" title=\"2、初识Git\"></a>2、初识Git</h4><hr>\n<h5 id=\"2-1、Git工作机制\"><a href=\"#2-1、Git工作机制\" class=\"headerlink\" title=\"2.1、Git工作机制\"></a>2.1、Git工作机制</h5><div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-2.png\" alt=\"image-20210806202147321\" style=\"zoom: 88%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-3.png\" alt=\"image-20210806202214338\" style=\"zoom:90%;\" />\n</div>\n\n\n\n<h5 id=\"2-2、代码托管中心\"><a href=\"#2-2、代码托管中心\" class=\"headerlink\" title=\"2.2、代码托管中心\"></a>2.2、代码托管中心</h5><p>代码托管中心负责维护远程库</p>\n<p>:o: 局域网</p>\n<p>​      Gitlab</p>\n<p>:o: Internet</p>\n<p>​      GitHub</p>\n<p>​      码云(gitee)</p>\n<h5 id=\"2-3、Git简述\"><a href=\"#2-3、Git简述\" class=\"headerlink\" title=\"2.3、Git简述\"></a>2.3、Git简述</h5><p>Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS）</p>\n<p>:o: 仓库</p>\n<ol>\n<li><p>本地仓库：是在开发人员自己电脑上的Git仓库 </p>\n</li>\n<li><p>远程仓库：是在远程服务器上的Git仓库</p>\n<p>​                    团队内协作</p>\n<p>​                    跨团队协作</p>\n</li>\n</ol>\n<p>:o: 操作</p>\n<ol>\n<li>clone：克隆，就是将远程仓库复制到本地</li>\n<li>push：推送，就是将本地仓库代码上传到远程仓库</li>\n<li>pull：拉取，就是将远程仓库代码下载到本地仓库</li>\n<li>Commit：提交，就是将本地工作区代码上传到本地仓库中</li>\n</ol>\n<p>:o: 优点</p>\n<ol>\n<li>容灾能力强</li>\n<li>本地版本管理</li>\n<li>异地协作、</li>\n<li>灵活分支</li>\n</ol>\n<h4 id=\"3、安装Git，简单理解\"><a href=\"#3、安装Git，简单理解\" class=\"headerlink\" title=\"3、安装Git，简单理解\"></a>3、安装Git，简单理解</h4><hr>\n<h5 id=\"3-1、命令行工具：Git-for-windows\"><a href=\"#3-1、命令行工具：Git-for-windows\" class=\"headerlink\" title=\"3.1、命令行工具：Git for windows\"></a>3.1、命令行工具：Git for windows</h5><p>下载地址：Git-2.23.0-64-bit.exe</p>\n<p><a href=\"https://git-for-windows.github.io/\">https://git-for-windows.github.io/ </a></p>\n<p><a href=\"https://git-scm.com/download\">https://git-scm.com/download</a></p>\n<p>具体安装过程，百度即可</p>\n<p>安装完成之后</p>\n<ul>\n<li>在开始菜单栏中的 Git文件下有三个选项</li>\n<li>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</li>\n<li>Git CMD：Windows风格的命令行</li>\n<li>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</li>\n</ul>\n<h5 id=\"3-2、可视化工具：TortoiseGit-了解\"><a href=\"#3-2、可视化工具：TortoiseGit-了解\" class=\"headerlink\" title=\"3.2、可视化工具：TortoiseGit(了解)\"></a>3.2、可视化工具：TortoiseGit(了解)</h5><p>下载地址： <a href=\"https://tortoisegit.org/\">https://tortoisegit.org/</a></p>\n<p> TortoiseGit 2.8.0-64-bit</p>\n<h5 id=\"3-3、GitHub-Gitee网站\"><a href=\"#3-3、GitHub-Gitee网站\" class=\"headerlink\" title=\"3.3、GitHub Gitee网站\"></a>3.3、GitHub Gitee网站</h5><p><a href=\"http://www.github.com/\">http://www.github.com</a></p>\n<p><a href=\"https://gitee.com/\">https://gitee.com/</a></p>\n<h5 id=\"3-4、安装完成：设置全局签名\"><a href=\"#3-4、安装完成：设置全局签名\" class=\"headerlink\" title=\"3.4、安装完成：设置全局签名\"></a>3.4、安装完成：设置全局签名</h5><p>安装完成后，在任意的文件目录下，右键都可以开打Git的命令行窗口——Git Bash Here</p>\n<p>Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识——即：用户签名</p>\n<p>:o: 说明</p>\n<p>​    签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。</p>\n<p>​    注意：这里设置用户签名和将来登录GitHub（或其他代码托管中心）的账号没有任何关系。</p>\n<p>:o: 命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git config --global user.name &quot;用户名&quot;\n\ngit config --global user.email &quot;用户邮箱&quot;\n\n查看不同等级的配置文件\ngit config -l  查看git的所有配置\ngit config --system -l 或  --list  查看系统\ngit config --global -l  或  --list 查看当前用户  </code></pre>\n\n<p>–global 表示全局属性，所有的git项目都会共用属性</p>\n<p>在当前登录的系统用户路径下，生成~/.gitconfig隐含文件，里面可以看到设置的信息。若不用命令设置，也可以打开文件进行设置。</p>\n<h4 id=\"4、工作区、版本库、暂存区\"><a href=\"#4、工作区、版本库、暂存区\" class=\"headerlink\" title=\"4、工作区、版本库、暂存区\"></a>4、工作区、版本库、暂存区</h4><hr>\n<h5 id=\"4-1、基本概念\"><a href=\"#4-1、基本概念\" class=\"headerlink\" title=\"4.1、基本概念\"></a>4.1、基本概念</h5><ul>\n<li>工作区(Working Directory)：就是你电脑本地硬盘目录，一般是项目当前目录</li>\n<li>版本库(Repository)：工作区有个隐藏目录.git，它就是Git的本地版本库</li>\n<li>暂存区(stage)：一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）</li>\n<li>分支(Branch)：Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD</li>\n</ul>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-5.jpg\" alt=\"img\"> </p>\n<h5 id=\"4-2、提交Git版本库分两步执行\"><a href=\"#4-2、提交Git版本库分两步执行\" class=\"headerlink\" title=\"4.2、提交Git版本库分两步执行\"></a>4.2、提交Git版本库分两步执行</h5><ul>\n<li>第一步：用“git add”把文件纳入Git管理，实际是把本地文件修改添加到暂存区</li>\n<li>第二步：用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支 </li>\n</ul>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以commit就是往master分支上提交更改。</p>\n<p>可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。一旦提交完后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。即：nothing to commit (working directory clean)。</p>\n<h4 id=\"5、Git本地库实战\"><a href=\"#5、Git本地库实战\" class=\"headerlink\" title=\"5、Git本地库实战\"></a>5、Git本地库实战</h4><hr>\n<h5 id=\"5-1、本地库常用命令\"><a href=\"#5-1、本地库常用命令\" class=\"headerlink\" title=\"5.1、本地库常用命令\"></a>5.1、本地库常用命令</h5><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>命令作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>初始化本地库</td>\n</tr>\n<tr>\n<td>git config –global user.name 用户名</td>\n<td>设置用户签名的用户名部分</td>\n</tr>\n<tr>\n<td>git config –global user.email 邮箱</td>\n<td>设置用户签名的邮箱部分</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看本地库状态</td>\n</tr>\n<tr>\n<td>git add 文件名</td>\n<td>添加到暂存区</td>\n</tr>\n<tr>\n<td>git commit -m “日志信息” 文件名</td>\n<td>提交到本地库</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看历史记录</td>\n</tr>\n<tr>\n<td>git reset –hard 版本号</td>\n<td>版本穿梭</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-2、实战-初始化版本库\"><a href=\"#5-2、实战-初始化版本库\" class=\"headerlink\" title=\"5.2、实战 (初始化版本库)\"></a>5.2、实战 (初始化版本库)</h5><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库，获取Git仓库通常有两种方式：</p>\n<ul>\n<li>在本地初始化一个Git仓库</li>\n<li>从远程仓库克隆</li>\n</ul>\n<p>本地初始化操作步骤：</p>\n<ul>\n<li>创建目录（用作本地版本库），例如：D:\\DevRepository\\GITRepository\\oa，oa表示办公自动化项目名称</li>\n<li>当前目录打开Git Bash窗口，初始化仓库</li>\n</ul>\n<p>命令：git init</p>\n<ul>\n<li>查看当前目录产生.git隐藏文件夹</li>\n<li>注意：当前的 .git 是一个隐藏文件夹，需要在电脑上面设置隐藏文件夹显示设置，否则，看不到这个.git目录</li>\n</ul>\n<h5 id=\"5-3、实战-新建-提交-状态\"><a href=\"#5-3、实战-新建-提交-状态\" class=\"headerlink\" title=\"5.3、实战 (新建\\提交\\状态)\"></a>5.3、实战 (新建\\提交\\状态)</h5><p>:o: 新建文件</p>\n<ul>\n<li>命令：touch a.txt</li>\n<li>命令：vim a.txt</li>\n</ul>\n<p>:o: 查看文件状态命令：<strong>git status</strong></p>\n<ul>\n<li><p>On branch master ：表示主分支</p>\n</li>\n<li><p>Untracked files：表示未跟踪状态</p>\n</li>\n</ul>\n<p>:o: 使用 <strong>git status –s</strong> 使输出信息更加简洁</p>\n<ul>\n<li>?? : 表示未跟踪状态</li>\n</ul>\n<p>:o: Git工作目录下的文件状态信息</p>\n<ul>\n<li>Untracked 未跟踪（未被纳入版本控制）<ul>\n<li>文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过 git add . 状态变为Staged</li>\n</ul>\n</li>\n<li>Tracked 已跟踪（被纳入版本控制）</li>\n<li>Unmodified 未修改状态<ul>\n<li>文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处,<br>如果它被修改, 而变为Modified. 如果使用 git rm 移出版本库, 则成为Untracked文件</li>\n</ul>\n</li>\n<li>Modified 已修改状态<ul>\n<li>文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过 git add .可进入暂存staged状态,<br>使用 git checkout 则丢弃修改过, 返回到unmodify状态.<br>这个git checkout即从库中取出文件, 覆盖当前修改</li>\n</ul>\n</li>\n<li>Staged 已暂存状态<ul>\n<li>执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态.<br>执行 git reset HEAD filename取消暂存, 文件状态为Modified</li>\n</ul>\n</li>\n</ul>\n<p>:o: 这些文件的状态会随着我们执行Git的命令发生变化</p>\n<ul>\n<li><strong>红色</strong>表示新建文件或者新修改的文件,都在工作区. </li>\n<li><strong>绿色</strong>表示文件在暂存区 </li>\n</ul>\n<p>新建的文件在工作区，需要添加到暂存区并提交到仓库区</p>\n<p>:o: 添加到暂存区命令：<strong>git add &lt;文件名称&gt;</strong></p>\n<p>只是增加到栈空间（index文件）中，还没有添加到本地库中。初始化时没有这个index文件。这还是一个新文件，需要将栈空间文件提交到本地仓库。</p>\n<p>添加项目中所有文件：<strong>git add .</strong></p>\n<p>添加未存在文件会出错：fatal: pathspec ‘hello.txt’ did not match any files</p>\n<p>:o: 撤销暂存区的文件命令：<strong>git  reset  &lt;文件名称&gt;</strong></p>\n<p>撤销后，查看文件状态（git status）文件由绿色变为红色</p>\n<p>:o: 将暂存区文件提交到本地库  命令：<strong>git  commit</strong></p>\n<p>执行命令时需要填写提交日志，进入编辑模式</p>\n<p><strong>git  commit  –m “注释内容”</strong>   </p>\n<p>直接用-m参数指定日志内容，推荐</p>\n<p>commit 会生成一条版本记录，add只是添加暂存区，不会生成版本记录，<strong>建议多次add后，一次性commit</strong>，避免每次add都commit产生版本信息爆炸。</p>\n<p><strong>git commit -am “注释内容”</strong></p>\n<p>代码编辑完成后即可进行 add 和 commit 操作</p>\n<p>提示：添加和提交合并命令</p>\n<p>编辑保存再提交，反复练习多次，修改提交3次(为接下来实验做准备)</p>\n<h5 id=\"5-4、实战-查看日志\"><a href=\"#5-4、实战-查看日志\" class=\"headerlink\" title=\"5.4、实战(查看日志)\"></a>5.4、实战(查看日志)</h5><ul>\n<li><p>查看文件日志(查看所有日志或某个文件日志)命令：<strong>git log</strong></p>\n<p>q退出</p>\n</li>\n<li><p>如果日志很多,可以在一行显示：<strong>git log –pretty=oneline</strong></p>\n</li>\n<li><p>查看历史操作：<strong>git reflog</strong></p>\n</li>\n</ul>\n<h5 id=\"5-5、实战-回退-穿梭-撤销\"><a href=\"#5-5、实战-回退-穿梭-撤销\" class=\"headerlink\" title=\"5.5、实战(回退\\穿梭\\撤销)\"></a>5.5、实战(回退\\穿梭\\撤销)</h5><ul>\n<li><p>回退到历史版本命令</p>\n<p>一次回退一个版本，一个^代表一个版本数量：<strong>git reset –hard HEAD^</strong></p>\n<p>回退n次操作：<strong>git  reset  –hard HEAD~n</strong></p>\n</li>\n<li><p>版本穿梭命令</p>\n<p>查看历史操作：<strong>git reflog a.txt</strong></p>\n<p>回到最新的版本：git reset –hard 版本号</p>\n</li>\n<li><p>撤销</p>\n<ul>\n<li><p>未add，未commit</p>\n<ul>\n<li>vim修改文件，没有add和commit，进行撤销</li>\n<li>撤销修改(还原原来的文件)：<strong>git checkout – a.txt</strong></li>\n</ul>\n</li>\n<li><p>已add，未commit</p>\n<ul>\n<li><p>vim修改文件，添加add，但没提交commit，进行撤销</p>\n</li>\n<li><p>命令：git add a.txt</p>\n<p>​            <strong>git reset</strong></p>\n</li>\n</ul>\n<p>​                   软回退</p>\n<p>​                   查看文件内容：cat a.txt</p>\n</li>\n</ul>\n<p>​                          查看日志：git reflog a.txt</p>\n</li>\n</ul>\n<h5 id=\"5-6、实战-删除\"><a href=\"#5-6、实战-删除\" class=\"headerlink\" title=\"5.6、实战(删除)\"></a>5.6、实战(删除)</h5><p>① 手动拷贝图片java.jpg到工作空间目录，并查看目录列表：ls -l</p>\n<p>② 添加：git add java.jpg</p>\n<p>③ 提交：git commit -m “新建图片” java.jpg</p>\n<p>④ 删除图片：rm java.jpg</p>\n<p>⑤ 添加：git add java.jpg</p>\n<p>⑥ 提交：git commit -m “新建图片” java.jpg</p>\n<p>⑦ 回退：git reset –hard HEAD^</p>\n<p>⑧ 文件不是被删除了吗？怎么又回来啦！呵呵…</p>\n<p>⑨ 处处留痕：git reflog</p>\n<h5 id=\"5-7、实战-分支\"><a href=\"#5-7、实战-分支\" class=\"headerlink\" title=\"5.7、实战(分支)\"></a>5.7、实战(分支)</h5><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。Git 的master分支并不是一个特殊分支。 它跟其它分支没有区别。 之所以几乎每一个仓库都有 master 分支，是因为git init 命令默认创建它，并且大多数人都懒得去改动它。</p>\n<h6 id=\"o-开发流程，分支概念\"><a href=\"#o-开发流程，分支概念\" class=\"headerlink\" title=\":o: 开发流程，分支概念\"></a>:o: 开发流程，分支概念</h6><p>分支：在使用版本控制工具开发的过程中，同时推进多个任务</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-6.png\" alt=\"image-20210806205659547\" style=\"zoom: 67%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-7.png\" alt=\"image-20210806205724939\" style=\"zoom:80%;\" />\n</div>\n\n<h6 id=\"o-分支好处\"><a href=\"#o-分支好处\" class=\"headerlink\" title=\":o: 分支好处\"></a>:o: 分支好处</h6><p>同时并行推进多个功能开发，提高开发效率</p>\n<p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。 </p>\n<h6 id=\"o-分支操作\"><a href=\"#o-分支操作\" class=\"headerlink\" title=\":o: 分支操作\"></a>:o: 分支操作</h6><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git branch 分支名</td>\n<td>创建分支</td>\n</tr>\n<tr>\n<td>git branch -v</td>\n<td>查看分支</td>\n</tr>\n<tr>\n<td>git checkout 分支名</td>\n<td>切换分支</td>\n</tr>\n<tr>\n<td>git merge 分支名</td>\n<td>把指定的分支合并到当前分支上</td>\n</tr>\n</tbody></table>\n<h6 id=\"o-创建分支和切换分支图解\"><a href=\"#o-创建分支和切换分支图解\" class=\"headerlink\" title=\":o: 创建分支和切换分支图解\"></a>:o: 创建分支和切换分支图解</h6><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-8.jpg\" alt=\"img\"> </p>\n<p>master、hotfix其实都是指向具体版本记录的指针。当前所在的分支，其实是由HEAD决定的。</p>\n<p>HEAD如果指向master，那么我们现在就在master分支上。</p>\n<p>HEAD如果指向hotfix，那么我们现在就在hotfix分支上。</p>\n<p>所以切换分支的<strong>本质就是移动HEAD指针</strong>。</p>\n<h6 id=\"o-合并分支\"><a href=\"#o-合并分支\" class=\"headerlink\" title=\":o: 合并分支\"></a>:o: 合并分支</h6><p>合并分支时一定是涉及到两个分支。这两个分支一个是“当前所在分支”，一个是“目标分支”。</p>\n<p>命令写法：git merge 目标分支</p>\n<ul>\n<li>所以分支合并命令的本质就是把“目标分支”合并到“当前分支”。</li>\n</ul>\n<p>例如：把hotfix合并到master</p>\n<ul>\n<li>git merge hotfx</li>\n<li>需要确保当前所在的分支是master</li>\n</ul>\n<p>例如：把master合并到hotfix</p>\n<ul>\n<li>git merge master</li>\n<li>需要确保当前所在的分支是hotfix</li>\n</ul>\n<h5 id=\"5-8、实战-版本冲突\"><a href=\"#5-8、实战-版本冲突\" class=\"headerlink\" title=\"5.8、实战(版本冲突)\"></a>5.8、实战(版本冲突)</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">Git使用“&lt;&lt;&lt;&lt;&lt;&lt;&lt;、&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;、&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;”符号帮我们标记出来，现在产生冲突的内容。</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nHello Git!I am very happy! &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\nHello Git!I am very happy!\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n表示HEAD指针指向的位置在冲突中的内容</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nHello Git!I am very happy!\nHello Git!I am very happy! ************\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; hotfix\n表示hotfix指针指向的位置在冲突中的内容</code></pre>\n\n<h6 id=\"o-冲突产生的原因\"><a href=\"#o-冲突产生的原因\" class=\"headerlink\" title=\":o: 冲突产生的原因\"></a>:o: 冲突产生的原因</h6><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。</p>\n<h6 id=\"o-冲突的解决\"><a href=\"#o-冲突的解决\" class=\"headerlink\" title=\":o: 冲突的解决\"></a>:o: 冲突的解决</h6><p>① 编辑有冲突的文件，删除特殊符号，决定要使用的内容</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-9.png\" alt=\"img\"> </p>\n<p>② 添加到暂存区</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-10.png\" alt=\"img\"> </p>\n<p>③ 执行提交（注意：使用git commit命令时不能带文件名）</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-11.png\" alt=\"img\"> </p>\n<h6 id=\"o-避免冲突\"><a href=\"#o-避免冲突\" class=\"headerlink\" title=\":o: 避免冲突\"></a>:o: 避免冲突</h6><ul>\n<li><p>容易冲突的操作方式</p>\n<p>多个人同时操作了同一个文件</p>\n<p>一个人一直写不提交</p>\n<p>修改之前不更新最新代码</p>\n<p>提交之前不更新最新代码</p>\n<p>擅自修改同事代码</p>\n</li>\n<li><p>减少冲突的操作方式</p>\n<p>养成良好的操作习惯，先<code>pull</code>在修改,修改完立即<code>commit</code>和<code>push</code></p>\n<p>一定要确保自己正在修改的文件是最新版本的</p>\n<p>各自开发各自的模块</p>\n<p>如果要修改公共文件，一定要先确认有没有人正在修改</p>\n<p>下班前一定要提交代码,上班第一件事拉取最新代码</p>\n<p>一定不要擅自修改同事的代码</p>\n</li>\n</ul>\n<h4 id=\"6、Git远程库实战\"><a href=\"#6、Git远程库实战\" class=\"headerlink\" title=\"6、Git远程库实战\"></a>6、Git远程库实战</h4><hr>\n<h5 id=\"6-1、Git代码托管服务\"><a href=\"#6-1、Git代码托管服务\" class=\"headerlink\" title=\"6.1、Git代码托管服务\"></a>6.1、Git代码托管服务</h5><p>前面我们已经知道了Git中存在两种类型的仓库，即****本地仓库*<em><strong>和</strong></em>*远程仓库****。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p>\n<ul>\n<li><p>gitHub（ 地址：<a href=\"https://github.com/\">https://github.com/</a> ）</p>\n<p>是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub</p>\n</li>\n<li><p>码云（地址： <a href=\"https://gitee.com/\">https://gitee.com/</a> ）</p>\n<p>是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</p>\n</li>\n<li><p>GitLab （地址： <a href=\"https://about.gitlab.com/\">https://about.gitlab.com/</a> ）</p>\n<p>是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</p>\n</li>\n</ul>\n<h5 id=\"6-2、团队内协作-过程及命令\"><a href=\"#6-2、团队内协作-过程及命令\" class=\"headerlink\" title=\"6.2、团队内协作 - 过程及命令\"></a>6.2、团队内协作 - 过程及命令</h5><p>一共9个步骤：我们完全按照9个步骤的流程来进行练习。做到熟练掌握。</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-12.png\" alt=\"image-20210806211751929\"></p>\n<table>\n<thead>\n<tr>\n<th>要点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">本地仓库关联远端仓库，git  commit -m /  git  push的使用</font></td>\n</tr>\n<tr>\n<td><font color=\"1dd3bd\">命令大全：</font><a href=\"https://www.cnblogs.com/wf-linux/p/11009396.html\">https://www.cnblogs.com/wf-linux/p/11009396.html</a></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* 在本机创建一个库（出现 .git文件夹）：git\tinit\n\n  从远端克隆一个库： git  clone  仓库地址\n\n* 创建文件：touch 文件名\n\n* 查看文件的状态（4种）：git  status\n\n* 将工作空间中的所有文件提交到暂存区：git  add  .\n\n* 将暂存区的文件提交到版本库：git  commit  -m [commit message]\n\n* 本地创建的库关联远端仓库：git remote add origin 仓库地址\n\n* 将本地文件提交到远端：git  push\n\n* 更新Git，输入git update-git-for-windows</code></pre>\n\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-%E5%91%BD%E4%BB%A4%E8%84%91%E5%9B%BE.png\" alt=\"git1\"></p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/git-%E5%91%BD%E4%BB%A4%E8%84%91%E5%9B%BE2.png\" alt=\"image-20200825145339720\"></p>\n<h4 id=\"7、Git-忽略文件及SSH与码云连接\"><a href=\"#7、Git-忽略文件及SSH与码云连接\" class=\"headerlink\" title=\"7、Git 忽略文件及SSH与码云连接\"></a>7、Git 忽略文件及SSH与码云连接</h4><hr>\n<h5 id=\"7-1、创建忽略规则文件（git-ignore）\"><a href=\"#7-1、创建忽略规则文件（git-ignore）\" class=\"headerlink\" title=\"7.1、创建忽略规则文件（git.ignore）\"></a>7.1、创建忽略规则文件（git.ignore）</h5><p>这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig文件引用，建议也放在用户家目录下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等\n\n在主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则：\n\n1. 忽略文件中的空行或以井号（#）开始的行将会被忽略。\n\n2. 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（&#123;string1,string2,...&#125;）代表可    选的字符串等。\n\n3. 如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。\n\n4. 如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。\n\n5. 如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。\n\n例子：\n\n    fd1&#x2F;* ：说明：忽略目录 fd1 下的全部内容，不管是根目录下的 &#x2F;fd1&#x2F; 目录，还是某个子目录 &#x2F;child&#x2F;fd1&#x2F; 目录，都会被忽略；\n\n    &#x2F;fd1&#x2F;* ：说明：忽略根目录下的 &#x2F;fd1&#x2F; 目录的全部内容；\n    \n    &#x2F;*    !.gitignore\n    说明：忽略全部内容，但是不忽略 .gitignore 文件；</code></pre>\n\n<p>忽略文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Compiled class file\n*.class\n \n# Log file\n*.log\n \n# BlueJ files\n*.ctxt\n \n# Mobile Tools for Java (J2ME)\n.mtj.tmp&#x2F;\n \n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n \n# virtual machine crash logs, see http:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;download&#x2F;help&#x2F;error_hotspot.xml\nhs_err_pid*\n \n.classpath\n.project\n.settings\ntarget\n.idea\n*.iml</code></pre>\n\n\n\n<h5 id=\"7-2、在-gitconfig中引用忽略文件\"><a href=\"#7-2、在-gitconfig中引用忽略文件\" class=\"headerlink\" title=\"7.2、在.gitconfig中引用忽略文件\"></a>7.2、在.gitconfig中引用忽略文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[user]\nname &#x3D; peter\nemail &#x3D; peter@atguigu.com\n[core]\nexcludesfile &#x3D; C:&#x2F;Users&#x2F;Lenovo&#x2F;git.ignore</code></pre>\n\n<p>注意：这里要使用“正斜线（/）”，不要使用“反斜线（\\）”</p>\n<h5 id=\"7-3、SSH公钥实现与码云连接\"><a href=\"#7-3、SSH公钥实现与码云连接\" class=\"headerlink\" title=\"7.3、SSH公钥实现与码云连接\"></a>7.3、SSH公钥实现与码云连接</h5><p><font color=\"ff6473\">用户名邮箱和ssh公钥 必须配置，用户名邮箱代表你本机的信息，ssh公钥实现与码云连接，免密码登录</font></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">设置本机绑定SSH公钥，实现免密码登录！\n\n   生成本机ssh公钥：ssh-keygen -t rsa -C “你的邮箱&quot;\n\n   查看生成的公钥：cat ~&#x2F;.ssh&#x2F;id_rsa.pub\n\n   公钥所在目录：C:\\Users\\Lenovo \\ .ssh \\ id_rsa.pub\n\n   最后将将公钥信息public key 添加到码云账户中即可！</code></pre>\n\n\n\n<h4 id=\"8、Git在-IDEA中的使用\"><a href=\"#8、Git在-IDEA中的使用\" class=\"headerlink\" title=\"8、Git在 IDEA中的使用\"></a>8、Git在 IDEA中的使用</h4><table>\n<thead>\n<tr>\n<th>注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><font color=\"ff6473\">这里直接引用了一篇非常好的博客：</font><a href=\"https://www.cnblogs.com/Lyn4ever/p/10994093.html\">https://www.cnblogs.com/Lyn4ever/p/10994093.html</a>  外盘中有备份</td>\n</tr>\n</tbody></table>\n","text":"1、版本控制 1.1、什么是版本控制版本控制 (Revision control)：是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。 ① 本地版本控制系统：RCS 记录文件每次的更新，可以对每个版本做...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/categories/Project-Manager.json"}],"tags":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/tags/Project-Manager.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1、版本控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.1、什么是版本控制</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">1.2、版本控制的好处</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Git-%E5%92%8C-Svn%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.3、Git 和 Svn的区别</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%9D%E8%AF%86Git\"><span class=\"toc-text\">2、初识Git</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1%E3%80%81Git%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2.1、Git工作机制</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E4%B8%AD%E5%BF%83\"><span class=\"toc-text\">2.2、代码托管中心</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3%E3%80%81Git%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">2.3、Git简述</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%89%E8%A3%85Git%EF%BC%8C%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">3、安装Git，简单理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%EF%BC%9AGit-for-windows\"><span class=\"toc-text\">3.1、命令行工具：Git for windows</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%9ATortoiseGit-%E4%BA%86%E8%A7%A3\"><span class=\"toc-text\">3.2、可视化工具：TortoiseGit(了解)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3%E3%80%81GitHub-Gitee%E7%BD%91%E7%AB%99\"><span class=\"toc-text\">3.3、GitHub Gitee网站</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4%E3%80%81%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%EF%BC%9A%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%AD%BE%E5%90%8D\"><span class=\"toc-text\">3.4、安装完成：设置全局签名</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%B7%A5%E4%BD%9C%E5%8C%BA%E3%80%81%E7%89%88%E6%9C%AC%E5%BA%93%E3%80%81%E6%9A%82%E5%AD%98%E5%8C%BA\"><span class=\"toc-text\">4、工作区、版本库、暂存区</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.1、基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2%E3%80%81%E6%8F%90%E4%BA%A4Git%E7%89%88%E6%9C%AC%E5%BA%93%E5%88%86%E4%B8%A4%E6%AD%A5%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">4.2、提交Git版本库分两步执行</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81Git%E6%9C%AC%E5%9C%B0%E5%BA%93%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">5、Git本地库实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1%E3%80%81%E6%9C%AC%E5%9C%B0%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">5.1、本地库常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2%E3%80%81%E5%AE%9E%E6%88%98-%E5%88%9D%E5%A7%8B%E5%8C%96%E7%89%88%E6%9C%AC%E5%BA%93\"><span class=\"toc-text\">5.2、实战 (初始化版本库)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E5%AE%9E%E6%88%98-%E6%96%B0%E5%BB%BA-%E6%8F%90%E4%BA%A4-%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">5.3、实战 (新建\\提交\\状态)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-4%E3%80%81%E5%AE%9E%E6%88%98-%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">5.4、实战(查看日志)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-5%E3%80%81%E5%AE%9E%E6%88%98-%E5%9B%9E%E9%80%80-%E7%A9%BF%E6%A2%AD-%E6%92%A4%E9%94%80\"><span class=\"toc-text\">5.5、实战(回退\\穿梭\\撤销)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-6%E3%80%81%E5%AE%9E%E6%88%98-%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">5.6、实战(删除)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-7%E3%80%81%E5%AE%9E%E6%88%98-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">5.7、实战(分支)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%EF%BC%8C%E5%88%86%E6%94%AF%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">:o: 开发流程，分支概念</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%88%86%E6%94%AF%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">:o: 分支好处</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">:o: 分支操作</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%92%8C%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E5%9B%BE%E8%A7%A3\"><span class=\"toc-text\">:o: 创建分支和切换分支图解</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF\"><span class=\"toc-text\">:o: 合并分支</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-8%E3%80%81%E5%AE%9E%E6%88%98-%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">5.8、实战(版本冲突)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%86%B2%E7%AA%81%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">:o: 冲突产生的原因</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">:o: 冲突的解决</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#o-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">:o: 避免冲突</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81Git%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">6、Git远程库实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1%E3%80%81Git%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">6.1、Git代码托管服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-2%E3%80%81%E5%9B%A2%E9%98%9F%E5%86%85%E5%8D%8F%E4%BD%9C-%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6.2、团队内协作 - 过程及命令</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81Git-%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%8F%8ASSH%E4%B8%8E%E7%A0%81%E4%BA%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">7、Git 忽略文件及SSH与码云连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-1%E3%80%81%E5%88%9B%E5%BB%BA%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99%E6%96%87%E4%BB%B6%EF%BC%88git-ignore%EF%BC%89\"><span class=\"toc-text\">7.1、创建忽略规则文件（git.ignore）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-2%E3%80%81%E5%9C%A8-gitconfig%E4%B8%AD%E5%BC%95%E7%94%A8%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">7.2、在.gitconfig中引用忽略文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-3%E3%80%81SSH%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%A0%81%E4%BA%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">7.3、SSH公钥实现与码云连接</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E3%80%81Git%E5%9C%A8-IDEA%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">8、Git在 IDEA中的使用</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SVN","uid":"f2c49803fec94cd24a1c1407e5e84879","slug":"63-Svn","date":"2021-09-13T15:39:32.000Z","updated":"2021-09-15T10:47:00.975Z","comments":true,"path":"api/articles/63-Svn.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog1.jpg","text":"1. SVN是什么SVN的全称是subVersion，Svn版本控制软件可以解决协助开发，远程开发，和版本回退三个问题。 特点：操作简单，入门简单，跨平台操作。 SVN是输入 C/S服务类软件，有客户端和服务端。 2. SVN服务端 重要 创建服务器项目仓库，复制仓库地址，在本机...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/categories/Project-Manager.json"}],"tags":[{"name":"Project Manager","slug":"Project-Manager","count":3,"path":"api/tags/Project-Manager.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Spring项目（1）","uid":"a35ab763af39963a3c8e8b221affe22c","slug":"61-美年旅游易错点（未完）","date":"2021-09-13T15:38:32.000Z","updated":"2021-09-15T10:47:10.962Z","comments":true,"path":"api/articles/61-美年旅游易错点（未完）.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog3.jpg","text":":one: spring整合mybatis时如果只使用&lt;mybatis:scan base-package=&quot;&quot;/&gt;时，mapper（dao）接口的 路径名 及 接口名 都要（必须）与mapper映射文件的 路径名 及 接口名 一样 如果在整合的b...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Project","slug":"Project","count":1,"path":"api/categories/Project.json"}],"tags":[{"name":"Project","slug":"Project","count":1,"path":"api/tags/Project.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}