{"title":"JDBC 基础总结","uid":"43229a92952aad915ea9d7e4fe26c570","slug":"22-JDBC总结","date":"2021-09-13T14:57:32.000Z","updated":"2021-09-15T10:20:24.388Z","comments":true,"path":"api/articles/22-JDBC总结.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","content":"<h3 id=\"一、JDBC的本质\"><a href=\"#一、JDBC的本质\" class=\"headerlink\" title=\"一、JDBC的本质\"></a>一、JDBC的本质</h3><h4 id=\"1、JDBC是什么？\"><a href=\"#1、JDBC是什么？\" class=\"headerlink\" title=\"1、JDBC是什么？\"></a>1、JDBC是什么？</h4><p>Java Database  Connectuvity（java语言数据库）</p>\n<p>使用java语言操作数据库</p>\n<h4 id=\"2、JDBC的本质是什么？\"><a href=\"#2、JDBC的本质是什么？\" class=\"headerlink\" title=\"2、JDBC的本质是什么？\"></a>2、JDBC的本质是什么？</h4><ul>\n<li><p>JDBC是SUN公司指定的<strong>一套接口</strong>(interface)：java.sql.*; (这个软件包下有很多接口)</p>\n</li>\n<li><p>接口都有调用者和实现者</p>\n<p>面向接口调用，面向接口写实现类，这都属于面向接口编程</p>\n</li>\n<li><p><span style=\"color:#eb6383;\">为什么要面向接口编程？</span></p>\n<p><span style=\"color:#eb6383;\">解耦合：降低程序的耦合性，提高程序的扩展力</span></p>\n<p>多态机制就是非常非典型的：面向抽象编程（不要面向程序编程，耦合性大，牵一发而动全身）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">即建议：\nAnimal   a &#x3D;   new Cat();\nAnimal   a &#x3D;   new  Dog();\n\n不建议：\nCat  a&#x3D;new Cat();\nDog a&#x3D;new  Dog();</code></pre></li>\n<li><p>SUN公司制定这样一套接口？</p>\n<p>因为每一个数据库的底层实现原理不一样。</p>\n<p>Oracle，MySql，MS Sqlserver数据库都有自己独特的的实现原理。</p>\n<p><span style=\"color:#eb6383;\">于是各个厂遵循了JDBC规范，制定了可以访问自己数据库的API，被称之为驱动！</span></p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/jdbc1.jpg\" alt=\"20180729201036257\"></p>\n<h4 id=\"3、JDBC创建步骤（背会）\"><a href=\"#3、JDBC创建步骤（背会）\" class=\"headerlink\" title=\"3、JDBC创建步骤（背会）\"></a>3、JDBC创建步骤（背会）</h4><p>第一步：注册驱动（作用：告诉Java程序，即将要连接的是哪个品牌的数据库）</p>\n<p>第二步：获取连接（表示JVM的进程和数据库进程之间的通道打开了，这属于进程之间的通信，重量级的，使用完之后一定要关闭通道。）</p>\n<p>第三步：执行SQL语句并处理结果（DQL DML….）(编写sql，获取数据库操作对象，执行sql，处理结果)（大部分时候只有执行的是select语句的时候，才有处理查询结果集。）</p>\n<p>第四步：释放资源（使用完资源之后一定要关闭资源。Java和数据库属于进程间的通信，开启之后一定要关闭。）</p>\n<h4 id=\"4、两种思想\"><a href=\"#4、两种思想\" class=\"headerlink\" title=\"4、两种思想\"></a>4、两种思想</h4><ul>\n<li><p>面向接口编程的思想</p>\n</li>\n<li><p>ORM思想(object relational mapping)</p>\n<ul>\n<li>一个数据表对应一个java类</li>\n<li>表中的一条记录对应java类的一个对象</li>\n<li>表中的一个字段对应java类的一个属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、步骤详解\"><a href=\"#二、步骤详解\" class=\"headerlink\" title=\"二、步骤详解\"></a>二、步骤详解</h3><h4 id=\"1、注册驱动\"><a href=\"#1、注册驱动\" class=\"headerlink\" title=\"1、注册驱动\"></a>1、注册驱动</h4><h5 id=\"1-1、第一种方式（不常用）\"><a href=\"#1-1、第一种方式（不常用）\" class=\"headerlink\" title=\"1.1、第一种方式（不常用）\"></a>1.1、第一种方式（不常用）</h5><ul>\n<li>public interface Driver<br>每个驱动程序类必须实现的接口(接口的实现 — 多态)<br>当加载一个Driver类时，它应该创建一个自己的实例，并用DriverManager注册它</li>\n<li>com.mysql.jdbc.Driver<br>是Driver接口的实现类<br>该类就在 mysql-connector-java-5.0.8-bin.jar中。</li>\n<li>public class DriverManager extends Object<br>用于管理一组JDBC驱动程序的基本服务</li>\n<li>registerDriver(Driver driver)<br>DriverManager的方法，使用 DriverManager注册给定的驱动程序。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">代码实现\njava.sql.Driver driver &#x3D; new com.mysql.jdbc.Driver();\nDriverManager.registerDriver(driver);</code></pre>\n\n<h5 id=\"1-2、第二种方式（最常用）\"><a href=\"#1-2、第二种方式（最常用）\" class=\"headerlink\" title=\"1.2、第二种方式（最常用）\"></a>1.2、第二种方式（最常用）</h5><ul>\n<li><p>Class.forName<br>可以把一个类加载到JVM中，加载的时候,会 执行其中的 静态初始化块，完成其初始化的相关工作<br>静态代码块在类加载时执行，并且只执行一次</p>\n</li>\n<li><p>在 com.mysql.jdbc.Drive中，有这样的一段静态代码块</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static &#123;\n    try &#123;\n       java.sql.DriverManager.registerDriver(new Driver());\n    &#125; catch (SQLException E) &#123;\n       throw new RuntimeException(&quot;Can&#39;t register driver!&quot;);\n    &#125;\n  &#125;</code></pre></li>\n<li><p>所以可以用class.forName 加载此代码块，调用 java.sql.DriverManager.registerDriver(new Driver())</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*代码实现\nClass.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n*常用的原因\n以上方法不需要返回值，参数是一个字符串，以后可以写到 xxx.properties 文件中</code></pre>\n\n<h4 id=\"2、获取连接\"><a href=\"#2、获取连接\" class=\"headerlink\" title=\"2、获取连接\"></a>2、获取连接</h4><ul>\n<li><p>public interface Connection  extends Wrapper, AutoCloseable<br>与特定数据库的连接（会话）。 执行SQL语句并在连接的上下文中返回结果</p>\n</li>\n<li><p>public static Connection getConnection(String url,String user,String password)<br>尝试建立与给定数据库URL的连接。 DriverManager尝试从一组已注册的JDBC驱动程序中选择<br>适当的驱动程序。| 使用的时候需要导包，而且必须在程序结束的时候将其关闭 |</p>\n</li>\n<li><p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String url &#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;testdb?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&quot;;\nString user &#x3D; &quot;wx&quot;;\nString password &#x3D; &quot;091599&quot;;\nConnection conn &#x3D; DriverManager.getConnection(url,user,password);\nSystem.out.println(conn&#x3D;&#x3D;null?&quot;连接失败&quot;:&quot;连接成功&quot;);    </code></pre></li>\n<li><p>关于 url </p>\n<p>概念：url是网络中的某个资源的绝对路径（统一资源定位符）</p>\n<p>包括：协议，ip，port(端口)，资源名</p>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/jdbc2.png\" alt=\"下载 (1)\"></p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/xiuxiuai/picture/raw/master/img/jdbc3.png\" alt=\"下载\"></p>\n<ul>\n<li><p>上述的通信协议是什么，有什么用</p>\n<p><span style=\"color:#00909e;\">通信协议就是通信之前就提前定好的数据传送格式。数据包具体怎么传数据，格式是提前定好的</span></p>\n</li>\n</ul>\n<h4 id=\"3、执行SQL语句并处理结果\"><a href=\"#3、执行SQL语句并处理结果\" class=\"headerlink\" title=\"3、执行SQL语句并处理结果\"></a>3、执行SQL语句并处理结果</h4><h5 id=\"3-1、编写SQL语句\"><a href=\"#3-1、编写SQL语句\" class=\"headerlink\" title=\"3.1、编写SQL语句\"></a>3.1、编写SQL语句</h5><h5 id=\"3-2、获取数据库操作对象\"><a href=\"#3-2、获取数据库操作对象\" class=\"headerlink\" title=\"3.2、获取数据库操作对象\"></a>3.2、获取数据库操作对象</h5><ol>\n<li>第一种（存在sql注入）<ul>\n<li>创建Statement对象</li>\n<li>方法：Statement <strong>createStatement()</strong>  throws SQLException<br>(Connection里的方法，用conn调用)创建之后，可以执行SQL语句，完成对数据库的增删改查。</li>\n<li>代码实现<br>Statement stmt = conn.createStatement();</li>\n</ul>\n</li>\n<li>第二种（解决sql注入）<ul>\n<li>创建PreparedStatement对象</li>\n<li>代码实现<br>PreparedStatement pstmt = conn.prepareStatement(String s[“sql语句”]) </li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-3、执行SQL语句\"><a href=\"#3-3、执行SQL语句\" class=\"headerlink\" title=\"3.3、执行SQL语句\"></a>3.3、执行SQL语句</h5><p>增删改执行用 executeUpdate<br>查询自行用 executeQuery</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">执行DML 语句的方法\n\n*步骤\n1、int executeUpdate(String sql)  throws SQLException  \n(Statement的方法，返回 int类型的 值)\n    \n2、此方法 不执行 DQL 语句 ，专门执行DML语句的（insert delete update）\n或者不返回任何内容，如DDL的SQL语句\n\n3、返回的值是  “影响数据库中的记录条数”\n\n4、注意：java 中的 sql语句不能分号结尾\n\t\n*代码实现\nint count &#x3D; stmt.executeUpdate(sql);</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*执行 DQL 语句的方法\n    \n1.ResultSet executeQuery​(String sql) throws SQLException\n\t  执行给定的SQL语句，返回一个  ResultSet（结果集）对象。\n\t  \n2.参数 sql - 要发送到数据库的SQL语句，通常为静态 &#123;SQL SELECT语句&#125;</code></pre>\n\n<h5 id=\"3-4、处理查询结果集\"><a href=\"#3-4、处理查询结果集\" class=\"headerlink\" title=\"3.4、处理查询结果集\"></a>3.4、处理查询结果集</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*步骤\n1.public interface ResultSet extends Wrapper, AutoCloseable\n表示数据库结果集的数据表，通常通过 &#123;执行查询&#125; 数据库的语句生成。\n    \n2.boolean next() 将光标从当前位置向前移动一行\n比较像 iterator 的 hasNext 下一行有数据的情况下，返回true否则false\n    \n3.所以为了减少代码的重复\n用while循环改进，能一次读出来全部信息\n    \n4，String getString​(int columnIndex) throws SQLException\n检索此 ResultSet对象的当前行中指定列的值为Java编程语言中的 String 。 \n参数：columnIndex - 第一列是1，第二列是2\n    \n5.为了代码的健壮性，getString的参数一般不写数字（列的索引），因为如果改变了数据库中列的顺序\n查询的结果就不对应了，不方便观察\n直接写SQL语句中想要查询的对应的列名，如果sql语句中用as改变列名，那这里应写改变后的列名</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">代码实现\nrs &#x3D; stmt.executeQuery(sql);\n    while (rs.next()) &#123;\n    String 学号 &#x3D; rs.getString(&quot;学号&quot;);\n    String 课程号 &#x3D; rs.getString(&quot;课程号&quot;);\n    String 成绩 &#x3D; rs.getString(&quot;成绩&quot;);\n    String 学分 &#x3D; rs.getString(&quot;学分&quot;);\n    System.out.println(学号 + &quot;|&quot; + 课程号 + &quot;|&quot; + 成绩 + &quot;|&quot; + 学分);\n    &#125;</code></pre>\n\n<h4 id=\"4、释放资源\"><a href=\"#4、释放资源\" class=\"headerlink\" title=\"4、释放资源\"></a>4、释放资源</h4><ul>\n<li>为了保证资源一定释放，在finally语句中关闭资源</li>\n<li>并且要遵循从小到大，依次关闭</li>\n<li>分别对其 try..catch..</li>\n</ul>\n<h3 id=\"三、用户登录实现（存在sql注入）\"><a href=\"#三、用户登录实现（存在sql注入）\" class=\"headerlink\" title=\"三、用户登录实现（存在sql注入）\"></a>三、用户登录实现（存在sql注入）</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*编程思路\n\t1.需求：\n\t  模拟用户登录功能实现\n\t\n\t2.业务描述:\n\t  程序运行的时候，提供一个输入的入口（scanner），可以让用户输入用户名和密码\n\t  用户输入用户名和密码后提交信息，Java程序收集到用户信息\n\t  java连接数据库验证数据信息是否合法\n\t  合法：登陆成功  不合法：登陆失败\n\t  \n\t3.数据的准备：\n\t  在实际开发中，表的设计会使用专业的建模工具，例如：PowerDesigner\n\t  使用其进行设计\n\t  \n*关于 sql注入 的问题\n\t  1.输用户名：fdsa\n        输入密码：fdsa&#39; or &#39;1&#39;&#x3D;&#39;1\n        登录结果：成功\n        这条信息并不是我们数据库中的信息，但还是登陆成功了，这种现象叫做 sql注入（安全隐患）\n        \n      2.导致 sql注入 的根本原因是什么？\n        用具输入的信息中有 sql关键字，并且这些关键字参与了sql语句的编译过程\n        导致sql语句的原本意思被扭曲，进而达到sql注入\n        \n      3.经过调试可知，上述用户名密码输入后，查询语句变为：\n        select * from user where userName&#x3D;&#39;fdsa&#39; and userPwd&#x3D;&#39;fdsa&#39; or &#39;1&#39;&#x3D;&#39;1&#39;\n        分析可知，无论 or 前面的用户名是什么，后面的 1&#x3D;1 都一直成立，</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package JDBCTest03;\n\nimport java.sql.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class test01_userlogin &#123;\n\n    public static void main(String[] args) &#123;\n\n        &#x2F;&#x2F;1.初始化登录页面\n        Map&lt;String,String&gt; userloginInfo &#x3D; initUI();\n\n        &#x2F;&#x2F;2.验证登录信息\n        boolean loginSuccess &#x3D; login(userloginInfo);\n        System.out.println(loginSuccess ? &quot;登陆成功&quot; : &quot;登录失败&quot; );\n\t&#125;\n    &#x2F;*\n     * 用户登录\n     * @param userloginInfo 用户登陆成功\n     * @return false表示失败，true表示成功\n     * *&#x2F;\n    private static boolean login(Map&lt;String, String&gt; userloginInfo) &#123;\n\n        boolean loginSuccess &#x3D; false;\n\n        Connection conn &#x3D;null;\n        Statement stmt &#x3D; null;\n        ResultSet rs &#x3D; null;\n\n        try &#123;\n\n            &#x2F;&#x2F;1.注册驱动\n            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n            &#x2F;&#x2F;2.获取连接\n            conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db_sql&quot;,&quot;root&quot;,&quot;123&quot;);\n            &#x2F;&#x2F;3.获取数据库操作对象\n            stmt &#x3D; conn.createStatement();\n            &#x2F;&#x2F;4.执行sql语句\n            String sql &#x3D; &quot;select * from user where userName&#x3D;&#39;&quot;+userloginInfo.get(&quot;userName&quot;)+ &quot;&#39; \n            \t\t      and userPwd&#x3D;&#39;&quot;+userloginInfo.get(&quot;userPwd&quot;)+&quot;&#39;&quot;;\n            rs &#x3D; stmt.executeQuery(sql);\n            &#x2F;&#x2F;5.处理查询结果集\n            if(rs.next())&#123;\n            \tloginSuccess &#x3D; true;\n            &#125;\n        &#125;catch (SQLException e)&#123;\n            e.printStackTrace();\n        &#125;catch (ClassNotFoundException e)&#123;\n            e.printStackTrace();\n        &#125; finally&#123;\n\n\n            &#x2F;&#x2F;6.关闭资源\n            try &#123;\n                   if(rs !&#x3D; null)&#123;\n                   \t\trs.close();\n                   &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                   if(stmt !&#x3D; null)&#123;\n                   \t\tstmt.close();\n                   &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                   if(conn !&#x3D; null)&#123;\n                   \t\tconn.close();\n                   &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n\n        return loginSuccess;\n    &#125;\n\n    private static Map&lt;String, String&gt; initUI() &#123;\n        \n        Scanner sc &#x3D; new Scanner(System.in);\n        \n        System.out.print(&quot;请输入用户名：&quot;);\n        String userName &#x3D; sc.nextLine();\n        \n        System.out.print(&quot;请输入密码：&quot;);\n        String userPwd &#x3D; sc.nextLine();\n        \n        Map&lt;String,String&gt; userloginInfo &#x3D; new HashMap&lt;String,String&gt;();\n        userloginInfo.put(&quot;userName&quot;,username);\n        userloginInfo.put(&quot;userPwd&quot;,userPwd);\n        \n        return userloginInfo;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"四、解决SQL注入\"><a href=\"#四、解决SQL注入\" class=\"headerlink\" title=\"四、解决SQL注入\"></a>四、解决SQL注入</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*解决措施\n    1.只要用户提供的信息，不参与sql语句编译过程，就可以解决了\n\n    2.即使用户提供的信息中建有关键字，但没有参与编译，，就不起作用\n\n    3.要想用户信息不参与SQL语句的编译，那么必须使用java.sql.PreparedStatement\n\n    4.PreparedStatement继承了Statement\n      是属于预编译的数据库操作对象\n    \n*重要\n    5.preparedStatement原理是：预先对Sql语句的框架进行编译，然后再给sql传值\n\n    \n*分析：\n\t1.String sql &#x3D; &quot;select * from user where userName&#x3D;? and userPwd&#x3D;?&quot;;\n      先加载数据库sql语句的框架，其中一个 ? 代表一个占位符，一个问号 将来要接受一个 “值”\n       注意：占位符不能使用单引号括起来\n        \n    2.数据执行到 ps &#x3D; conn.prepareStatement(sql); \n      会把数据库 sql语句的框子 传给DBMS ，然后DBMS进行sql语句的预先编译\n          \n    3.给占位符 ? 传值 ，第一个问号 下标是1，第二个问号 下标是2.jdbc中所有下标从1开始\n          ps.setString(1,userName);   ps.setString(2,userPwd);</code></pre>\n\n<ul>\n<li><span style=\"color:red; font-size:20px;font-weight:bold;\">正确完整登录案例</span></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package JDBCTest03;\n\nimport java.sql.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class test02_Prepare &#123;\n\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;1.初始化登路界面(返回用户信息，map接收)\n        Map&lt;String , String&gt; userLoginInfo &#x3D; initUI();\n        &#x2F;&#x2F;2.验证用户登录信息(创建方法，传入参数，提供验证，返回true或false)\n        boolean loginSuccess &#x3D; login(userLoginInfo);\n        System.out.println(loginSuccess ? &quot;登陆成功&quot;:&quot;登陆失败&quot;);\n    &#125;\n\n    private static boolean login(Map&lt;String, String&gt; userLoginInfo) &#123;\n\n        String userName &#x3D; userLoginInfo.get(&quot;userName&quot;);\n        String userPwd &#x3D; userLoginInfo.get(&quot;userPwd&quot;);\n\n        boolean loginSuccess &#x3D; false;\n\n        Connection conn &#x3D; null;\n        PreparedStatement ps &#x3D; null;\n        ResultSet rs &#x3D; null;\n\n        &#x2F;&#x2F;JDBC六\n        try &#123;\n            &#x2F;&#x2F;1.注册驱动\n            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n            &#x2F;&#x2F;2.获取连接\n            conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db_sql&quot;,&quot;root&quot;,&quot;hhhh&quot;);\n            &#x2F;&#x2F;3.获取预编译数据库操作对象\n            String sql &#x3D; &quot;select * from user where userName&#x3D;? and userPwd&#x3D;?&quot;;\n            ps &#x3D; conn.prepareStatement(sql);\n            ps.setString(1,userName);\n            ps.setString(2,userPwd);\n            &#x2F;&#x2F;4.执行sql语句\n            rs &#x3D; ps.executeQuery();\n            &#x2F;&#x2F;5.处理是查询结果集\n            if(rs.next())&#123;\n                loginSuccess &#x3D; true;\n            &#125;\n        &#125;catch (SQLException e)&#123;\n            e.printStackTrace();\n        &#125;catch (ClassNotFoundException e)&#123;\n            e.printStackTrace();\n        &#125;finally&#123;\n            &#x2F;&#x2F;6.关闭资源\n            try &#123;\n                if(rs !&#x3D; null)&#123;\n                    rs.close();\n                &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ps !&#x3D; null)&#123;\n                    ps.close();\n                &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(conn !&#x3D; null)&#123;\n                    conn.close();\n                &#125;\n            &#125;catch (SQLException e)&#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        return loginSuccess;\n    &#125;\n\n    private static Map&lt;String, String&gt; initUI() &#123;\n        &#x2F;&#x2F;提供用户输入口\n        Scanner sc &#x3D; new Scanner(System.in);\n\n        System.out.print(&quot;请输入用户名：&quot;);\n        String userName &#x3D; sc.nextLine();\n\n        System.out.print(&quot;请输入密码：&quot;);\n        String userPwd &#x3D; sc.nextLine();\n        &#x2F;&#x2F;接收数据\n        Map&lt;String,String&gt; userLoginInfo &#x3D; new HashMap&lt;String, String&gt;();\n        userLoginInfo.put(&quot;userName&quot;,userName);\n        userLoginInfo.put(&quot;userPwd&quot;,userPwd);\n\n        &#x2F;&#x2F;返回给用户登录信息的 Map集合\n        return userLoginInfo;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"五、Stmt与PStmt比较\"><a href=\"#五、Stmt与PStmt比较\" class=\"headerlink\" title=\"五、Stmt与PStmt比较\"></a>五、Stmt与PStmt比较</h3><ol>\n<li>Statement 存在sql注入问题，preparedStatement解决了sql注入问题</li>\n<li>Statement 编译一次运行一次，preparedStatement编译一次可以运行 n 次，PreparedStatement的效率更高</li>\n<li>PreparedStatement会在编译阶段做安全检查，因为setString要求后面的字符串是String类型，不给引号就报错，但是Statement并不会，所以：99%的情况下选用PreparedStatement，但是也有个别情况适用Statement</li>\n<li>什么情况需要Statementne？<ul>\n<li>业务方面要求必须支持sql注入</li>\n<li>凡是业务要求需要进行sql语句拼接的，必须使用。比如升序降序，如果用preparedStatement传值的话，会给desc/asc 自动加单引号，这样就不符合sql语句规则了，所以，此时需要Statement</li>\n</ul>\n</li>\n<li>做拼接的时候，如下：<br>String sql = “select * from xs_kc order by 学号 “+s;  </li>\n</ol>\n","text":"一、JDBC的本质1、JDBC是什么？Java Database Connectuvity（java语言数据库） 使用java语言操作数据库 2、JDBC的本质是什么？ JDBC是SUN公司指定的一套接口(interface)：java.sql.*; (这个软件包下有很多接口) ...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JDBC","slug":"JDBC","count":4,"path":"api/categories/JDBC.json"}],"tags":[{"name":"JDBC","slug":"JDBC","count":4,"path":"api/tags/JDBC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81JDBC%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">一、JDBC的本质</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81JDBC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1、JDBC是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81JDBC%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2、JDBC的本质是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81JDBC%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4%EF%BC%88%E8%83%8C%E4%BC%9A%EF%BC%89\"><span class=\"toc-text\">3、JDBC创建步骤（背会）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%B8%A4%E7%A7%8D%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">4、两种思想</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">二、步骤详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B3%A8%E5%86%8C%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">1、注册驱动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%8D%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">1.1、第一种方式（不常用）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88%E6%9C%80%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">1.2、第二种方式（最常用）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">2、获取连接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%89%A7%E8%A1%8CSQL%E8%AF%AD%E5%8F%A5%E5%B9%B6%E5%A4%84%E7%90%86%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">3、执行SQL语句并处理结果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E7%BC%96%E5%86%99SQL%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.1、编写SQL语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.2、获取数据库操作对象</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3%E3%80%81%E6%89%A7%E8%A1%8CSQL%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3、执行SQL语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4%E3%80%81%E5%A4%84%E7%90%86%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%9B%86\"><span class=\"toc-text\">3.4、处理查询结果集</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">4、释放资源</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%AD%98%E5%9C%A8sql%E6%B3%A8%E5%85%A5%EF%BC%89\"><span class=\"toc-text\">三、用户登录实现（存在sql注入）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E8%A7%A3%E5%86%B3SQL%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">四、解决SQL注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Stmt%E4%B8%8EPStmt%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">五、Stmt与PStmt比较</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"JDBC 连接池及项目结构","uid":"bb5bc50a09711181a6e48f61d586b1e3","slug":"23-三层架构、项目结构、连接池","date":"2021-09-13T14:58:32.000Z","updated":"2021-09-15T10:21:18.315Z","comments":true,"path":"api/articles/23-三层架构、项目结构、连接池.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"1、三层架构UI(表现层): 主要是指与用户交互的界面。用于接收用户输入的数据和显示处理后用户需要的数据。 BLL(业务逻辑层): UI层和DAL层之间的桥梁。实现业务逻辑。业务逻辑具体包含：验证、计算、业务规则等等。 DAL(数据访问层): 与数据库打交道。主要实现对数据的增、...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JDBC","slug":"JDBC","count":4,"path":"api/categories/JDBC.json"}],"tags":[{"name":"JDBC","slug":"JDBC","count":4,"path":"api/tags/JDBC.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Mysql 索引视图备份","uid":"a725910a1add8e5328c32e2fb97b8db8","slug":"21-MySql索引视图备份","date":"2021-09-13T14:56:32.000Z","updated":"2021-09-15T10:19:38.689Z","comments":true,"path":"api/articles/21-MySql索引视图备份.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog12.jpg","text":"一、索引1、什么是索引？索引就相当于一-本书的目录，通过目录可以快速的找到对应的资源. 2、查询表的两种方式第一种方式:全表扫描 第二种方式:根据索引检索(效率很高) 3、索引为何能提高检索效率?其实最根本的原理是缩小了扫描的范围. 索引虽然可以提高检索效率，但是不能随意的添加索...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"MySql","slug":"MySql","count":3,"path":"api/categories/MySql.json"}],"tags":[{"name":"MySql","slug":"MySql","count":3,"path":"api/tags/MySql.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}