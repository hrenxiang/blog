{"title":"Quartz 定时任务","uid":"4ce484ce04054bf7a1c2a1b718c83b71","slug":"56-Quartz-定时任务","date":"2021-09-13T15:33:32.000Z","updated":"2021-09-15T10:48:39.069Z","comments":true,"path":"api/articles/56-Quartz-定时任务.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog8.jpg","content":"<h4 id=\"articulated-lorry-Quartz-简介\"><a href=\"#articulated-lorry-Quartz-简介\" class=\"headerlink\" title=\":articulated_lorry: Quartz 简介\"></a>:articulated_lorry: Quartz 简介</h4><hr>\n<h4 id=\"①-Quartz是什么\"><a href=\"#①-Quartz是什么\" class=\"headerlink\" title=\"① Quartz是什么\"></a>① Quartz是什么</h4><p>Quartz是Job scheduling（作业调度）领域的一个开源项目，Quartz既可以单独使用也可以跟spring框架整合使用，在实际开发中一般会使用后者。使用Quartz可以开发一个或者多个定时任务，每个定时任务可以单独指定执行的时间，例如每隔1小时执行一次、每个月第一天上午10点执行一次、每个月最后一天下午5点执行一次等。完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：</p>\n<ul>\n<li>持久性作业 - 就是保持调度定时的状态;</li>\n<li>作业管理 - 对调度作业进行有效的管理;</li>\n</ul>\n<p>官网：<a href=\"https://www.w3cschool.cn/quartz_doc/\">https://www.w3cschool.cn/quartz_doc/</a></p>\n<p>简单来说，就是可以帮助我们设置一个有规律的或者在某个具体的时间点干点想干的事的一个开源框架。</p>\n<h4 id=\"②-Quartz的模块\"><a href=\"#②-Quartz的模块\" class=\"headerlink\" title=\"② Quartz的模块\"></a>② Quartz的模块</h4><p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/quartz-1.png\" alt=\"image-20210731205939435\"></p>\n<h4 id=\"③-Quartz核心概念\"><a href=\"#③-Quartz核心概念\" class=\"headerlink\" title=\"③ Quartz核心概念\"></a>③ Quartz核心概念</h4><p>1. Job 表示一个工作，要执行的具体内容。此接口中只有一个方法，如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void execute(JobExecutionContext context) </code></pre>\n\n<p>2. JobDetail 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。</p>\n<p>3. Trigger 代表一个调度参数的配置，什么时候去调。</p>\n<p>4. Scheduler 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在使用Scheduler之前，需要实例化 scheduler实例化后，可以启动(start)、暂停(stand-by)、停止(shutdown)。</p>\n<p>Quartz API的关键接口是：</p>\n<ul>\n<li>Scheduler：任务调度器，所有的任务都是从这里开始。</li>\n<li>Trigger：触发器，定义任务执行的方式、间隔。</li>\n<li>JobDetail &amp; Job ： 定义任务具体执行的逻辑。</li>\n</ul>\n<p>Scheduler的生命期，从SchedulerFactory创建它时开始，到Scheduler调用shutdown()方法时结束；Scheduler被创建后，可以增加、删除和列举Job和Trigger，以及执行其它与调度相关的操作（如暂停Trigger）。但是，Scheduler只有在调用start()方法后，才会真正地触发trigger（即执行job）</p></blockquote>\n<h4 id=\"④-Quartz的运行环境\"><a href=\"#④-Quartz的运行环境\" class=\"headerlink\" title=\"④ Quartz的运行环境\"></a>④ Quartz的运行环境</h4><hr>\n<ul>\n<li>Quartz 可以运行嵌入在另一个独立式应用程序。</li>\n<li>Quartz 可以在应用程序服务器(或 <a href=\"https://www.w3cschool.cn/spring_mvc_documentation_linesh_translation/spring_mvc_documentation_linesh_translation-it8y27sq.html\">servlet 容器</a>)内被实例化，并且参与 XA 事务。</li>\n<li>Quartz 可以作为一个独立的程序运行(其自己的 Java 虚拟机内)，可以通过 RMI 使用。</li>\n<li>Quartz 可以被实例化，作为独立的项目集群(负载平衡和故障转移功能)，用于作业的执行。</li>\n</ul>\n<h4 id=\"⑤-Quartz的简单示例\"><a href=\"#⑤-Quartz的简单示例\" class=\"headerlink\" title=\"⑤ Quartz的简单示例\"></a>⑤ Quartz的简单示例</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;!--引入Quartz的依赖--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.2.1&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;quartz-jobs&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.2.1&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;创建HelloQuartz\npublic class HelloQuartz implements Job &#123;\n    public void execute(JobExecutionContext jobExecutionContext) &#123;\n        JobDetail detail &#x3D; jobExecutionContext.getJobDetail();\n        String name &#x3D; detail.getJobDataMap().getString(&quot;name&quot;);\n        System.out.println(&quot;my job name is  &quot; + name + &quot; at &quot; + new Date());\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class QuartzTest &#123;\n    public static void main(String[] args) &#123;\n            try &#123;\n                &#x2F;&#x2F;定义一个JobDetail\n                JobDetail jobDetail &#x3D; JobBuilder.newJob(HelloQuartz.class)\n                        &#x2F;&#x2F;定义name和group 给触发器一些属性 比如名字，组名。 （可以不写）\n                        .withIdentity(&quot;job1&quot;, &quot;group1&quot;)\n                        &#x2F;&#x2F;job需要传递的内容 具体job传递参数。  （可以不写）\n                        .usingJobData(&quot;name&quot;, &quot;sdas&quot;)\n                        .build();\n                \n                &#x2F;&#x2F;定义一个Trigger\n                Trigger trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)\n                        &#x2F;&#x2F;加入 scheduler之后立刻执行 立刻启动\n                        .startNow()\n                        &#x2F;&#x2F;定时 ，每隔1秒钟执行一次 以某种触发器触发。  （可以不写）\n                        .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(1)\n                        &#x2F;&#x2F;重复执行\n                        .repeatForever())\n                        .build();\n                \n                &#x2F;&#x2F;创建scheduler\n                Scheduler scheduler &#x3D; StdSchedulerFactory.getDefaultScheduler();\n                scheduler.scheduleJob(jobDetail, trigger);\n                &#x2F;&#x2F; Scheduler只有在调用start()方法后，才会真正地触发trigger（即执行job）\n                scheduler.start(); &#x2F;&#x2F;运行一段时间后关闭\n                try &#123;\n                    Thread.sleep(8000);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                &#x2F;&#x2F;Scheduler调用shutdown()方法时结束\n                scheduler.shutdown();\n            &#125; catch (Exception e) &#123;\n                e.printStackTrace();\n            &#125;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"articulated-lorry-Quartz-整合-Spring\"><a href=\"#articulated-lorry-Quartz-整合-Spring\" class=\"headerlink\" title=\":articulated_lorry: Quartz 整合 Spring\"></a>:articulated_lorry: Quartz 整合 Spring</h4><hr>\n<h4 id=\"①-pom-文件\"><a href=\"#①-pom-文件\" class=\"headerlink\" title=\"① pom 文件\"></a>① pom 文件</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;groupId&gt;com.atguigu&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;quartz_demo&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n\n    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-context-support&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.2.1&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;quartz-jobs&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.2.1&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;!-- 指定端口 --&gt;\n                    &lt;port&gt;8080&lt;&#x2F;port&gt;\n                    &lt;!-- 请求路径 --&gt;\n                    &lt;path&gt;&#x2F;&lt;&#x2F;path&gt;\n                &lt;&#x2F;configuration&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n\n\n<h4 id=\"②-Job-自定义\"><a href=\"#②-Job-自定义\" class=\"headerlink\" title=\"② Job 自定义\"></a>② Job 自定义</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 任务调度类\npublic class JobDemo &#123;\n    &#x2F;&#x2F; 提供方法（备份数据库，清理日志，清理图片）\n    public void run()&#123;\n        &#x2F;&#x2F; 完成业务\n        System.out.println(new Date());\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"③-提供Spring配置文化\"><a href=\"#③-提供Spring配置文化\" class=\"headerlink\" title=\"③ 提供Spring配置文化\"></a>③ 提供Spring配置文化</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n                           http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n    &lt;!-- 注册自定义Job --&gt;\n    &lt;bean id&#x3D;&quot;jobDemo&quot; class&#x3D;&quot;com.atguigu.JobDemo&quot;&gt;&lt;&#x2F;bean&gt;\n    &lt;!-- 1：创建JobDetail对象,作用是负责通过反射调用指定的Job，注入目标对象，注入目标方法 --&gt;\n    &lt;bean id&#x3D;&quot;jobDetail&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;\n        &lt;!-- 注入目标对象 --&gt;\n        &lt;property name&#x3D;&quot;targetObject&quot; ref&#x3D;&quot;jobDemo&quot;&#x2F;&gt;\n        &lt;!-- 注入目标方法 --&gt;\n        &lt;property name&#x3D;&quot;targetMethod&quot; value&#x3D;&quot;run&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!-- 2：注册一个触发器，指定任务触发的时间 --&gt;\n    &lt;bean id&#x3D;&quot;myTrigger&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;\n        &lt;!-- 注入JobDetail --&gt;\n        &lt;property name&#x3D;&quot;jobDetail&quot; ref&#x3D;&quot;jobDetail&quot;&#x2F;&gt;\n        &lt;!-- 指定触发的时间，基于Cron表达式（0&#x2F;10表示从0秒开始，每10秒执行一次） --&gt;\n        &lt;property name&#x3D;&quot;cronExpression&quot;&gt;\n            &lt;value&gt;0&#x2F;10 * * * * ?&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!-- 3：注册一个统一的调度工厂，通过这个调度工厂调度任务 --&gt;\n    &lt;bean id&#x3D;&quot;scheduler&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;\n        &lt;!-- 注入多个触发器 --&gt;\n        &lt;property name&#x3D;&quot;triggers&quot;&gt;\n            &lt;list&gt;\n                &lt;ref bean&#x3D;&quot;myTrigger&quot;&#x2F;&gt;\n            &lt;&#x2F;list&gt;\n        &lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<h4 id=\"④-web-xml中加载配置\"><a href=\"#④-web-xml中加载配置\" class=\"headerlink\" title=\"④ web.xml中加载配置\"></a>④ web.xml中加载配置</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_0.xsd&quot;\n         id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;3.0&quot;&gt;\n\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;\n    &lt;&#x2F;listener&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;classpath:application-jobs.xml&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;context-param&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>执行Tomcat观察控制台，可以发现每隔10秒会输出一次，说明每隔10秒自定义Job被调用一次。</p>\n<h4 id=\"articulated-lorry-Quartz核心详解\"><a href=\"#articulated-lorry-Quartz核心详解\" class=\"headerlink\" title=\":articulated_lorry: Quartz核心详解\"></a>:articulated_lorry: Quartz核心详解</h4><hr>\n<p>下面就程序中出现的几个参数，看一下Quartz框架中的几个重要参数：</p>\n<ul>\n<li>Job和JobDetail</li>\n<li>JobExecutionContext</li>\n<li>JobDataMap</li>\n<li>Trigger、SimpleTrigger、CronTrigger</li>\n</ul>\n<h4 id=\"①-Job和JobDetail\"><a href=\"#①-Job和JobDetail\" class=\"headerlink\" title=\"① Job和JobDetail\"></a>① Job和JobDetail</h4><p>Job是Quartz中的一个接口，接口下只有execute方法，在这个方法中编写业务逻辑。</p>\n<p>接口中的源码：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/quartz-3.png\" alt=\"image-20210731212728173\"></p>\n<p>JobDetail用来绑定Job，为Job实例提供许多属性：</p>\n<ul>\n<li>name</li>\n<li>group</li>\n<li>jobClass</li>\n<li>jobDataMap</li>\n</ul>\n<p>JobDetail绑定指定的Job，每次Scheduler调度执行一个Job的时候，首先会拿到对应的Job，然后创建该Job实例，再去执行Job中的execute()的内容，任务执行结束后，关联的Job对象实例会被释放，且会被JVM GC清除。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么设计成JobDetail + Job，不直接使用Job？</p>\n<p>JobDetail定义的是任务数据，而真正的执行逻辑是在Job中。</p>\n<p>这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，Sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</p></blockquote>\n<h4 id=\"②-JobExecutionContext\"><a href=\"#②-JobExecutionContext\" class=\"headerlink\" title=\"② JobExecutionContext\"></a>② JobExecutionContext</h4><p>JobExecutionContext中包含了Quartz运行时的环境以及Job本身的详细数据信息。</p>\n<p>当Schedule调度执行一个Job的时候，就会将JobExecutionContext传递给该Job的execute()中，Job就可以通过JobExecutionContext对象获取信息。</p>\n<p>主要信息有：</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/quartz-4.png\" alt=\"image-20210731212843873\"></p>\n<h4 id=\"③-JobExecutionContext\"><a href=\"#③-JobExecutionContext\" class=\"headerlink\" title=\"③ JobExecutionContext\"></a>③ JobExecutionContext</h4><p>JobDataMap实现了JDK的Map接口，可以以Key-Value的形式存储数据。</p>\n<p>JobDetail、Trigger都可以使用JobDataMap来设置一些参数或信息，</p>\n<p>Job执行execute()方法的时候，JobExecutionContext可以获取到JobExecutionContext中的信息，如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">JobDetail jobDetail &#x3D; JobBuilder.newJob(PrintWordsJob.class)                        .usingJobData(&quot;jobDetail1&quot;, &quot;这个Job用来测试的&quot;)\n                  .withIdentity(&quot;job1&quot;, &quot;group1&quot;).build();\n\n Trigger trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(&quot;trigger1&quot;, &quot;triggerGroup1&quot;)\n      .usingJobData(&quot;trigger1&quot;, &quot;这是jobDetail1的trigger&quot;)\n      .startNow()&#x2F;&#x2F;立即生效\n      .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n      .withIntervalInSeconds(1)&#x2F;&#x2F;每隔1s执行一次\n      .repeatForever()).build();&#x2F;&#x2F;一直执行\n12345678910</code></pre>\n\n<p>Job执行的时候，可以获取到这些参数信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;\n\n    System.out.println(jobExecutionContext.getJobDetail().getJobDataMap().get(&quot;jobDetail1&quot;));\n    System.out.println(jobExecutionContext.getTrigger().getJobDataMap().get(&quot;trigger1&quot;));\n    String printTime &#x3D; new SimpleDateFormat(&quot;yy-MM-dd HH-mm-ss&quot;).format(new Date());\n    System.out.println(&quot;PrintWordsJob start at:&quot; + printTime + &quot;, prints: Hello Job-&quot; + new Random().nextInt(100));\n\n\n&#125;12345678910</code></pre>\n\n\n\n<h4 id=\"④-Trigger\"><a href=\"#④-Trigger\" class=\"headerlink\" title=\"④ Trigger\"></a>④ Trigger</h4><p><strong>Trigger</strong></p>\n<p>Trigger是Quartz的触发器，会去通知Scheduler何时去执行对应Job。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new Trigger().startAt():表示触发器首次被触发的时间;\nnew Trigger().endAt():表示触发器结束触发的时间;12</code></pre>\n\n<p><strong>SimpleTrigger</strong></p>\n<p>SimpleTrigger可以实现在一个指定时间段内执行一次作业任务或一个时间段内多次执行作业任务。</p>\n<p>下面的程序就实现了程序运行5s后开始执行Job，执行Job 5s后结束执行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Date startDate &#x3D; new Date();\nstartDate.setTime(startDate.getTime() + 5000);\n\n Date endDate &#x3D; new Date();\n endDate.setTime(startDate.getTime() + 5000);\n\n        Trigger trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(&quot;trigger1&quot;, &quot;triggerGroup1&quot;)\n                .usingJobData(&quot;trigger1&quot;, &quot;这是jobDetail1的trigger&quot;)\n                .startNow()&#x2F;&#x2F;立即生效\n                .startAt(startDate)\n                .endAt(endDate)\n                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n                .withIntervalInSeconds(1)&#x2F;&#x2F;每隔1s执行一次\n                .repeatForever()).build();&#x2F;&#x2F;一直执行\n123456789101112131415</code></pre>\n\n<p><strong>CronTrigger</strong></p>\n<p>CronTrigger功能非常强大，是基于日历的作业调度，而SimpleTrigger是精准指定间隔，所以相比SimpleTrigger，CroTrigger更加常用。CroTrigger是基于Cron表达式的，先了解下Cron表达式：</p>\n<p>由7个子表达式组成字符串的，格式如下：</p>\n<p>==[秒] [分] [小时] [日] [月] [周] [年]==</p>\n<h4 id=\"articulated-lorry-cron表达式\"><a href=\"#articulated-lorry-cron表达式\" class=\"headerlink\" title=\":articulated_lorry: cron表达式\"></a>:articulated_lorry: cron表达式</h4><hr>\n<h4 id=\"①-cron表达式简介\"><a href=\"#①-cron表达式简介\" class=\"headerlink\" title=\"① cron表达式简介\"></a>① cron表达式简介</h4><p>上面的入门案例中我们指定了一个表达式：0/10 * * * * ?</p>\n<p>这种表达式称为cron表达式，通过cron表达式可以灵活的定义出符合要求的程序执行的时间。本小节我们就来学习一下cron表达式的使用方法。如下表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>允许值</th>\n<th>允许的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>秒（Seconds）</td>\n<td>0~59的整数</td>\n<td>, - * /   四个字符</td>\n</tr>\n<tr>\n<td>分（<em>Minutes</em>）</td>\n<td>0~59的整数</td>\n<td>, - * /   四个字符</td>\n</tr>\n<tr>\n<td>小时（<em>Hours</em>）</td>\n<td>0~23的整数</td>\n<td>, - * /   四个字符</td>\n</tr>\n<tr>\n<td>日期（<em>DayofMonth</em>）</td>\n<td>1~31的整数（但是你需要考虑你月的天数）</td>\n<td>,- * ? / L W C   八个字符</td>\n</tr>\n<tr>\n<td>月份（<em>Month</em>）</td>\n<td>1~12的整数或者 JAN-DEC</td>\n<td>, - * /   四个字符</td>\n</tr>\n<tr>\n<td>星期（<em>DayofWeek</em>）</td>\n<td>1~7的整数或者 SUN-SAT （1=SUN）</td>\n<td>, - * ? / L C #   八个字符</td>\n</tr>\n<tr>\n<td>年(可选，留空)（<em>Year</em>）</td>\n<td>1970~2099</td>\n<td>, - * /   四个字符</td>\n</tr>\n</tbody></table>\n<p><strong>cron表达式分为七个域</strong>，之间使用空格分隔。其中最后一个域（年）可以为空。每个域都有自己允许的值和一些特殊字符构成。使用这些特殊字符可以使我们定义的表达式更加灵活。</p>\n<h4 id=\"②-特殊字符的介绍\"><a href=\"#②-特殊字符的介绍\" class=\"headerlink\" title=\"② 特殊字符的介绍\"></a>② 特殊字符的介绍</h4><p>逗号（,）：指定一个值列表，例如使用在月域上1,4,5,7表示1月、4月、5月和7月</p>\n<p>横杠（-）：指定一个范围，例如在时域上3-6表示3点到6点（即3点、4点、5点、6点）</p>\n<p>星号（*）：表示这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发</p>\n<p>斜线（/）：表示递增，例如使用在秒域上0/15表示每15秒</p>\n<p>问号（?）：只能用在日和周域上，但是不能在这两个域上同时使用。表示不指定，例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样。</p>\n<p>井号（#）：只能使用在周域上，用于指定月份中的第几周的哪一天，例如6#3，意思是某月的第三个周五 (6=星期五，3意味着月份中的第三周)</p>\n<p>L：某域上允许的最后一个值。只能使用在日和周域上。当用在日域上，表示的是在月域上指定的月份的最后一天。用于周域上时，表示周的最后一天，就是星期六</p>\n<p>W：W 字符代表着工作日 (星期一到星期五)，只能用在日域上，它用来指定离指定日的最近的一个工作日</p>\n<h4 id=\"③-常用表达式\"><a href=\"#③-常用表达式\" class=\"headerlink\" title=\"③ 常用表达式\"></a>③ 常用表达式</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务\n\n（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业\n\n（3）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 \n\n（4）0 0 12 ? * WED    表示每个星期三中午12点 \n\n（5）0 0 12 * * ?   每天中午12点触发 \n\n（6）0 15 10 ? * *    每天上午10:15触发 \n\n（7）0 15 10 * * ?     每天上午10:15触发 \n\n（8）0 15 10 * * ? *    每天上午10:15触发 \n\n（9）0 15 10 * * ? 2005    2005年的每天上午10:15触发 \n\n（10）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 \n\n（11）0 0&#x2F;5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 \n\n（12）0 0&#x2F;5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 \n\n（13）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 \n\n（14）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 \n\n（15）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 \n\n（16）0 15 10 15 * ?    每月15日上午10:15触发 \n\n（17）0 15 10 L * ?    每月最后一日的上午10:15触发 \n\n（18）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 \n\n（19）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 \n\n（20）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发\n\n（21）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作\n\n（22）0 0&#x2F;30 9-17 * * ?   朝九晚五工作时间内每半小时</code></pre>\n\n\n\n<h4 id=\"④-cron表达式在线生成器\"><a href=\"#④-cron表达式在线生成器\" class=\"headerlink\" title=\"④ cron表达式在线生成器\"></a>④ cron表达式在线生成器</h4><p>前面介绍了cron表达式，但是自己编写表达式还是有一些困难的，我们可以借助一些cron表达式在线生成器来根据我们的需求生成表达式即可。</p>\n<p><a href=\"http://cron.qqe2.com/\">http://cron.qqe2.com/</a></p>\n<h4 id=\"articulated-lorry-定时清理云上垃圾（结合项目）\"><a href=\"#articulated-lorry-定时清理云上垃圾（结合项目）\" class=\"headerlink\" title=\":articulated_lorry: 定时清理云上垃圾（结合项目）\"></a>:articulated_lorry: 定时清理云上垃圾（结合项目）</h4><hr>\n<p>前面我们已经完成了旅游套餐的管理，在新增套餐时套餐的基本信息和图片是分两次提交到后台进行操作的。也就是用户首先将图片上传到七牛云服务器，然后再提交新增窗口中录入的其他信息。如果用户只是上传了图片而没有提交录入的其他信息，此时的图片就变为了垃圾图片，因为在数据库中并没有记录它的存在。此时我们要如何处理这些垃圾图片呢？</p>\n<p>解决方案就是通过定时任务组件定时清理这些垃圾图片。为了能够区分出来哪些图片是垃圾图片，我们在文件上传成功后将图片保存到了一个 <code>redis</code> 集合中，当套餐数据插入到数据库后我们又将图片名称保存到了另一个redis集合中，通过计算这两个集合的差值就可以获得所有垃圾图片的名称。</p>\n<p>本章节我们就会基于<code>Quartz</code> 定时任务，通过计算 <code>redis</code> 两个集合的差值找出所有的垃圾图片，就可以将垃圾图片清理掉。</p>\n<h4 id=\"①-创建maven聚合工程\"><a href=\"#①-创建maven聚合工程\" class=\"headerlink\" title=\"① 创建maven聚合工程\"></a>① 创建maven聚合工程</h4><p><code>meinian_jobs</code> ，打包方式为war，导入Quartz等相关坐标</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;meinian_parent&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;com.atguigu&lt;&#x2F;groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n \n    &lt;artifactId&gt;meinian_jobs&lt;&#x2F;artifactId&gt;\n \n    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;\n \n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;\n        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;\n    &lt;&#x2F;properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.atguigu&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;meinian_interface&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;quartz-jobs&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;!-- 指定端口 --&gt;\n                    &lt;port&gt;83&lt;&#x2F;port&gt;\n                    &lt;!-- 请求路径 --&gt;\n                    &lt;path&gt;&#x2F;&lt;&#x2F;path&gt;\n                &lt;&#x2F;configuration&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n\n\n<h4 id=\"②-配置web-xml\"><a href=\"#②-配置web-xml\" class=\"headerlink\" title=\"② 配置web.xml\"></a>② 配置web.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_0.xsd&quot;\n         id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;3.0&quot;&gt;\n    &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;\n    &lt;!-- 加载spring容器 --&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;classpath*:spirng*.xml&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;context-param&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;\n    &lt;&#x2F;listener&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n\n\n<h4 id=\"③-配置log4j-properties\"><a href=\"#③-配置log4j-properties\" class=\"headerlink\" title=\"③ 配置log4j.properties\"></a>③ 配置log4j.properties</h4><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">### direct log messages to stdout ###\nlog4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target&#x3D;System.err\nlog4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n\n \n### direct messages to file mylog.log ###\nlog4j.appender.file&#x3D;org.apache.log4j.FileAppender\nlog4j.appender.file.File&#x3D;c:\\\\mylog.log\nlog4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n\n \n### set log levels - for more verbose logging change &#39;info&#39; to &#39;debug&#39; ###\n \nlog4j.rootLogger&#x3D;debug, stdout</code></pre>\n\n\n\n<h4 id=\"④-配置spirng-redis-xml\"><a href=\"#④-配置spirng-redis-xml\" class=\"headerlink\" title=\"④ 配置spirng-redis.xml\"></a>④ 配置spirng-redis.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:dubbo&#x3D;&quot;http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n                         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n                         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd\n                        http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo\n                         http:&#x2F;&#x2F;code.alibabatech.com&#x2F;schema&#x2F;dubbo&#x2F;dubbo.xsd\n                        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n                         http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n \n    &lt;!--Jedis连接池的相关配置--&gt;\n    &lt;bean id&#x3D;&quot;jedisPoolConfig&quot; class&#x3D;&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;\n        &lt;!--在指定时刻通过pool能够获取到的最大的连接的jedis个数--&gt;\n        &lt;property name&#x3D;&quot;maxTotal&quot;&gt;\n            &lt;value&gt;200&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n         &lt;!--最大能够保持idle的数量--&gt;\n        &lt;property name&#x3D;&quot;maxIdle&quot;&gt;\n            &lt;value&gt;50&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n        &lt;!--表示连接池在创建链接的时候会先测试一下链接是否可用，这样可以保证连接池中的链接都可用的。--&gt;\n        &lt;property name&#x3D;&quot;testOnBorrow&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;testOnReturn&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;bean id&#x3D;&quot;jedisPool&quot; class&#x3D;&quot;redis.clients.jedis.JedisPool&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;poolConfig&quot; ref&#x3D;&quot;jedisPoolConfig&quot; &#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;host&quot; value&#x3D;&quot;127.0.0.1&quot; &#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;port&quot; value&#x3D;&quot;6379&quot; type&#x3D;&quot;int&quot; &#x2F;&gt;\n        &lt;constructor-arg name&#x3D;&quot;timeout&quot; value&#x3D;&quot;30000&quot; type&#x3D;&quot;int&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<h4 id=\"⑤-配置-spirng-jobs-xml\"><a href=\"#⑤-配置-spirng-jobs-xml\" class=\"headerlink\" title=\"⑤ 配置 spirng-jobs.xml\"></a>⑤ 配置 spirng-jobs.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n                  http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n                  http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n                  http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n    &lt;!--开启注解配置支持，否则在ClearImgJob不能使用@Autowired--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;com.atguigu&quot;&gt;&lt;&#x2F;context:component-scan&gt;\n \n    &lt;!-- 注册自定义Job --&gt;\n    &lt;bean id&#x3D;&quot;jobDemo&quot; class&#x3D;&quot;com.atguigu.job.ClearImgJob&quot;&gt;&lt;&#x2F;bean&gt;\n    &lt;!-- 注册JobDetail,作用是负责通过反射调用指定的Job --&gt;\n    &lt;bean id&#x3D;&quot;jobDetail&quot;\n          class&#x3D;&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;\n        &lt;!-- 注入目标对象 --&gt;\n        &lt;property name&#x3D;&quot;targetObject&quot; ref&#x3D;&quot;jobDemo&quot;&#x2F;&gt;\n        &lt;!-- 注入目标方法 --&gt;\n        &lt;property name&#x3D;&quot;targetMethod&quot; value&#x3D;&quot;clearImg&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 注册一个触发器，指定任务触发的时间 --&gt;\n    &lt;bean id&#x3D;&quot;myTrigger&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;\n        &lt;!-- 注入JobDetail --&gt;\n        &lt;property name&#x3D;&quot;jobDetail&quot; ref&#x3D;&quot;jobDetail&quot;&#x2F;&gt;\n        &lt;!-- 指定触发的时间，基于Cron表达式（0 0 2 * * ?表示凌晨2点执行） --&gt;\n        &lt;!-- 指定触发的时间，基于Cron表达式（0 25 12 * * ?表示12点25分执行） --&gt;\n        &lt;property name&#x3D;&quot;cronExpression&quot;&gt;\n            &lt;value&gt;0 0 2 * * ?&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 注册一个统一的调度工厂，通过这个调度工厂调度任务 --&gt;\n    &lt;bean id&#x3D;&quot;scheduler&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;\n        &lt;!-- 注入多个触发器 --&gt;\n        &lt;property name&#x3D;&quot;triggers&quot;&gt;\n            &lt;list&gt;\n                &lt;ref bean&#x3D;&quot;myTrigger&quot;&#x2F;&gt;\n            &lt;&#x2F;list&gt;\n        &lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<h4 id=\"⑥-创建Job定时任务类\"><a href=\"#⑥-创建Job定时任务类\" class=\"headerlink\" title=\"⑥ 创建Job定时任务类\"></a>⑥ 创建Job定时任务类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.atguigu.job;\n \nimport com.atguigu.constant.RedisConstant;\nimport com.atguigu.utils.QiniuUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport redis.clients.jedis.JedisPool;\n \nimport java.util.Iterator;\nimport java.util.Set;\n \npublic class ClearImgJob &#123;\n    @Autowired\n    private JedisPool jedisPool;\n    &#x2F;&#x2F;清理图片\n    public void clearImg()&#123;\n        &#x2F;&#x2F;计算redis中两个集合的差值，获取垃圾图片名称\n        &#x2F;&#x2F; 需要注意：在比较的时候，数据多的放到前面，如果pic多，那么pic放到前面，db多，db放到前面\n        Set&lt;String&gt; set &#x3D; jedisPool.getResource().sdiff(\n                RedisConstant.SETMEAL_PIC_RESOURCES,\n                RedisConstant.SETMEAL_PIC_DB_RESOURCES);\n        \n        Iterator&lt;String&gt; iterator &#x3D; set.iterator();\n        \n        while(iterator.hasNext())&#123;\n            String pic &#x3D; iterator.next();\n            System.out.println(&quot;删除图片的名称是：&quot;+pic);\n            &#x2F;&#x2F;删除图片服务器中的图片文件\n            QiniuUtils.deleteFileFromQiniu(pic);\n            &#x2F;&#x2F;删除redis中的数据\n            jedisPool.getResource().srem(RedisConstant.SETMEAL_PIC_RESOURCES,pic);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>测试如下：</p>\n<div>\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/quartz-7.png\" alt=\"image-20210731214612262\" style=\"zoom:72%;\" />\n    <img src=\"https://gitee.com/hrenxiang/picture/raw/master/img/quartz-6.png\" alt=\"image-20210731214540582\" style=\"zoom:67%;\" />\n</div>\n\n<p>注意：如果 <code>redis</code> 服务端启动如上，不需要担心，直接使用 , 只是没有图标而已。</p>\n","text":":articulated_lorry: Quartz 简介 ① Quartz是什么Quartz是Job scheduling（作业调度）领域的一个开源项目，Quartz既可以单独使用也可以跟spring框架整合使用，在实际开发中一般会使用后者。使用Quartz可以开发一个或者多个...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"定时任务","slug":"定时任务","count":1,"path":"api/categories/定时任务.json"}],"tags":[{"name":"定时任务","slug":"定时任务","count":1,"path":"api/tags/定时任务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#articulated-lorry-Quartz-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">:articulated_lorry: Quartz 简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-Quartz%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">① Quartz是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-Quartz%E7%9A%84%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">② Quartz的模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-Quartz%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">③ Quartz核心概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-Quartz%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">④ Quartz的运行环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-Quartz%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">⑤ Quartz的简单示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#articulated-lorry-Quartz-%E6%95%B4%E5%90%88-Spring\"><span class=\"toc-text\">:articulated_lorry: Quartz 整合 Spring</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-pom-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">① pom 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-Job-%E8%87%AA%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">② Job 自定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E6%8F%90%E4%BE%9BSpring%E9%85%8D%E7%BD%AE%E6%96%87%E5%8C%96\"><span class=\"toc-text\">③ 提供Spring配置文化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-web-xml%E4%B8%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">④ web.xml中加载配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#articulated-lorry-Quartz%E6%A0%B8%E5%BF%83%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">:articulated_lorry: Quartz核心详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-Job%E5%92%8CJobDetail\"><span class=\"toc-text\">① Job和JobDetail</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-JobExecutionContext\"><span class=\"toc-text\">② JobExecutionContext</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-JobExecutionContext\"><span class=\"toc-text\">③ JobExecutionContext</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-Trigger\"><span class=\"toc-text\">④ Trigger</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#articulated-lorry-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">:articulated_lorry: cron表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">① cron表达式简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">② 特殊字符的介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E5%B8%B8%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">③ 常用表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%E7%BA%BF%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">④ cron表达式在线生成器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#articulated-lorry-%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86%E4%BA%91%E4%B8%8A%E5%9E%83%E5%9C%BE%EF%BC%88%E7%BB%93%E5%90%88%E9%A1%B9%E7%9B%AE%EF%BC%89\"><span class=\"toc-text\">:articulated_lorry: 定时清理云上垃圾（结合项目）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A0-%E5%88%9B%E5%BB%BAmaven%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">① 创建maven聚合工程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A1-%E9%85%8D%E7%BD%AEweb-xml\"><span class=\"toc-text\">② 配置web.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A2-%E9%85%8D%E7%BD%AElog4j-properties\"><span class=\"toc-text\">③ 配置log4j.properties</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A3-%E9%85%8D%E7%BD%AEspirng-redis-xml\"><span class=\"toc-text\">④ 配置spirng-redis.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A4-%E9%85%8D%E7%BD%AE-spirng-jobs-xml\"><span class=\"toc-text\">⑤ 配置 spirng-jobs.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%91%A5-%E5%88%9B%E5%BB%BAJob%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B1%BB\"><span class=\"toc-text\">⑥ 创建Job定时任务类</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"ApachePOI 文档读写","uid":"fc61a710e2053b4421eaf30d8ac4fc38","slug":"57-ApachePOI-文档读写","date":"2021-09-13T15:34:32.000Z","updated":"2021-09-15T10:48:51.931Z","comments":true,"path":"api/articles/57-ApachePOI-文档读写.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog7.jpg","text":":whale: Apache POI基础 ① Apache POI简介Apache POI是一种流行的API，它允许程序员使用Java程序创建，修改和显示MS Office文件。这由Apache软件基金会开发使用Java分布式设计或修改Microsoft Office文件的开源库...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"文档读写","slug":"文档读写","count":1,"path":"api/categories/文档读写.json"}],"tags":[{"name":"文档读写","slug":"文档读写","count":1,"path":"api/tags/文档读写.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"Dubbo Zookeeper","uid":"6cf45a5bd6abd2bbf495c5388d2d047e","slug":"55-Dubbo Zookeeper","date":"2021-09-13T15:32:32.000Z","updated":"2021-09-15T10:50:00.083Z","comments":true,"path":"api/articles/55-Dubbo Zookeeper.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog9.jpg","text":":basketball: 软件架构的发展过程 ① 单体架构一个归档包（例如war格式或者Jar格式）包含了应用所有功能的应用程序，我们通常称之为单体应用。架构单体应用的方法论，我们称之 为单体应用架构，这是一种比较传统的架构风格。 1. 架构说明：全部功能集中在一个项目内（All...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"微服务","slug":"微服务","count":1,"path":"api/categories/微服务.json"}],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}