{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"74-Docker","date":"2021-09-13T15:49:32.000Z","updated":"2021-09-15T10:46:04.049Z","comments":true,"path":"api/articles/74-Docker.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog2.jpg","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>本文将整体介绍一下如何使用安装docker、获取docker资源、使用docker获得MySQL、redis等中间件服务并快速搭建，以及管理和使用这些中间件服务，docker容器和宿主机如何交互、如何构建我们自己的服务镜像等等。</li>\n</ul>\n<blockquote>\n<p>本文内容有</p>\n<ul>\n<li>我们为啥要用docker？</li>\n<li>管理docker image镜像</li>\n<li>使用镜像创建docker container容器服务</li>\n<li>管理docker container容器服务</li>\n<li>查看docker container容器服务状态</li>\n<li>容器服务和宿主机如何交互</li>\n<li>使用docker搭建中间件基础服务示例</li>\n<li>使用docker构建我们自己的服务镜像</li>\n<li>搭建docker UI工具服务portainer</li>\n<li>更多docker资料</li>\n</ul></blockquote>\n</blockquote>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><ul>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5eca8cd54c636312f4b70929\">原文传送门</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile官方教程</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/build/\">docker镜像构建命令官方教程</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/push/\">docker镜像推送命令官方教程</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/pull/\">docker镜像拉取命令官方教程</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/login/\">docker私服登录命令官方教程</a></li>\n</ul>\n<h4 id=\"1、我们为啥要用docker？\"><a href=\"#1、我们为啥要用docker？\" class=\"headerlink\" title=\"1、我们为啥要用docker？\"></a>1、我们为啥要用docker？</h4><h5 id=\"1-1-docker能给我们带来哪些好处？\"><a href=\"#1-1-docker能给我们带来哪些好处？\" class=\"headerlink\" title=\"1.1 docker能给我们带来哪些好处？\"></a>1.1 docker能给我们带来哪些好处？</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>传统的服务器系统更新的步骤是这样的，我们使用归档后的服务发布包，上传到不同环境的服务器上，进行部署。很多公司的服务发版流程中各个环境的发布包更新顺序是这样的：开发环境–&gt;测试环境–&gt;预发布环境–&gt;线上灰度环境–&gt;线上环境（有的大公司环境可能更多，小公司也许就两套环境）。只有前面的环境都验证通过后，才能把服务发布包更新到线上环境。</p>\n<p>先说说上面这种发布流程存在哪些弊端吧:</p>\n<ol>\n<li>服务发布包操作和管理不方便，导致发布效率低</li>\n<li>各个环境很难做到完全一致（如操作系统、网络环境、基础服务版本、jdk版本等等），可能导致服务在不同环境中存在兼容性问题</li>\n<li>服务发布流程想要做到自动化难度大，浪费人力成本</li>\n<li>系统中的服务会互相争抢资源，如果某个服务耗费了所有的系统资源（如：CPU、内存等等）就会导致其他服务也无法使用</li>\n<li>不同服务如果使用了相同的端口号，会互相竞争，导致某些服务无法正常工作</li>\n<li>传统服务很难做到服务自动伸缩和故障转移</li>\n<li>很多时候研发人员需要花费不少时间来排查由于环境不一致导致的问题，排查难度高</li>\n<li>无法完全控制服务的行为，比如服务内某些不法研发人员给自己开后门，访问其他资源。</li>\n<li>项目整体的迭代速度低</li>\n</ol></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用docker管理我们的服务后，有如下优点：</p>\n<ol>\n<li>服务发布包可以做成镜像，稳定且使用方便，可以做到一次构建，多处运行</li>\n<li>降低了服务部署的复杂性，减少了因环境不一致导致的兼容性问题。由于服务运行在docker的虚拟容器中，容器中包含了该服务运行所需的所有环境信息，包括操作系统和jdk等等资源。所以无需担心环境不一致导致的兼容性问题</li>\n<li>docker可以对服务的可使用资源进行限制，比如说限制服务只使用多少cpu和内存等等</li>\n<li>docker可以管理容器服务的网络，服务间可以做到互不影响</li>\n<li>docker容器服务很轻量。也许你会有疑问，docker既然把服务所需要的环境都打包到镜像一起发布，会不会非常占用服务器资源呀？其实docker早就考虑了这一点，docker提供的是一个轻量级的VM，而且同主机上的基础镜像可以被不同的docker服务所共用，所以不会有很大的资源浪费，当然会比传统的服务占用的资源稍微多一些。</li>\n<li>docker服务性能稳定，较传统服务部署方式有些微性能损耗。也许你会担心docker服务的性能问题，其实docker经过多年的迭代更新，现在产品已经非常稳定，经测试，使用docker部署的服务在性能上的损耗非常小。</li>\n<li>使用docker的集群功能可以带来更多的好处，比如：服务实例数动态伸缩、故障转移、滚动发布、统一协调管理服务器资源等等功能，能够提高服务器资源整体的利用率，而且大大提升了服务的可用性和稳定性，服务的并发能力也能动态提升。</li>\n<li>使用docker可以提高服务的安全性，控制服务所能访问的资源范围和提供的服务范围。</li>\n<li>使用docker部署服务非常容易做到完全自动化，节省研发和运维成本</li>\n<li>服务资源备份、迁移更容易，由于服务都是运行在docker虚拟的容器内，所以可以非常方便的将服务转移到其他服务器上运行</li>\n</ol></blockquote>\n<h5 id=\"1-2-docker的组成结构\"><a href=\"#1-2-docker的组成结构\" class=\"headerlink\" title=\"1.2 docker的组成结构\"></a>1.2 docker的组成结构</h5><ul>\n<li>docker容器的整体结构</li>\n</ul>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:11-00:21:50.png\" alt=\"docker容器的结构\"></p>\n<ul>\n<li><p>docker基础组件介绍</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:11-00:21:42.png\" alt=\"docker组件结构\"></p>\n<ul>\n<li><p>DockerClient客户端</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker客户端提供了人机交互命令，用来向docker的服务器端（守护进程）发出请求，守护进程处理完所有的工作，并返回结果客户端对服务器端的访问既可以在本地也可以在远程来访问。</p></blockquote>\n</li>\n<li><p>Docker Daemon守护进程</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker提供的后台服务，用于管理image镜像、container容器和其他docker组件，接收并执行docker client发送的命令。</p></blockquote>\n</li>\n<li><p>Docker Image镜像</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>功能跟传统的服务发布包类似，提供了服务运行所需要的所有信息。服务发布包可以被打包成镜像，以供后续的部署。</p></blockquote>\n</li>\n<li><p>DockerContainer容器</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>运行服务的载体，提供了一个轻量级的VM环境，这个环境里提供了服务运行所需要的所有资源，包括操作系统、jdk、网络环境等等。</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:11-00:20:08.jpg\" alt=\"docker框架\"></p>\n</li>\n</ul>\n</li>\n<li><p>docker 镜像仓库Registry介绍</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>安装了docker的主机上都会有一个本地仓库，docker可以从不同的远程仓库中拉取镜像到本地仓库，然后使用拉取下来的镜像创建可运行的容器服务。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>常见的远程仓库有：</p>\n<ul>\n<li>Docker Hub(docker官方镜像仓库): <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></li>\n<li>docker官方中国区 <a href=\"https://registry.docker-cn.com/\">https://registry.docker-cn.com</a></li>\n<li>ustc <a href=\"http://docker.mirrors.ustc.edu.cn/\">http://docker.mirrors.ustc.edu.cn</a></li>\n<li>阿里云 http://&lt;你的ID&gt;.mirror.aliyuncs.com</li>\n</ul></blockquote>\n<p>如果需要使用某些国内镜像源，可以在/etc/docker/daemon.json中添加内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;,&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]\n &#125;\n123</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当然你也可以搭建自己的docker镜像私服，常见的有Docker Registry 、nexus3等等</p></blockquote>\n</li>\n<li><p>docker 其他组件介绍</p>\n<ul>\n<li><p>docker swarm集群管理组件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以将不同的服务器都加入到集群中进行管理，统一分配服务器资源给业务服务部署和运行，包括服务伸缩、故障转移、滚动发布等等功能。</p></blockquote>\n</li>\n<li><p>docker compose服务编排工具</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以提供一个模板配置文件，控制服务自己的子元素使用以及服务间的依赖关系等等，可以提供整个平台的服务一键部署能力。</p></blockquote>\n</li>\n</ul>\n</li>\n<li><p>docker第三方管理平台介绍</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Kubernetes(K8s)、Apache Mesos等等，可以提供比docker swarm更强大的集群能力，目前比较推荐使用k8s，毕竟更成熟，很多业界主流大平台都在用它，中小企业可以选择用云平台提供的k8s服务即可，自建成本太高。</p></blockquote>\n</li>\n</ul>\n<h5 id=\"1-3-docker如何工作的？\"><a href=\"#1-3-docker如何工作的？\" class=\"headerlink\" title=\"1.3 docker如何工作的？\"></a>1.3 docker如何工作的？</h5><p><code>Docker</code> 采用的是 <code>Client/Server</code> 架构。客户端向服务器发送请求，服务器负责构建、运行和分发容器。客户端和服务器可以运行在同一个 <code>Host</code> 上，客户端也可以通过 <code>socket</code> 或 <code>REST API</code> 与远程的服务器通信。</p>\n<p><code>Docker daemon</code> 一般在宿主主机后台运行，等待接收来自客户端的消息。 <code>Docker</code> 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 <code>Docker daemon</code> 交互。</p>\n<p>容器提供了在计算机上的隔离环境中安装和运行应用程序的方法。在容器内运行的应用程序仅可使用于为该容器分配的资源，例如：CPU，内存，磁盘，进程空间，用户，网络，卷等。在使用有限的容器资源的同时，并不与其他容器冲突。您可以将容器视为简易计算机上运行应用程序的隔离沙箱。</p>\n<h5 id=\"1-4-我们如何使用docker\"><a href=\"#1-4-我们如何使用docker\" class=\"headerlink\" title=\"1.4 我们如何使用docker?\"></a>1.4 我们如何使用docker?</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>传统企业如何过渡到docker生态，可以参考如下步骤:</p>\n<ol>\n<li>先将部分业务服务进行容器化，并使用容器化部署；</li>\n<li>待企业内容技术人员对容器化相关技术熟悉后，逐步将所有服务全部容器化</li>\n<li>整合企业内部所有服务器资源，使用docker集群工具进行统一管理和分配资源，提高资源使用率</li>\n<li>搭建整个devops技术体系，研发、测试、发布流程逐步自动化</li>\n<li>继而使用docker集群工具如docker swarm或者k8s管理所有线上服务</li>\n</ol></blockquote>\n<h4 id=\"2、管理docker-image镜像\"><a href=\"#2、管理docker-image镜像\" class=\"headerlink\" title=\"2、管理docker image镜像\"></a>2、管理docker image镜像</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker客户端账号相关命令</p>\n<ul>\n<li><p>登录服务器</p>\n<blockquote>\n<p>有的docker远程仓库开启了登录认证，需要登录后才能拉取镜像、推送镜像等等</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker login [参数] [服务器地址]\n#####参数说明######\n# --password , -p\t\t登录密码\n# --password-stdin\t\t从标准输入流获取密码，也就是说通过shell命令输入密码的意思,不带password参数默认就是这种方式\n# --username , -u\t\t登录账号\n#######使用示例#######\ndocker login --username&#x3D;admin --password&#x3D;123456 192.168.10.12:5000\n1234567</code></pre>\n\n<ul>\n<li><p>登出命令</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>登出当前的docker账号，下次使用前需要先登录</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker logout [服务器地址]\n#eg. docker logout 192.168.10.12:5000\n12</code></pre>\n</blockquote>\n<h5 id=\"2-1-docker-search-镜像搜索命令\"><a href=\"#2-1-docker-search-镜像搜索命令\" class=\"headerlink\" title=\"2.1 docker search 镜像搜索命令\"></a>2.1 docker search 镜像搜索命令</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过命令查找远程仓库里匹配的镜像信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker search [参数] 关键字\n#比如搜索redis的镜像\ndocker search redis\n#也可以配合shell命令一起使用\ndocker search redis |grep sentinel\n12345</code></pre>\n\n<p>详细示例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#比如搜索redis的镜像\ndocker search redis\n#结果\nNAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nredis                            Redis is an open source key-value store that…   8204                [OK]                \nbitnami&#x2F;redis                    Bitnami Redis Docker Image                      145                                     [OK]\nsameersbn&#x2F;redis                                                                  80                                      [OK]\ngrokzen&#x2F;redis-cluster            Redis cluster 3.0, 3.2, 4.0, 5.0, 6.0           68   \n#更多的就不展开了\n123456789</code></pre>\n\n<p>当然也可以到 <a href=\"https://hub.docker.com/\">Docker Hub</a>官网进行搜索</p></blockquote>\n<h5 id=\"2-2-docker-pull-镜像拉取命令\"><a href=\"#2-2-docker-pull-镜像拉取命令\" class=\"headerlink\" title=\"2.2 docker pull 镜像拉取命令\"></a>2.2 docker pull 镜像拉取命令</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从远程仓库拉取镜像到本地仓库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker pull [参数] NAME[:TAG|@DIGEST]\n#####参数说明######\n# --all-tags , -a\t\t下载该镜像的所有版本\n# --disable-content-trust\ttrue\t跳过安全认证\n# --platform\t\t平台兼容性相关的参数\n# --quiet , -q\t\t不显示详细信息\n\n#比如拉取某个redis镜像\ndocker pull grokzen&#x2F;redis-cluster:5.0\n123456789</code></pre></blockquote>\n<h5 id=\"2-3-docker-rmi-删除本地镜像命令\"><a href=\"#2-3-docker-rmi-删除本地镜像命令\" class=\"headerlink\" title=\"2.3 docker rmi 删除本地镜像命令\"></a>2.3 docker rmi 删除本地镜像命令</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>删除本地仓库中不需要再使用的镜像，比如一些过时的镜像</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker rmi [参数] 镜像名或者镜像ID [IMAGE...] #可以同时删除多个镜像\n#####参数说明######\n# --force , -f\t\t强制删除\n# --no-prune\t\t不删除未标记的父镜像\n1234</code></pre></blockquote>\n<h5 id=\"2-4-docker-images-查看镜像信息\"><a href=\"#2-4-docker-images-查看镜像信息\" class=\"headerlink\" title=\"2.4 docker images 查看镜像信息\"></a>2.4 docker images 查看镜像信息</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker images [参数] [REPOSITORY[:TAG]]\n#####参数说明######\n# --all , -a\t\t展示所有镜像，默认就是这个操作\n# --digests\t\t展示镜像包签名信息\n# --filter , -f\t\t通过镜像某些信息过滤镜像,如镜像名、ID、标签等等\n# --format\t\t指定一个展示模板用于镜像信息的展示，比如说需要展示的内容及顺序，感觉没啥卵用\n# --no-trunc\t展示完整的容器ID信息\n# --quiet , -q\t\t只展示镜像ID\n12345678</code></pre>\n\n<p>示例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#查看所有镜像信息\ndocker images\n#查看带关键字redis的镜像\ndocker images redis #或者 docker images |grep redis\ndocker images java:8 #带版本信息筛选\n#查看未标记的镜像\ndocker images --filter &quot;dangling&#x3D;true&quot;\n#查看带某个标签的镜像\ndocker images --filter &quot;label&#x3D;com.example.version&quot;\n#注：构建镜像时可以打label标签哦\n12345678910</code></pre>\n\n<p>过滤器支持如下条件</p>\n<ul>\n<li>dangling (boolean - true or false) 筛选未tag的镜像</li>\n<li>label (<code>label=&lt;key&gt;</code> or <code>label=&lt;key&gt;=&lt;value&gt;</code>) 筛选带某个标记的镜像</li>\n<li>before (<code>&lt;image-name&gt;[:&lt;tag&gt;]</code>, <code>&lt;image id&gt;</code> or <code>&lt;image@digest&gt;</code>) - 筛选某镜像某版本之前的镜像</li>\n<li>since (<code>&lt;image-name&gt;[:&lt;tag&gt;]</code>, <code>&lt;image id&gt;</code> or <code>&lt;image@digest&gt;</code>) - 筛选某镜像某版本开始以及之后的镜像</li>\n<li>reference (pattern of an image reference) - 筛选匹配描述信息的镜像</li>\n</ul>\n<h5 id=\"2-5-docker-tag-给镜像重命名\"><a href=\"#2-5-docker-tag-给镜像重命名\" class=\"headerlink\" title=\"2.5 docker tag 给镜像重命名\"></a>2.5 docker tag 给镜像重命名</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n#示例如下\ndocker tag redis 192.168.10.12:5000&#x2F;danyuan&#x2F;redis #将官方的redis镜像更名为自己的私服的镜像，之后可以push到私服中\n123</code></pre>\n\n<h5 id=\"2-4-docker-build-构建自己的镜像\"><a href=\"#2-4-docker-build-构建自己的镜像\" class=\"headerlink\" title=\"2.4 docker build 构建自己的镜像\"></a>2.4 docker build 构建自己的镜像</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker build [参数] PATH | URL | -\n#####参数说明######\n--add-host\t\tAdd a custom host-to-IP mapping (host:ip) 给容器内的&#x2F;etc&#x2F;hosts添加记录\n--build-arg\t\tSet build-time variables\n--cache-from\t\tImages to consider as cache sources\n--cgroup-parent\t\tOptional parent cgroup for the container\n--compress\t\tCompress the build context using gzip 镜像使用gzip进行压缩存储\n--cpu-period\t\tLimit the CPU CFS (Completely Fair Scheduler) period\n--cpu-quota\t\tLimit the CPU CFS (Completely Fair Scheduler) quota\n--cpu-shares , -c\t\tCPU shares (relative weight)\n--cpuset-cpus\t\tCPUs in which to allow execution (0-3, 0,1)\n--cpuset-mems\t\tMEMs in which to allow execution (0-3, 0,1)\n--disable-content-trust\ttrue\tSkip image verification\n--file , -f\t\tName of the Dockerfile (Default is ‘PATH&#x2F;Dockerfile’) 指定文件进行构建,默认为当前目录下的Dockerfile\n--force-rm\t\tAlways remove intermediate containers\n--iidfile\t\tWrite the image ID to the file\n--isolation\t\tContainer isolation technology\n--label\t\tSet metadata for an image\n--memory , -m\t\tMemory limit\n--memory-swap\t\tSwap limit equal to memory plus swap: ‘-1’ to enable unlimited swap\n--network\t\tAPI 1.25+ Set the networking mode for the RUN instructions during build\n--no-cache\t\tDo not use cache when building the image\n--output , -o\t\tAPI 1.40+ Output destination (format: type&#x3D;local,dest&#x3D;path) 输出构建信息到文件\n--platform\t\tAPI 1.38+ Set platform if server is multi-platform capable\n--progress\tauto\tSet type of progress output (auto, plain, tty). Use plain to show container output\n--pull\t\tAlways attempt to pull a newer version of the image\n--quiet , -q\t\tSuppress the build output and print image ID on success\n--rm\ttrue\tRemove intermediate containers after a successful build\n--secret\t\tAPI 1.39+\nSecret file to expose to the build (only if BuildKit enabled): id&#x3D;mysecret,src&#x3D;&#x2F;local&#x2F;secret\n--security-opt\t\tSecurity options\n--shm-size\t\tSize of &#x2F;dev&#x2F;shm\n--squash\t\texperimental (daemon)API 1.25+ Squash newly built layers into a single new layer\n--ssh\t\tAPI 1.39+ SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|[&#x3D;|[,]])\n--stream\t\texperimental (daemon)API 1.31+ Stream attaches to server to negotiate build context\n--tag , -t\t\tName and optionally a tag in the ‘name:tag’ format,给镜像重命名\n--target\t\tSet the target build stage to build.\n--ulimit\t\tUlimit options\n1234567891011121314151617181920212223242526272829303132333435363738</code></pre>\n\n<p>示例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#执行当前目录下的Dockerfile文件内的镜像构建命令，并将生成的镜像命名\ndocker build -t 192.168.56.22:5000&#x2F;danyuanblog&#x2F;elk . \n#执行指定目录下的Dockerfile文件内的镜像构建命令，并将生成的镜像命名\ndocker build -f &#x2F;data&#x2F;docker&#x2F;elk&#x2F;Dockerfile -t 192.168.56.22:5000&#x2F;danyuanblog&#x2F;elk . \n1234</code></pre>\n\n<h5 id=\"2-5-docker-push-推送镜像到远程仓库命令\"><a href=\"#2-5-docker-push-推送镜像到远程仓库命令\" class=\"headerlink\" title=\"2.5 docker push 推送镜像到远程仓库命令\"></a>2.5 docker push 推送镜像到远程仓库命令</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker push [参数] NAME[:TAG]\n#####参数说明######\n--disable-content-trust\ttrue\t是否需要跳过镜像内容信任,默认跳过\n\n#示例\ndocker push registry-host:5000&#x2F;myadmin&#x2F;rhel-httpd\n123456</code></pre>\n\n<h4 id=\"3、创建docker-container容器服务\"><a href=\"#3、创建docker-container容器服务\" class=\"headerlink\" title=\"3、创建docker container容器服务\"></a>3、创建docker container容器服务</h4><h5 id=\"3-1-docker-create-容器创建命令\"><a href=\"#3-1-docker-create-容器创建命令\" class=\"headerlink\" title=\"3.1 docker create 容器创建命令\"></a>3.1 docker create 容器创建命令</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker create [参数] IMAGE [COMMAND] [ARG...]\n#####参数说明######\n--add-host\t\tAdd a custom host-to-IP mapping (host:ip)\n--attach , -a\t\tAttach to STDIN, STDOUT or STDERR\n--blkio-weight\t\tBlock IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n--blkio-weight-device\t\tBlock IO weight (relative device weight)\n--cap-add\t\tAdd Linux capabilities\n--cap-drop\t\tDrop Linux capabilities\n--cgroup-parent\t\tOptional parent cgroup for the container\n--cidfile\t\tWrite the container ID to the file\n--cpu-count\t\tCPU count (Windows only)\n--cpu-percent\t\tCPU percent (Windows only)\n--cpu-period\t\tLimit CPU CFS (Completely Fair Scheduler) period\n--cpu-quota\t\tLimit CPU CFS (Completely Fair Scheduler) quota\n--cpu-rt-period\t\tAPI 1.25+\nLimit CPU real-time period in microseconds\n--cpu-rt-runtime\t\tAPI 1.25+\nLimit CPU real-time runtime in microseconds\n--cpu-shares , -c\t\tCPU shares (relative weight)\n--cpus\t\tAPI 1.25+\nNumber of CPUs\n--cpuset-cpus\t\tCPUs in which to allow execution (0-3, 0,1)\n--cpuset-mems\t\tMEMs in which to allow execution (0-3, 0,1)\n--device\t\tAdd a host device to the container\n--device-cgroup-rule\t\tAdd a rule to the cgroup allowed devices list\n--device-read-bps\t\tLimit read rate (bytes per second) from a device\n--device-read-iops\t\tLimit read rate (IO per second) from a device\n--device-write-bps\t\tLimit write rate (bytes per second) to a device\n--device-write-iops\t\tLimit write rate (IO per second) to a device\n--disable-content-trust\ttrue\tSkip image verification\n--dns\t\tSet custom DNS servers\n--dns-opt\t\tSet DNS options\n--dns-option\t\tSet DNS options\n--dns-search\t\tSet custom DNS search domains\n--domainname\t\tContainer NIS domain name\n--entrypoint\t\tOverwrite the default ENTRYPOINT of the image\n--env , -e\t\tSet environment variables\n--env-file\t\tRead in a file of environment variables\n--expose\t\tExpose a port or a range of ports\n--gpus\t\tAPI 1.40+\nGPU devices to add to the container (‘all’ to pass all GPUs)\n--group-add\t\tAdd additional groups to join\n--health-cmd\t\tCommand to run to check health\n--health-interval\t\tTime between running the check (ms|s|m|h) (default 0s)\n--health-retries\t\tConsecutive failures needed to report unhealthy\n--health-start-period\t\tAPI 1.29+\nStart period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)\n--health-timeout\t\tMaximum time to allow one check to run (ms|s|m|h) (default 0s)\n--help\t\tPrint usage\n--hostname , -h\t\tContainer host name\n--init\t\tAPI 1.25+\nRun an init inside the container that forwards signals and reaps processes\n--interactive , -i\t\tKeep STDIN open even if not attached\n--io-maxbandwidth\t\tMaximum IO bandwidth limit for the system drive (Windows only)\n--io-maxiops\t\tMaximum IOps limit for the system drive (Windows only)\n--ip\t\tIPv4 address (e.g., 172.30.100.104)\n--ip6\t\tIPv6 address (e.g., 2001:db8::33)\n--ipc\t\tIPC mode to use\n--isolation\t\tContainer isolation technology\n--kernel-memory\t\tKernel memory limit\n--label , -l\t\tSet meta data on a container\n--label-file\t\tRead in a line delimited file of labels\n--link\t\tAdd link to another container\n--link-local-ip\t\tContainer IPv4&#x2F;IPv6 link-local addresses\n--log-driver\t\tLogging driver for the container\n--log-opt\t\tLog driver options\n--mac-address\t\tContainer MAC address (e.g., 92:d0:c6:0a:29:33)\n--memory , -m\t\tMemory limit\n--memory-reservation\t\tMemory soft limit\n--memory-swap\t\tSwap limit equal to memory plus swap: ‘-1’ to enable unlimited swap\n--memory-swappiness\t-1\tTune container memory swappiness (0 to 100)\n--mount\t\tAttach a filesystem mount to the container\n--name\t\tAssign a name to the container\n--net\t\tConnect a container to a network\n--net-alias\t\tAdd network-scoped alias for the container\n--network\t\tConnect a container to a network\n--network-alias\t\tAdd network-scoped alias for the container\n--no-healthcheck\t\tDisable any container-specified HEALTHCHECK\n--oom-kill-disable\t\tDisable OOM Killer\n--oom-score-adj\t\tTune host’s OOM preferences (-1000 to 1000)\n--pid\t\tPID namespace to use\n--pids-limit\t\tTune container pids limit (set -1 for unlimited)\n--platform\t\texperimental (daemon)API 1.32+\nSet platform if server is multi-platform capable\n--privileged\t\tGive extended privileges to this container\n--publish , -p\t\tPublish a container’s port(s) to the host\n--publish-all , -P\t\tPublish all exposed ports to random ports\n--read-only\t\tMount the container’s root filesystem as read only\n--restart\tno\tRestart policy to apply when a container exits\n--rm\t\tAutomatically remove the container when it exits\n--runtime\t\tRuntime to use for this container\n--security-opt\t\tSecurity Options\n--shm-size\t\tSize of &#x2F;dev&#x2F;shm\n--stop-signal\tSIGTERM\tSignal to stop a container\n--stop-timeout\t\tAPI 1.25+\nTimeout (in seconds) to stop a container\n--storage-opt\t\tStorage driver options for the container\n--sysctl\t\tSysctl options\n--tmpfs\t\tMount a tmpfs directory\n--tty , -t\t\tAllocate a pseudo-TTY\n--ulimit\t\tUlimit options\n--user , -u\t\tUsername or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n--userns\t\tUser namespace to use\n--uts\t\tUTS namespace to use\n--volume , -v\t\tBind mount a volume\n--volume-driver\t\tOptional volume driver for the container\n--volumes-from\t\tMount volumes from the specified container(s)\n--workdir , -w\t\tWorking directory inside the container\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108</code></pre>\n\n<p>常用示例如下：</p>\n<ol>\n<li><p>指定基本信息，如名字、重启策略等等</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启\ndocker create --restart always --name my-redis redis\n12</code></pre></li>\n<li><p>指定端口映射</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379\ndocker create -p 2379:6379 --restart always --name my-redis redis\n12</code></pre></li>\n<li><p>指定磁盘目录挂载</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379,并将配置文件挂载出来\ndocker create -p 2379:6379 -v &#x2F;data&#x2F;docker-data&#x2F;service&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --restart always --name my-redis redis\n12</code></pre></li>\n<li><p>指定网络模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379,并将配置文件挂载出来,指定为自定义的网络模式\ndocker create --network some-network -p 2379:6379 -v &#x2F;data&#x2F;docker-data&#x2F;service&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --restart always --name my-redis redis\n12</code></pre></li>\n<li><p>指定资源限制</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379,并将配置文件挂载出来,指定为自定义的网络模式,限制cpu使用权重、内存、磁盘使用\ndocker create --cpu-shares 512 -m 1G --memory-swap 3G --storage-opt size&#x3D;10G --network some-network -p 2379:6379 -v &#x2F;data&#x2F;docker-data&#x2F;service&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --restart always --name my-redis redis\n#单个 CPU 为 1024，两个为 2048，以此类推\n123</code></pre></li>\n<li><p>指定环境变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379,并将配置文件挂载出来,指定为自定义的网络模式,限制cpu使用权重、内存、磁盘使用\ndocker create --cpu-shares 512 -m 1G --memory-swap 3G --storage-opt size&#x3D;10G --network some-network -p 2379:6379 -v &#x2F;data&#x2F;docker-data&#x2F;service&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -e HOST_NAME&#x3D;danyuan --restart always --name my-redis redis\n#单个 CPU 为 1024，两个为 2048，以此类推\n123</code></pre></li>\n<li><p>指定服务参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建一个redis服务，当检测到redis服务挂了，自动重启,对外端口为2379,并将配置文件挂载出来,指定为自定义的网络模式,限制cpu使用权重、内存、磁盘使用,指定redis服务参数\ndocker create --cpu-shares 512 -m 1G --memory-swap 3G --storage-opt size&#x3D;10G --network some-network -p 2379:6379 -v &#x2F;data&#x2F;docker-data&#x2F;service&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --restart always --name my-redis redis --appendonly yes\n#单个 CPU 为 1024，两个为 2048，以此类推\n123</code></pre></li>\n</ol>\n<h5 id=\"3-2-docker-run-创建并运行容器\"><a href=\"#3-2-docker-run-创建并运行容器\" class=\"headerlink\" title=\"3.2 docker run 创建并运行容器\"></a>3.2 docker run 创建并运行容器</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n#参数和docker create大多相同\n#多了以下参数\n--detach , -d\t\tRun container in background and print container ID,后台运行服务\n--detach-keys\t\tOverride the key sequence for detaching a container\n12345</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建并后台启动一个redis服务，当检测到redis服务挂了，自动重启,对外端口为6379,指定为共享主机网络模式,限制cpu使用权重、内存使用,指定redis服务参数\ndocker run -d --cpu-shares 512 -m 512M --memory-swap 1G --network host --restart always --name my-redis redis --appendonly yes\n#单个 CPU 为 1024，两个为 2048，以此类推\n123</code></pre>\n\n<h5 id=\"3-3-docker-start-启动已存在的容器\"><a href=\"#3-3-docker-start-启动已存在的容器\" class=\"headerlink\" title=\"3.3 docker start 启动已存在的容器\"></a>3.3 docker start 启动已存在的容器</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker start [参数] CONTAINER [CONTAINER...]\n#####参数说明######\n--attach , -a\t\tAttach STDOUT&#x2F;STDERR and forward signals\n--checkpoint\t\texperimental (daemon)\nRestore from this checkpoint\n--checkpoint-dir\t\texperimental (daemon)\nUse a custom checkpoint storage directory\n--detach-keys\t\tOverride the key sequence for detaching a container\n--interactive , -i\t\tAttach container’s STDIN\n123456789</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#启动刚刚的redis服务\ndocker start my-redis\n12</code></pre>\n\n<h5 id=\"3-4-docker-stop-停止正在运行的容器\"><a href=\"#3-4-docker-stop-停止正在运行的容器\" class=\"headerlink\" title=\"3.4 docker stop 停止正在运行的容器\"></a>3.4 docker stop 停止正在运行的容器</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker stop [OPTIONS] CONTAINER [CONTAINER...]\n#####参数说明######\n--time , -t\t10\tSeconds to wait for stop before killing it\n123</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker stop my-redis\n1</code></pre>\n\n<h5 id=\"3-5-docker-restart-重启容器\"><a href=\"#3-5-docker-restart-重启容器\" class=\"headerlink\" title=\"3.5 docker restart 重启容器\"></a>3.5 docker restart 重启容器</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker restart [OPTIONS] CONTAINER [CONTAINER...]\n#####参数说明######\n--time , -t\t10\tSeconds to wait for stop before killing the container\n123</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker restart my-redis\n1</code></pre>\n\n<h5 id=\"3-6-docker-pause-暂停容器服务\"><a href=\"#3-6-docker-pause-暂停容器服务\" class=\"headerlink\" title=\"3.6 docker pause 暂停容器服务\"></a>3.6 docker pause 暂停容器服务</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>暂停状态的容器服务，无法对外提供服务</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker pause CONTAINER [CONTAINER...]\n#示例如下\ndocker pause my-redis\n123</code></pre>\n\n<h5 id=\"3-7-docker-kill-杀掉某容器服务\"><a href=\"#3-7-docker-kill-杀掉某容器服务\" class=\"headerlink\" title=\"3.7 docker kill 杀掉某容器服务\"></a>3.7 docker kill 杀掉某容器服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker kill [参数] CONTAINER [CONTAINER...]\n#####参数说明######\n--signal , -s\tKILL\tSignal to send to the container\n#示例\ndocker kill my_redis  #作用和 kill pid 相同\ndocker kill --signal&#x3D;9 my_redis #作用和 kill -9 pid 相同\n123456</code></pre>\n\n<h5 id=\"3-8-docker-rm-删除容器\"><a href=\"#3-8-docker-rm-删除容器\" class=\"headerlink\" title=\"3.8 docker rm 删除容器\"></a>3.8 docker rm 删除容器</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker rm [参数] CONTAINER [CONTAINER...]\n#####参数说明######\n--force , -f\t\tForce the removal of a running container (uses SIGKILL),强制删除正在运行的容器\n--link , -l\t\tRemove the specified link\n--volumes , -v\t\tRemove anonymous volumes associated with the container\n12345</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker rm my-redis\ndocker rm -f my-redis\n12</code></pre>\n\n<h5 id=\"3-9-docker-update-更新容器信息\"><a href=\"#3-9-docker-update-更新容器信息\" class=\"headerlink\" title=\"3.9 docker update 更新容器信息\"></a>3.9 docker update 更新容器信息</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker update [参数] CONTAINER [CONTAINER...]\n#####参数说明######\n--blkio-weight\t\tBlock IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n--cpu-period\t\tLimit CPU CFS (Completely Fair Scheduler) period\n--cpu-quota\t\tLimit CPU CFS (Completely Fair Scheduler) quota\n--cpu-rt-period\t\tAPI 1.25+\nLimit the CPU real-time period in microseconds\n--cpu-rt-runtime\t\tAPI 1.25+\nLimit the CPU real-time runtime in microseconds\n--cpu-shares , -c\t\tCPU shares (relative weight)\n--cpus\t\tAPI 1.29+\nNumber of CPUs\n--cpuset-cpus\t\tCPUs in which to allow execution (0-3, 0,1)\n--cpuset-mems\t\tMEMs in which to allow execution (0-3, 0,1)\n--kernel-memory\t\tKernel memory limit\n--memory , -m\t\tMemory limit\n--memory-reservation\t\tMemory soft limit\n--memory-swap\t\tSwap limit equal to memory plus swap: ‘-1’ to enable unlimited swap\n--pids-limit\t\tAPI 1.40+\nTune container pids limit (set -1 for unlimited)\n--restart\t\tRestart policy to apply when a container exits\n123456789101112131415161718192021</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#更新容器启动策略\ndocker update --restart&#x3D;always my-redis\n12</code></pre>\n\n<h4 id=\"4、查看docker-container容器服务状态\"><a href=\"#4、查看docker-container容器服务状态\" class=\"headerlink\" title=\"4、查看docker container容器服务状态\"></a>4、查看docker container容器服务状态</h4><h5 id=\"4-1-docker-ps-查看容器信息\"><a href=\"#4-1-docker-ps-查看容器信息\" class=\"headerlink\" title=\"4.1 docker ps 查看容器信息\"></a>4.1 docker ps 查看容器信息</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker ps [参数]\n#####参数说明######\n--all , -a\t\tShow all containers (default shows just running)\n--filter , -f\t\tFilter output based on conditions provided\n--format\t\tPretty-print containers using a Go template\n--last , -n\t-1\tShow n last created containers (includes all states)\n--latest , -l\t\tShow the latest created container (includes all states)\n--no-trunc\t\tDon’t truncate output\n--quiet , -q\t\tOnly display numeric IDs\n--size , -s\t\tDisplay total file sizes\n12345678910</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#查看所有正在运行的容器\ndocker ps\n#查看所有的容器\ndocker ps -a\n#查看最近创建的容器\ndocker ps -l\n#查看名字匹配的容器\ndocker ps -a |grep my-redis\n12345678</code></pre>\n\n<h5 id=\"4-2-docker-stats-查看正在运行的容器资源使用情况\"><a href=\"#4-2-docker-stats-查看正在运行的容器资源使用情况\" class=\"headerlink\" title=\"4.2 docker stats 查看正在运行的容器资源使用情况\"></a>4.2 docker stats 查看正在运行的容器资源使用情况</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker stats [参数] [CONTAINER...]\n#####参数说明######\n--all , -a\t\tShow all containers (default shows just running)\n--format\t\tPretty-print images using a Go template\n--no-stream\t\tDisable streaming stats and only pull the first result\n--no-trunc\t\tDo not truncate output\n123456</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#查看所有容器资源使用情况\ndocker stats \n#查看某个容器资源占用情况\ndocker stats |grep my-redis\n1234</code></pre>\n\n<h5 id=\"4-3-docker-logs-查看容器的日志信息\"><a href=\"#4-3-docker-logs-查看容器的日志信息\" class=\"headerlink\" title=\"4.3 docker logs 查看容器的日志信息\"></a>4.3 docker logs 查看容器的日志信息</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker logs [参数] CONTAINER\n#####参数说明######\n--details\t\tShow extra details provided to logs\n--follow , -f\t\tFollow log output\n--since\t\tShow logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)\n--tail\tall\tNumber of lines to show from the end of the logs\n--timestamps , -t\t\tShow timestamps\n--until\t\tAPI 1.35+ Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)\n12345678</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#查看最后500条日志信息\ndocker logs --tail 500 my-redis\n#查看最新500条日志，并持续查看最新的日志\ndocker logs --tail 500 -f my-redis\n1234</code></pre>\n\n<h5 id=\"4-4-docker-top-查看容器内服务资源使用情况\"><a href=\"#4-4-docker-top-查看容器内服务资源使用情况\" class=\"headerlink\" title=\"4.4 docker top 查看容器内服务资源使用情况\"></a>4.4 docker top 查看容器内服务资源使用情况</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker top CONTAINER [ps OPTIONS]\n#相当于你在linux上输入top命令一样的效果\n#示例如下\ndocker top my-redis\n1234</code></pre>\n\n<h5 id=\"4-5-docker-inspect-查看某个容器的详细信息\"><a href=\"#4-5-docker-inspect-查看某个容器的详细信息\" class=\"headerlink\" title=\"4.5 docker inspect 查看某个容器的详细信息\"></a>4.5 docker inspect 查看某个容器的详细信息</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker inspect [参数] NAME|ID [NAME|ID...]\n#####参数说明######\n--format , -f\t\tFormat the output using the given Go template\n--size , -s\t\tDisplay total file sizes if the type is container\n--type\t\tReturn JSON for specified type\n12345</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#查看容器所有信息\ndocker inspect my-redis\n#查看容器网络信息\ndocker inspect my-redis|grep Network\n#查看容器ip信息\ndocker inspect my-redis|grep IP\n123456</code></pre>\n\n<h5 id=\"4-6-docker-port-查看容器端口映射情况\"><a href=\"#4-6-docker-port-查看容器端口映射情况\" class=\"headerlink\" title=\"4.6 docker port 查看容器端口映射情况\"></a>4.6 docker port 查看容器端口映射情况</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker port CONTAINER [PRIVATE_PORT[&#x2F;PROTO]]\n#示例如下\n docker port my-redis #查看网络映射情况\n docker port my-redis 6379&#x2F;tcp #查看改端口映射情况\n1234</code></pre>\n\n<h4 id=\"5、容器服务和宿主机如何交互\"><a href=\"#5、容器服务和宿主机如何交互\" class=\"headerlink\" title=\"5、容器服务和宿主机如何交互\"></a>5、容器服务和宿主机如何交互</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec [参数] CONTAINER COMMAND [ARG...]\n#####参数说明######\n--detach , -d\t\tDetached mode: run command in the background\n--detach-keys\t\tOverride the key sequence for detaching a container\n--env , -e\t\tAPI 1.25+ Set environment variables\n--interactive , -i\t\tKeep STDIN open even if not attached 开启可交互性能力，进入容器执行命令\n--privileged\t\tGive extended privileges to the command\n--tty , -t\t\tAllocate a pseudo-TTY\n--user , -u\t\tUsername or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n--workdir , -w\t\tAPI 1.35+\nWorking directory inside the container\n1234567891011</code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#进入容器执行命令,就跟登录到linux主机上一样的操作\ndocker exec -it my-redis &#x2F;bin&#x2F;bash\n12</code></pre>\n\n<h4 id=\"6、使用docker搭建中间件基础服务示例\"><a href=\"#6、使用docker搭建中间件基础服务示例\" class=\"headerlink\" title=\"6、使用docker搭建中间件基础服务示例\"></a>6、使用docker搭建中间件基础服务示例</h4><h5 id=\"6-1-搭建redis服务\"><a href=\"#6-1-搭建redis服务\" class=\"headerlink\" title=\"6.1 搭建redis服务\"></a>6.1 搭建redis服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -d --cpu-shares 512 -m 512M --memory-swap 1G --restart always --name redis redis --appendonly yes\n1</code></pre>\n\n<h5 id=\"6-2-搭建MariaDB服务\"><a href=\"#6-2-搭建MariaDB服务\" class=\"headerlink\" title=\"6.2 搭建MariaDB服务\"></a>6.2 搭建MariaDB服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo docker run -d --restart always --name mysql -p 3306:3306 -v &#x2F;data&#x2F;workspace&#x2F;service&#x2F;mysql&#x2F;old-data&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;data&#x2F;workspace&#x2F;service&#x2F;mysql&#x2F;conf.d:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;data&#x2F;workspace&#x2F;service&#x2F;mysql&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;&quot;123456&quot; mariadb:10.3\n1</code></pre>\n\n<h5 id=\"6-3-搭建MongoDB服务\"><a href=\"#6-3-搭建MongoDB服务\" class=\"headerlink\" title=\"6.3 搭建MongoDB服务\"></a>6.3 搭建MongoDB服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -p 8069:80 -v &#x2F;var&#x2F;data&#x2F;mongodb:&#x2F;var&#x2F;lib&#x2F;mongodb -v &#x2F;var&#x2F;data&#x2F;mongo_conf&#x2F;config.js:&#x2F;opt&#x2F;countly&#x2F;api&#x2F;config.js  -v &#x2F;var&#x2F;data&#x2F;mongo_conf&#x2F;web&#x2F;config.js:&#x2F;opt&#x2F;countly&#x2F;frontend&#x2F;express&#x2F;config.js -d countly&#x2F;countly-server\n1</code></pre>\n\n<h5 id=\"6-4-搭建RabbitMQ服务\"><a href=\"#6-4-搭建RabbitMQ服务\" class=\"headerlink\" title=\"6.4 搭建RabbitMQ服务\"></a>6.4 搭建RabbitMQ服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -d --restart always --name rabbitmq -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER&#x3D;admin -e RABBITMQ_DEFAULT_PASS&#x3D;admin rabbitmq:3-management\n1</code></pre>\n\n<h4 id=\"7、使用docker构建我们自己的服务镜像\"><a href=\"#7、使用docker构建我们自己的服务镜像\" class=\"headerlink\" title=\"7、使用docker构建我们自己的服务镜像\"></a>7、使用docker构建我们自己的服务镜像</h4><p>参考地址如下：</p>\n<ul>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5dac0c9c4c636361c5e75e96\"><strong>springboot应用制作docker镜像教程</strong></a></li>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5dd963674c636353f32a8cd3\"><strong>docker基础镜像centos7-jdk8-logstash构建</strong></a></li>\n</ul>\n<h4 id=\"8、搭建portainer服务管理宿主机上的docker服务\"><a href=\"#8、搭建portainer服务管理宿主机上的docker服务\" class=\"headerlink\" title=\"8、搭建portainer服务管理宿主机上的docker服务\"></a>8、搭建portainer服务管理宿主机上的docker服务</h4><ul>\n<li><p>安装步骤</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;data&#x2F;workspace&#x2F;service&#x2F;portainer&#x2F;data\n\nmkdir -p &#x2F;data&#x2F;workspace&#x2F;service&#x2F;portainer&#x2F;public\n\nwget http:&#x2F;&#x2F;www.danyuanblog.com&#x2F;file-gateway&#x2F;mediaDownload.do?mediaId&#x3D;5ec04f7b4c63637cd6ab5763 #下载汉化包\n\nunzip public.zip #解压汉化包\n\nmv public&#x2F;* &#x2F;data&#x2F;workspace&#x2F;service&#x2F;portainer&#x2F;public&#x2F; #移动汉化内容到需要挂载的资源目录下\n\ndocker run -d --restart always --name portainer -p 9000:9000 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock  -v &#x2F;data&#x2F;workspace&#x2F;service&#x2F;portainer&#x2F;data:&#x2F;data  -v &#x2F;data&#x2F;workspace&#x2F;service&#x2F;portainer&#x2F;public:&#x2F;public portainer&#x2F;portainer \n\n123456789101112</code></pre></li>\n<li><p>添加需要管理的主机</p>\n<ul>\n<li><p>访问地址：<code>http://192.168.56.22:9000</code>打开web后台</p>\n</li>\n<li><p>初次进入设置管理员登录密码，然后登录</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dh3kwgy8-1590333357272)(<a href=\"http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662278830069192.png)]\">http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662278830069192.png)]</a></p>\n<p>进入后：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kFp08xzQ-1590333357275)(<a href=\"http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662351411086467.png)]\">http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662351411086467.png)]</a></p>\n</li>\n<li><p>添加节点到protainer中</p>\n<ul>\n<li><p>点击菜单： 端点 –&gt; 添加端点</p>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:11-00:21:17.png\" alt=\"节点列表\"></p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9hlHkYM4-1590333357278)(<a href=\"http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662488794083232.png)]\">http://www.danyuanblog.com/file-gateway//ueditor/jsp/upload/image/20200517/1589662488794083232.png)]</a></p>\n</li>\n</ul>\n</li>\n<li><p>管理节点</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进入某个管理节点: 首页 –&gt; 点击某个管理节点</p></blockquote>\n<p><img src=\"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:11-00:21:23.png\" alt=\"管理节点首页\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"9、更多docker资料\"><a href=\"#9、更多docker资料\" class=\"headerlink\" title=\"9、更多docker资料\"></a>9、更多docker资料</h4><ul>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5dac0c9c4c636361c5e75e96\">springboot应用制作docker镜像教程</a></li>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5dd963674c636353f32a8cd3\">docker基础镜像centos7-jdk8-logstash构建</a></li>\n<li><a href=\"http://www.danyuanblog.com/blog/app/blog/blogDetail.html?id=5ec057fc4c636312f4b70926\">Docker swarm容器集群使用总结</a></li>\n</ul>\n","text":"简介 本文将整体介绍一下如何使用安装docker、获取docker资源、使用docker获得MySQL、redis等中间件服务并快速搭建，以及管理和使用这些中间件服务，docker容器和宿主机如何交互、如何构建我们自己的服务镜像等等。 本文内容有 我们为啥要用docker？ 管理...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">参考文章</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%88%91%E4%BB%AC%E4%B8%BA%E5%95%A5%E8%A6%81%E7%94%A8docker%EF%BC%9F\"><span class=\"toc-text\">1、我们为啥要用docker？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-docker%E8%83%BD%E7%BB%99%E6%88%91%E4%BB%AC%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E5%A5%BD%E5%A4%84%EF%BC%9F\"><span class=\"toc-text\">1.1 docker能给我们带来哪些好处？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-docker%E7%9A%84%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.2 docker的组成结构</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-docker%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">1.3 docker如何工作的？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docker\"><span class=\"toc-text\">1.4 我们如何使用docker?</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%AE%A1%E7%90%86docker-image%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">2、管理docker image镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1-docker-search-%E9%95%9C%E5%83%8F%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.1 docker search 镜像搜索命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2-docker-pull-%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.2 docker pull 镜像拉取命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-docker-rmi-%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.3 docker rmi 删除本地镜像命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-docker-images-%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">2.4 docker images 查看镜像信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-docker-tag-%E7%BB%99%E9%95%9C%E5%83%8F%E9%87%8D%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.5 docker tag 给镜像重命名</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-docker-build-%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">2.4 docker build 构建自己的镜像</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-5-docker-push-%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.5 docker push 推送镜像到远程仓库命令</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%88%9B%E5%BB%BAdocker-container%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">3、创建docker container容器服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-docker-create-%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.1 docker create 容器创建命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-docker-run-%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.2 docker run 创建并运行容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-docker-start-%E5%90%AF%E5%8A%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.3 docker start 启动已存在的容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-docker-stop-%E5%81%9C%E6%AD%A2%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.4 docker stop 停止正在运行的容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-5-docker-restart-%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.5 docker restart 重启容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-6-docker-pause-%E6%9A%82%E5%81%9C%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">3.6 docker pause 暂停容器服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-7-docker-kill-%E6%9D%80%E6%8E%89%E6%9F%90%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">3.7 docker kill 杀掉某容器服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-8-docker-rm-%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.8 docker rm 删除容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-9-docker-update-%E6%9B%B4%E6%96%B0%E5%AE%B9%E5%99%A8%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3.9 docker update 更新容器信息</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%9F%A5%E7%9C%8Bdocker-container%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">4、查看docker container容器服务状态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-docker-ps-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.1 docker ps 查看容器信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-docker-stats-%E6%9F%A5%E7%9C%8B%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">4.2 docker stats 查看正在运行的容器资源使用情况</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-docker-logs-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E7%9A%84%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.3 docker logs 查看容器的日志信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-docker-top-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%86%85%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">4.4 docker top 查看容器内服务资源使用情况</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-docker-inspect-%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.5 docker inspect 查看某个容器的详细信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-docker-port-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">4.6 docker port 查看容器端口映射情况</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%A6%82%E4%BD%95%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">5、容器服务和宿主机如何交互</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BA%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6、使用docker搭建中间件基础服务示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-1-%E6%90%AD%E5%BB%BAredis%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">6.1 搭建redis服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-2-%E6%90%AD%E5%BB%BAMariaDB%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">6.2 搭建MariaDB服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-%E6%90%AD%E5%BB%BAMongoDB%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">6.3 搭建MongoDB服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-4-%E6%90%AD%E5%BB%BARabbitMQ%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">6.4 搭建RabbitMQ服务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81%E4%BD%BF%E7%94%A8docker%E6%9E%84%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">7、使用docker构建我们自己的服务镜像</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E3%80%81%E6%90%AD%E5%BB%BAportainer%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84docker%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">8、搭建portainer服务管理宿主机上的docker服务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9%E3%80%81%E6%9B%B4%E5%A4%9Adocker%E8%B5%84%E6%96%99\"><span class=\"toc-text\">9、更多docker资料</span></a></li></ol>","author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}},"mapped":true,"prev_post":{"title":"SpringCloudALibaba Sentinel","uid":"2b44c6e424a6331818e54e65d2f7d5d8","slug":"73-SpringCloudAlibaba-Sentinel","date":"2021-09-13T15:49:32.000Z","updated":"2021-09-15T10:46:10.931Z","comments":true,"path":"api/articles/73-SpringCloudAlibaba-Sentinel.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog3.jpg","text":"01、Sentinel 简介 1.1、官方文档GitHub：https://github.com/alibaba/Sentinel 中文：https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D 1.2、Sentine...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/categories/SpringCloud-Alibaba.json"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/tags/SpringCloud-Alibaba.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}},"next_post":{"title":"SpringCloudALibaba Nacos","uid":"46276fa8df4cb43fb10a4919c6ba9d21","slug":"72-SpringCloudAlibaba-Nacos","date":"2021-09-13T15:48:32.000Z","updated":"2021-09-15T10:46:15.635Z","comments":true,"path":"api/articles/72-SpringCloudAlibaba-Nacos.json","cover":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-blog4.jpg","text":"01、SpringCloud Alibaba 简介 1.1、SpringCloud Alibaba为何出现 1.2、SpringCloud Alibaba是什么诞生：2018.10.31，Spring Cloud Alibaba正式入驻了Spring Cloud官网孵化器，并在M...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/categories/SpringCloud-Alibaba.json"}],"tags":[{"name":"SpringCloud Alibaba","slug":"SpringCloud-Alibaba","count":2,"path":"api/tags/SpringCloud-Alibaba.json"}],"author":{"name":"大黄","slug":"blog-author","avatar":"https://gitee.com/hrenxiang/picture/raw/master/uPic/2021:09:14-hh.JPG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/hrenxiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/15236325327","zhihu":"https://www.zhihu.com/people/hrenxiang","csdn":"https://blog.csdn.net/hrenxiang","juejin":"https://juejin.cn/user/985642616227406","customs":{}}}}}